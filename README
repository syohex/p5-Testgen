Testsuite generator 2

Ishiura Lab in Kwansei Gakuin University

0. Introduction
     Testgen is a test program generator for testing compiler.

   Requirement
     Testgen is implemented in 'Pure Perl' with standard modules.
     You require only perl 5.8.1 or higher.

   Testing platforms
     Ubuntu 10.10 32bit(gcc-4.4.5, pcc-1.0.0)
     Ubuntu 11.04 64bit(gcc-4.5.2, clang-2.8, arm-elf-gcc-4.6.1)
     Mac OSX Snow Leopard 64bit(gcc-4.2.1, clang-2.9)
     Windows 7 64bit(Microsoft Visual C++ 2010 Express)

     I hope that Testgen works well on Unix like platforms.

     [NOTE for Windows platform]
       - Windows support is beta quality.
       - Japanese Windows users should set console encoding to 'CP932'.

1. Write configuration file
   First you should write a configuration file.
   A configuration file is just a Perl's hash reference(HashRef).
   There are some mandatory parameters and some optional parameters.

   [Mandatory Parameters]
      compiler (type: String)  - compiler which is tested.
      testdir  (type: String)  - a directory where tests are generated.
      size     (type: Hashref) - sizes of types in C language.
                                 It should have keys, 'char', 'short', 'int',
                                 'long', 'pointer' at least.

      'size' parameter looks like as follows:
          size => {
             char => 8, short => 16, int => 32, long => 64, pointer => 64,
          },

       The generator makes predefined macros from it's parameter.
       ($CHARMIN(), $CHARMAX(), $UCHARMAX() ...).
       You can use these macros in template files.

   [Optional Parameters]
      lang      (type: String)   - programming languages.
                                   Now only suppored 'C'.
      simulator (type: String)   - simulator used running executable.
      c_flags   (type: ArrayRef) - compile flags which turn on at compiling.
      ld_flags  (type: ArrayRef) - linker flags which turn on at compiling.
      options   (type: ArrayRef) - user specified compile option.
                                    'run script' compiles each one.
      compile_only (type: Bool)  - a flag of only compileing, not executing.
      color        (type: Bool)  - using color logging.
                                      [Green]  - All tests passed
                                      [Yellow] - Failed executing.
                                      [Red]    - Compiling and Executing failed.
      parallels  (type: Int) - run 'n' tests simultaneously.
                                This parameter is supported only UNIX like
                                environment(Linux, *BSD, MacOSX).
      complement (type: Int) - complement of platform tested.
      timeout    (type: Int) - 'timeout' seconds of executing.
      output_option (type: Str)    - 'output' specified option.
      option_separator (Type: Str) - CLI option separator.

      [Default values]
         lang             - 'c'
         simulator        - undef
         c_flags          - []
         ld_flags         - []
         options          - [ '' ]
         compile_only     - 0
         color            - 0
         parallels        - 1
         complement       - 2 (It is Two's complement)
         timeout          - 10
         output_option    - '-o'
         option_separator - ' '(single space)

   There are sample configuration files in config/ directory.
   Please see them and you use them as reference.

2. How to use
  2-1 Generates test files
    % perl bin/tgen.pl --config=config/tgen.cnf template/*.tt

    Then testsuites are generated in the directory($config->{testdir}).
    And a 'run script' is generated in same directory.

    You can see command line options of tgen.pl, run 'tgen.pl --help'.

  2-2 Merges test files
    % cd TESTDIR # TESTDIR is $config->{testdir}
    % ./merge.pl [Regexp] ...

    After './merge.pl' test files are merged and you can do test
    earlier than not merged case.

    [NOTE]
      - You need 'gcc' for merge tests, because Testgen use 'gcc'
        to merge files.

  2-3 Run test files(Compile and Execute)
    % cd TESTDIR # TESTDIR is $config->{testdir}
    % ./runtest.pl [Regexp] ...

    If you specified regular expressions with './runtest.pl',
    it runs tests in only directories which match 'Regexp'.
    If you specified no regular expressions, it runs tests in all directories.

Appendix A. Directories hierarchy

   - README   : It's me.
   - COPYING  : Licence GPL ver.2
   - Changes  : ChangeLog
   - tgen.cnf : Default configuration file.

   - bin/
      - tgen.pl : script which generates test files.

   - config/
      Here are sample configuration files.

   - util/
       log2tsv.pl - Generate TSV file from the test log.

Appendix B. Example of configuration file

    +{
        compiler      => 'gcc',
        testdir       => 'testsuite',
        c_flags       => [ '-g', '-Dunix' ],
        ld_flags      => [ '-lm', '-lpthread' ],
        options       => [ '-O0',
                           [
                             '-O2',
                             [
                               '-funroll-looping',
                               '-fomit-frame-pointer',
                             ],
                           ],
                         ]

        size => {
             char  => 8,
             short => 16,
             int   => 32,
             long  => 64,
             pointer => 64,
        },
    };

    Then Testgen execute compiling commands as follows for each test files.
        gcc -g -Dunix -O0 TEST_FILE -lm -lpthread
        gcc -g -Dunix -O2 -funroll-looping TEST_FILE -lm -lpthread
        gcc -g -Dunix -O2 -fomit-frame-pointer TEST_FILE -lm -lpthread
