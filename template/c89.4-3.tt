@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "def.h"
@def_

@def $FHEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fdef.h"
@def_

@def $macro0()
$LICENSE()
#include "../testout.h"
long            NO = 0;
long            OK = 1;
#define NoMistake 00
@def_

@def $macro1()
$LICENSE()
#include "../testout.h"
long            NO = 0;
long            OK = 1;
float           OK_f = 1.0;
float           NO_f = 0.0;
#define NoMistake 00
@def_

@def $macro2()
$LICENSE()
$FHEAD()

#define SublimeElegance   0.0
#define MistyFlagrance    1.0
#define PreppyJohn        2.0
#define GlowingBeauty     3.0
#define AmicableDandy     4.0
#define RoughButAgreeable 5.0
#define WornOutBigamist   6.0
#define FadedGlory        7.0
#define DeadLikeAStone    8.0
#define StillLiveButJust  9.0
#define MenAroundMidas   10.0

float           statusFlag = NoMistake;

float blizzard(float);
float hurricaneJanet(float);
float patagonianBlow(float);
float heavyRain(float);
float drawnByJaded(float);
float bumpIntoBicycle(float);
float refresher(float);
float dribblingRain(float);
float balmyWindow(float);
float autumnalSunshine(float);

int main(void)
/*
 * test class: nested function, depth 10 meaning   : he, as a novice observer of tradition of elegence, suffers hardships
 * aplenty. In the end he gets trapped into Midas
 */
{
	float           bestdresser = SublimeElegance, endOfTheDay;
	/*float           blizzard(), hurricaneJanet(), patagonianBlow(),
	                heavyRain(), drawnByJaded(), bumpIntoBicycle(),
	                refresher(), dribblingRain(), balmyWindow(),
	                autumnalSunshine();
	*/

	endOfTheDay = blizzard(hurricaneJanet(patagonianBlow(
							     heavyRain(drawnByJaded(bumpIntoBicycle(
										       refresher(dribblingRain(balmyWindow(
										    autumnalSunshine(bestdresser))))))))));
	if (! TGEN_FLT_EQ(endOfTheDay, MenAroundMidas) )
		statusFlag++;
	if (TGEN_FLT_EQ(statusFlag, NoMistake) )
		printok();
	else
		printno();
	return 0;
}

float
autumnalSunshine(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, SublimeElegance) )
		statusFlag++;
	return ++apprentice;
}

float
balmyWindow(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, MistyFlagrance) )
		statusFlag++;
	return ++apprentice;
}

float
dribblingRain(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, PreppyJohn) )
		statusFlag++;
	return ++apprentice;
}

float
refresher(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, GlowingBeauty) )
		statusFlag++;
	return ++apprentice;
}

float
bumpIntoBicycle(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, AmicableDandy) )
		statusFlag++;
	return ++apprentice;
}

float
drawnByJaded(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, RoughButAgreeable) )
		statusFlag++;
	return ++apprentice;

}

float
heavyRain(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, WornOutBigamist) )
		statusFlag++;
	return ++apprentice;
}

float
patagonianBlow(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, FadedGlory) )
		statusFlag++;
	return ++apprentice;
}

float
hurricaneJanet(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, DeadLikeAStone) )
		statusFlag++;
	return ++apprentice;
}

float
blizzard(float apprentice)
{
	if (! TGEN_FLT_EQ(apprentice, StillLiveButJust) )
		statusFlag++;
	return ++apprentice;
}
@def_
@def $macro3()
$LICENSE()
$FHEAD()

#define Uno 1.0
#define Dos 2.0
#define CorrectAnswer 2816.0

float statusFlag = NoMistake;

float secondLevel(float, float);
float thirdLevel(float, float);
float fourthLevel(float, float);
float fifthLevel(float, float);
float sixthLevel(float, float);
float seventhLevel(float, float);
float eighthLevel(float, float);
float ninthLevel(float, float);
float tenthLevel(float, float);

int main(void)				/* alias first level */
/*  test class: linear tree structure, depth 10 */
{

	float           arg_a, arg_b;

	arg_a = secondLevel(Uno, Dos);
	arg_b = CorrectAnswer;
	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (TGEN_FLT_EQ(statusFlag, NoMistake))
		printok();
	else
		printno();
	return 0;
}

float
secondLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return thirdLevel(firstArgument, secondArgument)
		+ thirdLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
thirdLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return fourthLevel(firstArgument, secondArgument)
		+ fourthLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
fourthLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return fifthLevel(firstArgument, secondArgument)
		+ fifthLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
fifthLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return sixthLevel(firstArgument, secondArgument)
		+ sixthLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
sixthLevel(float firstArgument, float secondArgument)
{

	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return seventhLevel(firstArgument, secondArgument)
		+ seventhLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
seventhLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return eighthLevel(firstArgument, secondArgument)
		+ eighthLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
eighthLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return ninthLevel(firstArgument, secondArgument)
		+ ninthLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
ninthLevel(float firstArgument, float secondArgument)
{


	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return tenthLevel(firstArgument, secondArgument)
		+ tenthLevel(firstArgument + 1.0, secondArgument + 1.0);
}

float
tenthLevel(float firstArgument, float secondArgument)
{
	if (! TGEN_FLT_EQ(firstArgument, secondArgument - 1.0) )
		statusFlag++;
	return firstArgument + secondArgument;
}
@def_
@def $macro4()
$LICENSE()
$FHEAD()

#ifndef Numero
#define Cero   0.0
#define Uno    1.0
#define Dos    2.0
#define Tres   3.0
#define Quatro 4.0
#define Cinco  5.0
#define Seis   6.0
#define Siete  7.0
#endif

int main(void)
/*
 * test class: static variable declarations in inner blocks meaning   : complex, yet straightforward. I love Espa~na
 */
{
	float           statusFlag = NoMistake;
	static float    i = Cero;

	if (i = Uno) {
		static float    i;
		if (! TGEN_FLT_EQ(i, Cero) )
			statusFlag++;
		if (i = Dos) {
			static float    i;
			if (! TGEN_FLT_EQ(i, Cero) )
				statusFlag++;
			if (i = Tres) {
				static float    i;
				if (! TGEN_FLT_EQ(i, Cero) )
					statusFlag++;
				if (i = Quatro) {
					static float    i;
					if (! TGEN_FLT_EQ(i, Cero) )
						statusFlag++;
					if (i = Cinco) {
						static float    i;
						if (! TGEN_FLT_EQ(i, Cero) )
							statusFlag++;
						if (i = Seis) {
							static float    i;
							if (! TGEN_FLT_EQ(i, Cero) )
								statusFlag++;
							if (i = Siete) {
								static float    i;
								if (! TGEN_FLT_EQ(i, Cero) )
									statusFlag++;
							} else {
								static float    i;
								if (! TGEN_FLT_EQ(i, Cero) )
									statusFlag++;
							}
						} else {
							static float    i;
							if (! TGEN_FLT_EQ(i, Cero) )
								statusFlag++;
						}
					} else {
						static float    i;
						if (! TGEN_FLT_EQ(i, Cero) )
							statusFlag++;
					}
				} else {
					static float    i;
					if (! TGEN_FLT_EQ(i, Cero) )
						statusFlag++;
				}
			} else {
				static float    i;
				if (! TGEN_FLT_EQ(i, Cero) )
					statusFlag++;
			}
		} else {
			static float    i;
			if (! TGEN_FLT_EQ(i, Cero) )
				statusFlag++;
		}
	} else {
		static float    i;
		if (! TGEN_FLT_EQ(i, Cero) )
			statusFlag++;
	}
	if (TGEN_FLT_EQ(i, Uno))
		i++;
	if (TGEN_FLT_EQ(statusFlag, NoMistake))
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro5()
$LICENSE()
$HEAD()

typedef long    fiveFeet;
typedef long    whatToDo;
#define Exterminate 0xdeadL
#define YellowPeril 0xf0abL
#define Jap         0xbacaL
#define BearResult  0x4a61L
#define GlossOver   0x2e06L

long            statusFlag = NoMistake;

long mongorian(long (*)(), long (*)(), long (*)(), long (*)(), long (*)(), long);
long filthy(long (*)(), long (*)(), long (*)(), long);
long inferior(long);
long hollowlyBusy(long (*)(), long);
long noElegance(long);
long shouldBeDumped(long);
long skein(long (*)(), long (*)(), long (*)(), long (*)(), long (*)(), long (*)(), long);

int main(void)
/*
 * test class: pointer to function, depth 5 meaning   : so many man, so many faces. I admit to being racist, if he who
 * praise a race other than his should be called that
 */
{
	/*long            mongorian(), filthy(), inferior(), hollowlyBusy(),
	                noElegance(), shouldBeDumped(), skein();
	*/
	if (skein(mongorian, filthy, inferior, hollowlyBusy,
		  noElegance, shouldBeDumped, YellowPeril) != (fiveFeet) Jap)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}

long
skein(long (*oneFunction)(), long (*anotherFunction)(), long (*yetAnotherFunction)(),
      long (*stillAnotherFunction)(), long (*fifthFunction)(), long (*functionAgain)(), long description)
{
	if (functionAgain(description) != (whatToDo) Exterminate)
		statusFlag++;
	return oneFunction(anotherFunction, yetAnotherFunction, stillAnotherFunction,
			    fifthFunction, functionAgain, description);
}

long
mongorian(long (*featureOne)(), long (*featureTwo)(), long (*featureThree)(), long (*featureFour)(),
	  long (*whatToDoWithIt)(), long status)
{
	if (whatToDoWithIt(status) != (whatToDo) Exterminate)
		statusFlag++;
	return featureOne(featureTwo, featureThree, featureFour, status);
}

long
filthy(long (*functionOne)(), long (*functionTwo)(), long (*functionThree)(), long status)
{
	if (functionOne(status) != (whatToDo) Exterminate)
		statusFlag++;
	return functionTwo(functionThree, status);
}

long
inferior(long status)
{
	if (status != (fiveFeet) YellowPeril)
		statusFlag++;
	return status ^ GlossOver;
}

long
hollowlyBusy(long (*andStill)(), long status)
{
	if (andStill(status) != (fiveFeet) Jap)
		statusFlag++;
	return andStill(status);
}

long
noElegance(long status)
{
	if (status != (fiveFeet) YellowPeril)
		statusFlag++;
	return status ^ BearResult;
}

long
shouldBeDumped(long status)
{
	if (status != (fiveFeet) YellowPeril)
		statusFlag++;
	return status ^ GlossOver;
}
@def_
@def $macro6()
$LICENSE()
$HEAD()

#define Non       0L
#define Oui       1L
#define Length    1L
#define WeeHours  2L
#define Morning   3L
#define Highnoon  4L
#define Afternoon 5L
#define Evening   6L
#define Night     7L
#define Midnight  8L
#define Sunday    0L
#define Monday    1L
#define Tuesday   2L
#define Wednesday 3L
#define Thursday  4L
#define Friday    5L
#define Saturday  6L
#define NoMeaning 0L
#define NoOnesFault "your did it"

struct fiveToNine {
	long            oneOfThem;
};
struct numbers {
	long            i0;
	long            i1;
	long            i2;
	long            i3;
	long            i4;
	struct fiveToNine i56789[5];
};
static struct numbers dummyStructure;
long            statusFlag = NoMistake;

char *function(long, char*);
long compute(long, long, long, long);
long analyseDay(char[], long);
int toInteger(char);
int compare(char*, char*);

int main(void)
/* test class: fairly, in the least, complex expression as argument */
{
	static struct numbers *Long = &dummyStructure;
	static char    *weekday[] = {
				     "Sunday",
				     "Monday",
				     "Tuesday",
				     "Wednesday",
				     "Thursday",
				     "Friday",
				     "Saturday"};
	long            i73 = 73, i5 = 5;
	char           *whoDoneIt = NoOnesFault, *function();

	Long->i0 = 0L;
	Long->i1 = 1L;
	Long->i2 = 2L;
	Long->i3 = 3L;
	Long->i4 = 4L;
	Long->i56789[0].oneOfThem = 5L;
	Long->i56789[1].oneOfThem = 6L;
	Long->i56789[2].oneOfThem = 7L;
	Long->i56789[3].oneOfThem = 8L;
	Long->i56789[4].oneOfThem = 9L;

	whoDoneIt = function(i73 %= Long->i56789[0].oneOfThem *= Long->i2 +=
			     (Long->i1 == Long->i3 - Long->i2)
			     << Long->i56789[0].oneOfThem
			     + (Long->i2 != Long->i1)
			     >> !(Long->i1 + Long->i3 * ++i5)
			     ^ Long->i56789[1].oneOfThem << Long->i3
			     | Long->i56789[2].oneOfThem
			     | Long->i56789[3].oneOfThem * Long->i4 - Long->i1
			     & Long->i56789[0].oneOfThem * Long->i56789[4].oneOfThem
			     && Long->i3 * (Long->i56789[1].oneOfThem - Long->i3)
			     + Long->i1
			     == (Long->i4 - Long->i1) * Long->i4
			     || Long->i3 * Long->i4
			     > Long->i2 * Long->i3
			     + Long->i56789[4].oneOfThem % Long->i56789[0].oneOfThem,
/*
 * 73 %= 5 *= 2 += (1 == 1) << 5 + (2 != 1) >> 1 + 3 * ++5 ^ ( 6 << 3 | 6 ) | 8*4-1 & 5*9 && 3*(6-3)+1 == (4-1)*4 || 3*4 >
 * 2*3+9%5
 */
			     weekday[Friday]);
	if (!compare(whoDoneIt, "Juda"))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}

char           *
function(long argument, char *day)
{
	static char     functionValue[5];	/* This should be static.(Apr.25,1984) */
	long            i;
	long            argument1, argument2, argument3;
	long            compute(), analyseDay();

	if (argument != 13L)
		statusFlag++;
	argument1 = argument - analyseDay(day, Length);
	argument2 = argument >> analyseDay(day, Morning);
	argument3 = argument << analyseDay(day, Night)
		& argument >> analyseDay(day, Morning);
	for (i = 0; i < 4L; i++)
		functionValue[i] = !i ? 'A' + compute(i, argument1, argument2, argument3)
			: 'a' + compute(i, argument1, argument2, argument3);
	functionValue[4] = '\0';
	return functionValue;
}

long
compute(long i, long j, long k, long l)
{
	return (k - i) * k + j * (k - i) * i * (l - i);
}

long
analyseDay(char day[], long mode)
{
	long            evaluation;
	long            i;

	switch (mode) {
	case Length:
		for (i = 0; day[i]; ++i);
		evaluation = i;
		break;
	case WeeHours:
		evaluation = NoMeaning;
		break;
	case Morning:
		for (i = 0; day[i]; ++i);
		i--;
		evaluation = toInteger(day[i]) /
			((toInteger(day[1]) - toInteger(day[0]) - toInteger(day[2]))
			 * toInteger(day[3]));
		break;
	case Highnoon:
		evaluation = NoMeaning;
		break;
	case Afternoon:
		evaluation = NoMeaning;
		break;
	case Evening:
		evaluation = NoMeaning;
		break;
	case Night:
		for (i = 0; day[i]; ++i);
		i--;
		evaluation = toInteger(day[0]) %
			(toInteger(day[i]) /
			 (toInteger(day[1]) %
			  (toInteger(day[2]) + toInteger(day[3]))));
		break;
	case Midnight:
		evaluation = NoMeaning;
		break;
	default:
		evaluation = NoMeaning;
		break;
	};
	return evaluation;
}

int toInteger(char character)
{
	return character >= 'A' && character <= 'Z' ? character - 'A'
		: character - 'a';
}

int compare(char *aString, char *anotherString)
{
	for (; *anotherString; aString++, anotherString++)
		if (*aString != *anotherString)
			return Non;
	return Oui;
}
@def_
@def $macro7()
$LICENSE()
$HEAD()

#define SublimeElegance   0L
#define MistyFlagrance    1L
#define PreppyJohn        2L
#define GlowingBeauty     3L
#define AmicableDandy     4L
#define RoughButAgreeable 5L
#define WornOutBigamist   6L
#define FadedGlory        7L
#define DeadLikeAStone    8L
#define StillLiveButJust  9L
#define MenAroundMidas   10L

long            statusFlag = NoMistake;

long blizzard(long);
long hurricaneJanet(long);
long patagonianBlow(long);
long heavyRain(long);
long drawnByJaded(long);
long bumpIntoBicycle(long);
long refresher(long);
long dribblingRain(long);
long balmyWindow(long);
long autumnalSunshine(long);


int main(void)
/*
 * test class: nested function, depth 10 meaning   : he, as a novice observer of tradition of elegence, suffers hardships
 * aplenty. In the end he gets trapped into Midas
 */
{
	long            bestdresser = SublimeElegance, endOfTheDay;
	/*long            blizzard(), hurricaneJanet(), patagonianBlow(),
	                heavyRain(), drawnByJaded(), bumpIntoBicycle(),
	                refresher(), dribblingRain(), balmyWindow(),
	                autumnalSunshine();
	*/
	endOfTheDay = blizzard(hurricaneJanet(patagonianBlow(
							     heavyRain(drawnByJaded(bumpIntoBicycle(
										       refresher(dribblingRain(balmyWindow(
										    autumnalSunshine(bestdresser))))))))));
	if (endOfTheDay != MenAroundMidas)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}

long
autumnalSunshine(long apprentice)
{
	if (apprentice != SublimeElegance)
		statusFlag++;
	return ++apprentice;
}

long
balmyWindow(long apprentice)
{
	if (apprentice != MistyFlagrance)
		statusFlag++;
	return ++apprentice;
}

long
dribblingRain(long apprentice)
{
	if (apprentice != PreppyJohn)
		statusFlag++;
	return ++apprentice;
}

long
refresher(long apprentice)
{
	if (apprentice != GlowingBeauty)
		statusFlag++;
	return ++apprentice;
}

long
bumpIntoBicycle(long apprentice)
{
	if (apprentice != AmicableDandy)
		statusFlag++;
	return ++apprentice;
}

long
drawnByJaded(long apprentice)
{
	if (apprentice != RoughButAgreeable)
		statusFlag++;
	return ++apprentice;

}

long
heavyRain(long apprentice)
{
	if (apprentice != WornOutBigamist)
		statusFlag++;
	return ++apprentice;
}

long
patagonianBlow(long apprentice)
{
	if (apprentice != FadedGlory)
		statusFlag++;
	return ++apprentice;
}

long
hurricaneJanet(long apprentice)
{
	if (apprentice != DeadLikeAStone)
		statusFlag++;
	return ++apprentice;
}

long
blizzard(long apprentice)
{
	if (apprentice != StillLiveButJust)
		statusFlag++;
	return ++apprentice;
}
@def_
@def $macro8()
$LICENSE()
$HEAD()

typedef long    MyFavouriteType;
#define Midget        0L
#define Small         1L
#define Large         2L
#define SuperLarge    3L
#define Unknown    0xffL
#define In            0L
#define Out           1L
#define Around        2L
#define Bordering     3L
#define Latino        0L
#define OtherAmerica  1L
#define Europa        2L
#define Orient        3L
#define Africa        4L
#define Oceania       5L
#define Heaven     0xffL
#define Uninhabited   0L
#define Scattered     1L
#define Depopulated   2L
#define Crowded       3L
#define DenselyPacked 4L
#define LikeAGentlee  0L
#define FrenchStyle   1L
#define RussianBear   2L
#define BackPatter    3L
#define None          4L
#define Sophisticated 0L
#define SkinHead      1L
#define Nondescript   2L
#define FoxOnTheRun   1L
#define Japan         1L
#define Admissible    1L
#define Pass          1L
#define ExtinguishIt  0L
#define White         0L
#define Black         1L
#define Yellow        2L
#define GuessWhat     1L

long            statusFlag = NoMistake;

long situated(long, long);
long theSize(long);
long population(long);
long *culture(long);
long people(long, long, long);
long etiquette(long);
long looksLike(long);
long country(long, long);
long rebound(MyFavouriteType);

int main(void)
/*
 * test class: expression argument, dotted with function call meaning   : I can point to the country indicated in this
 * programme. Some call it the nationalism upside down, which I don't deny. Still, I prefer to calling it absolute hatred
 */
{
	long           *culture();
	/*long            country(), situated(), theSize(), population(),
	                people(), etiquette(), looksLike();
	*/
	if (country((situated(In, Orient)
		     + theSize(Small) / population(DenselyPacked))
		    % (*culture(Nondescript)
		       - people(Yellow, etiquette(None)
				,looksLike(FoxOnTheRun)))
		    ,GuessWhat)
	    != Japan)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}

long
situated(long mode, long where)
{
	static long     country[][3] = {
					0, 1, 2, 3, 4, 5, 6, 7, 8, 9
	};

	if (mode != In || where != Orient)
		statusFlag++;
	return country[mode][where];
}

long
theSize(long relativelySpeaking)
{
	long            returnValue;

	if (relativelySpeaking != Small)
		statusFlag++;
	switch (relativelySpeaking) {
	case Small:
		returnValue = Large;
		break;
	case Large:
		returnValue = Midget;
		break;
	case Midget:
		returnValue = SuperLarge;
		break;
	case SuperLarge:
		returnValue = Small;
		break;
	case Unknown:
		returnValue = Unknown;
		break;
	default:
		returnValue = Unknown;
		break;
	}
	return returnValue;
}

long
population(long howCrowded)
{
	long            i = 0;

	if (howCrowded != DenselyPacked)
		statusFlag++;
	while (--howCrowded)
		i++;
	return i;
}

long           *
culture(long sophistication)
{
	static long     gamut[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

	if (sophistication != Nondescript)
		statusFlag++;
	return gamut + sophistication;
}

long
people(long colour, long feature1, long feature2)
{
	if (colour != Yellow || feature1 != 1L || feature2 != 4L)
		statusFlag++;
	return colour / (feature1 + feature2);
}

long
etiquette(long decency)
{
	if (decency != None)
		statusFlag++;
	return decency >= Admissible ? Pass : ExtinguishIt;
}

long
looksLike(long animal)
{
	if (animal != FoxOnTheRun)
		statusFlag++;
	return animal + 3;
}

long
country(long value, long whatToAnswer)
{
	long            rebound();
	if (whatToAnswer == GuessWhat)
		return (rebound(value));
	return value;
}

long
rebound(MyFavouriteType object)
{
	return object;
}
@def_
@def $macro9()
$LICENSE()
$HEAD()

#define Uno 1L
#define Dos 2L
#define CorrectAnswer 2816L

long            statusFlag = NoMistake;

long secondLevel(long, long);
long thirdLevel(long, long);
long fourthLevel(long, long);
long fifthLevel(long, long);
long sixthLevel(long, long);
long seventhLevel(long, long);
long seventhLevel(long, long);
long eighthLevel(long, long);
long ninthLevel(long, long);
long tenthLevel(long, long);

int main(void)				/* alias first level */
/*  test class: linear tree structure, depth 10 */
{


	if (secondLevel(Uno, Dos) != CorrectAnswer)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}

long
secondLevel(long firstArgument, long secondArgument)
{


	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return thirdLevel(firstArgument, secondArgument)
		+ thirdLevel(firstArgument + 1, secondArgument + 1);
}

long
thirdLevel(long firstArgument, long secondArgument)
{


	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return fourthLevel(firstArgument, secondArgument)
		+ fourthLevel(firstArgument + 1, secondArgument + 1);
}

long
fourthLevel(long firstArgument, long secondArgument)
{


	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return fifthLevel(firstArgument, secondArgument)
		+ fifthLevel(firstArgument + 1, secondArgument + 1);
}

long
fifthLevel(long firstArgument, long secondArgument)
{


	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return sixthLevel(firstArgument, secondArgument)
		+ sixthLevel(firstArgument + 1, secondArgument + 1);
}

long
sixthLevel(long firstArgument, long secondArgument)
{

	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return seventhLevel(firstArgument, secondArgument)
		+ seventhLevel(firstArgument + 1, secondArgument + 1);
}

long
seventhLevel(long firstArgument, long secondArgument)
{

	long            eighthLevel();

	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return eighthLevel(firstArgument, secondArgument)
		+ eighthLevel(firstArgument + 1, secondArgument + 1);
}

long
eighthLevel(long firstArgument, long secondArgument)
{

	long            ninthLevel();

	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return ninthLevel(firstArgument, secondArgument)
		+ ninthLevel(firstArgument + 1, secondArgument + 1);
}

long
ninthLevel(long firstArgument, long secondArgument)
{

	long            tenthLevel();

	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return tenthLevel(firstArgument, secondArgument)
		+ tenthLevel(firstArgument + 1, secondArgument + 1);
}

long
tenthLevel(long firstArgument, long secondArgument)
{
	if (firstArgument != secondArgument - 1L)
		statusFlag++;
	return firstArgument + secondArgument;
}
@def_
@def $macro10()
$LICENSE()
$HEAD()

#ifndef TimeLimit
#define TimeLimit 26
#endif
#define Adam 'a'
#define Initialisation 0
#define Non 0
#define Oui 1

long            statusFlag = NoMistake;
long            converted = Initialisation;

long main1(long, char*);
long east(long, char*);
long south(long, char*);
long west(long, char*);

int main(void)
{

	main1(0L, 0);
	return 0;
}

long
main1(long argc, char *argv)		/* alias north */
/*
 *  test class: rescursive call, four function roundabout meaning   : no matter wither or whence the wind blows, we must
 * hanker after the day of Adam and Eve before Babel's falloff
 */
{
	long            counter = Initialisation;
	static char    *alphabet = "abcdefghijklmnopqrstuvwxyz";

	if (!converted && counter < TimeLimit) {
		converted = Oui;
		east(counter, alphabet);
		if (*(alphabet - counter) != Adam)
			statusFlag++;
		if (statusFlag == NoMistake)
			printok();
		else
			printno();
	} else if (argc < TimeLimit) {
		east(argc + 1, argv + 1);
		if (*(argv - argc) != Adam)
			statusFlag++;
	}
}

long
east(long counter, char *alphabet)
{

	if (counter < TimeLimit)
		south(counter + 1, alphabet + 1);
	if (*(alphabet - counter) != Adam)
		statusFlag++;

}

long
south(long counter, char *alphabet)
{

	if (counter < TimeLimit)
		west(counter + 1, alphabet + 1);
	if (*(alphabet - counter) != Adam)
		statusFlag++;
}

long
west(long counter, char *alphabet)
{

	if (counter < TimeLimit)
		main1(counter + 1, alphabet + 1);
	if (*(alphabet - counter) != Adam)
		statusFlag++;
}
@def_
@def $macro11()
$LICENSE()
$HEAD()

#ifndef Numero
#define Cero   0
#define Uno    1
#define Dos    2
#define Tres   3
#define Quatro 4
#define Cinco  5
#define Seis   6
#define Siete  7
#endif

int main(void)
/*
 * test class: static variable declarations in inner blocks meaning   : complex, yet straightforward. I love Espa~na
 */
{
	long            statusFlag = NoMistake;
	static long     i = Cero;

	if (i = Uno) {
		static long     i;
		if (i != Cero)
			statusFlag++;
		if (i = Dos) {
			static long     i;
			if (i != Cero)
				statusFlag++;
			if (i = Tres) {
				static long     i;
				if (i != Cero)
					statusFlag++;
				if (i = Quatro) {
					static long     i;
					if (i != Cero)
						statusFlag++;
					if (i = Cinco) {
						static long     i;
						if (i != Cero)
							statusFlag++;
						if (i = Seis) {
							static long     i;
							if (i != Cero)
								statusFlag++;
							if (i = Siete) {
								static long     i;
								if (i != Cero)
									statusFlag++;
							} else {
								static long     i;
								if (i != Cero)
									statusFlag++;
							}
						} else {
							static long     i;
							if (i != Cero)
								statusFlag++;
						}
					} else {
						static long     i;
						if (i != Cero)
							statusFlag++;
					}
				} else {
					static long     i;
					if (i != Cero)
						statusFlag++;
				}
			} else {
				static long     i;
				if (i != Cero)
					statusFlag++;
			}
		} else {
			static long     i;
			if (i != Cero)
				statusFlag++;
		}
	} else {
		static long     i;
		if (i != Cero)
			statusFlag++;
	}
	if (i == Uno)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro12()
$LICENSE()
$HEAD()

#define Uno 1

int main(void)
/*
 * test class: nested functions combined with assignment operators meaning   : the Element, despised as too old-fashioned, I
 * rather huddle instead of grabbing at everything ugly
 */
{
	long            finalResult, ninthResult, eighthResult, seventhResult, sixthResult, fifthResult, fourthResult, thirdResult, secondResult, firstResult;
	long            element = Uno;

	finalResult
		= levelOne(ninthResult
			   = levelTwo(eighthResult
				      = levelThree(seventhResult
						   = levelFour(sixthResult
							       = levelFive(fifthResult
									   = levelSix(fourthResult
										      = levelSeven(thirdResult
												   = levelEight(secondResult
												    = levelNine(firstResult
											      = levelTen(element))))))))));
	if (firstResult == ++element
	    && secondResult == ++element
	    && thirdResult == ++element
	    && fourthResult == ++element
	    && fifthResult == ++element
	    && sixthResult == ++element
	    && seventhResult == ++element
	    && eighthResult == ++element
	    && ninthResult == ++element
	    && finalResult == ++element)
		printok();
	else
		printno();
	return 0;
}

int levelOne(long argument)
{
	return ++argument;
}

int levelTwo(long argument)
{
	return ++argument;
}

int levelThree(long argument)
{
	return ++argument;
}

int levelFour(long argument)
{
	return ++argument;
}

int levelFive(long argument)
{
	return ++argument;
}

int levelSix(long argument)
{
	return ++argument;
}

int levelSeven(long argument)
{
	return ++argument;
}

int levelEight(long argument)
{
	return ++argument;
}

int levelNine(long argument)
{
	return ++argument;
}

int levelTen(long argument)
{
	return ++argument;
}
@def_
@def $macro13()
$LICENSE()
$HEAD()

#define CorrectValueOne    1L
#define CorrectValueTwo    2L
#define SupremeRein        0L
#define FallenMidas        1L
#define TestBedside        2L
#define NoBrain            3L
#define CompetentSecretary 4L
#define HardUnderwear      5L
#define TeachHowToXX       6L

long            statusFlag = NoMistake;

long function(int);

int main(void)
/*
 * test class: very complex logical expression as argument (veclex) meaning   : in this room it seems inpolite to conclude
 * that only He can see through
 */
{
	long            queen = SupremeRein, ohta = FallenMidas, matsuo = ohta + 1, kurihara = TestBedside, ishihara = matsuo + 1, galwas = NoBrain, saito = ishihara + 1, asai = HardUnderwear, miura = saito + 1, sano = TeachHowToXX, utashiro = kurihara + 1, hikichi = miura + 1, junko = utashiro + 1, mieko = CompetentSecretary, nishiyama = hikichi + 1, takeda = galwas + 1;

	if (function((queen == SupremeRein && ohta == FallenMidas
		      || matsuo == FallenMidas + 1 && kurihara == TestBedside)
		     && (ishihara == FallenMidas + 2 && galwas == NoBrain
			 || saito == FallenMidas + 3 && asai != FallenMidas)
		     || (miura == FallenMidas + 4 && sano == TeachHowToXX
			 || utashiro == TestBedside + 1 && hikichi == FallenMidas + 5)
		     && (junko == TestBedside + 2 && mieko == CompetentSecretary
			 || nishiyama == FallenMidas + 6 && takeda == NoBrain + 1))
	    != CorrectValueTwo)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return 0;
}

long
function(int argument)
{
	if (argument != CorrectValueOne)
		statusFlag++;
	return (argument + 1) % 7;
}
@def_

@dir c89.4-3
@file >>def.h $macro0() @file_
@file >>fdef.h $macro1() @file_
@file >>ft3.c $macro2() @file_
@file >>ft5.c $macro3() @file_
@file >>ft7.c $macro4() @file_
@file >>lt10.c $macro5() @file_
@file >>lt2.c $macro6() @file_
@file >>lt3.c $macro7() @file_
@file >>lt4.c $macro8() @file_
@file >>lt5.c $macro9() @file_
@file >>lt6.c $macro10() @file_
@file >>lt7.c $macro11() @file_
@file >>lt8.c $macro12() @file_
@file >>lt9.c $macro13() @file_

@dir_
