@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@def $LICENSE()
/*
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
hikichi@sra.co.jp(Nobuyuki Hikichi)

This file was written by several people in Software Research Associates,
Inc. Japan in several years.
*/
@def_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd.h"
@def_

@def $FHEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd.h"
@def_

@def $macro0()
$LICENSE()
/* fudou shyousuten enzan basic type */
$FHEAD()

short           statusFlag = 0;
short           counter = 100;

main()
{

	short           loop;

	ftest = HEX[100];

	for (loop = 1; loop <= counter; loop++) {
		ftest = ftest * 2.0;
		refer(loop, ftest);
	};

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

refer(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	essen = 100 - essen;
	fff = HEX[essen];

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

}
@def_
@def $macro1()
$LICENSE()
/* fudou shyousuten enzan basic type */
#ifdef SYSDEP_H
#include "sysdep.h"
#endif

#include "fstnd2.h"

short           statusFlag = 0;
short           counter = 100;

main()
{

	short           loop;

	ftest = 2.0;
	for (loop = 1; loop <= (counter - 1); loop++) {
		ftest = ftest * 2.0;
		refer(loop, ftest);
	};

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

refer(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	fff = BEK[essen + 1];

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

}
@def_
@def $macro2()
$LICENSE()
/* fudou shyousuten enzan basic type */
#ifdef SYSDEP_H
#include "sysdep.h"
#endif

#include "fstnd2.h"

short           statusFlag = 0;
short           counter = 100;

main()
{

	short           loop;

	ftest = BEK[100];
	for (loop = 1; loop <= (counter - 1); loop++) {
		ftest = ftest / 2.0;
		refer(loop, ftest);
	};

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

refer(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	essen = 100 - essen;
	fff = BEK[essen];

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

}
@def_
@def $macro3()
$LICENSE()
/* fudou shyousuten enzan basic type */
$FHEAD()

short           statusFlag = 0;

main()
{

	float           flt;
	float           refer();

	ftest = FLT[0];
	flt = refer(0, ftest);
	if (! TGEN_FLT_EQ(flt, FLT[0]) )
		statusFlag++;

	ftest = FLT[1];
	flt = refer(1, ftest);
	if (! TGEN_FLT_EQ(flt, FLT[1]) )
		statusFlag++;

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

float 
refer(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	fff = FLT[essen];

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

	return (value);
}
@def_
@def $macro4()
$LICENSE()
/* fudou shyousuten enzan basic type */
#ifdef SYSDEP_H
#include "sysdep.h"
#endif

#include "fstnd3.h"

short           statusFlag = 0;
short           counter = 1000;
short           flag = 1;

main()
{

	short           loop;

	ftest = LMTA[1];

	for (loop = 2; loop <= counter, flag == OK; loop++) {
		ftest = ftest * 2.0;
		refer_1(loop, ftest);
	};

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

refer_1(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	fff = LMTA[essen];

	if (value >= 0.0)
		flag = NO;

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

}
@def_
@def $macro5()
$LICENSE()
/* fudou shyousuten enzan basic type */
#ifdef SYSDEP_H
#include "sysdep.h"
#endif

#include "fstnd3.h"

short           statusFlag = 0;
short           counter = 1000;
short           flag = 1;

main()
{

	short           loop;

	ftest = LMTB[1];

	for (loop = 2; loop <= counter, flag == OK; loop++) {
		ftest = ftest / 2.0;
		refer_2(loop, ftest);
	};

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

refer_2(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	fff = LMTB[essen];

	if (value <= 1.0)
		flag = NO;

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

}
@def_
@def $macro6()
$LICENSE()
/* fudou shyousuten enzan basic type */
#ifdef SYSDEP_H
#include "sysdep.h"
#endif

#include "fstnd5.h"

short           statusFlag = 0;
short           counter = 1000;
short           flag = 1;

main()
{

	short           loop;

	ftest = 1.0;
	for (loop = 1; loop <= counter, flag == OK; loop++) {
		ftest = ftest * (float) loop;
		refer_2(loop, ftest);
	};

	if (statusFlag == 0)
		printok();
	else
		printno();

	return (0);
}

refer_2(essen, value)
	int             essen;
	float           value;
{

	float           fff;

	fff = LMT[essen - 1];

	if (value >= (FLT[1] / (float) essen + 1))
		flag = NO;

	if (! TGEN_FLT_EQ(value, fff) )
		statusFlag++;

}
@def_

@def $macro7()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
float           ftest;
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
float           Float;
struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               Struct;
union Union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef         FLOATDEF;
typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               UNIDEF;
#define OK_f 1.0
#define NO_f 0.0
float           FLT[2] =
{
 2.938736e-38,
 1.701411e+38
};
long            LMT[3] =
{
 0x80,				/* 2.938736e-39 */
 0xffff7fff,			/* 1.701411e+38 */
 0x7f80				/* 8.507059e+37 */
};
float           NAT[10] =
{
 0.0,
 1.0,
 2.0,
 3.0,
 4.0,
 5.0,
 6.0,
 7.0,
 8.0,
 9.0
};
float           CNT[101] =
{
 1.000000e+00,
 5.000000e-01,
 2.500000e-01,
 1.250000e-01,
 6.250000e-02,
 3.125000e-02,
 1.562500e-02,
 7.812500e-03,
 3.906250e-03,
 1.953125e-03,
 9.765625e-04,
 4.882813e-04,
 2.441406e-04,
 1.220703e-04,
 6.103516e-05,
 3.051758e-05,
 1.525879e-05,
 7.629395e-06,
 3.814697e-06,
 1.907349e-06,
 9.536743e-07,
 4.768372e-07,
 2.384186e-07,
 1.192093e-07,
 5.960464e-08,
 2.980232e-08,
 1.490116e-08,
 7.450581e-09,
 3.725290e-09,
 1.862645e-09,
 9.313226e-10,
 4.656613e-10,
 2.328306e-10,
 1.164153e-10,
 5.820766e-11,
 2.910383e-11,
 1.455192e-11,
 7.275958e-12,
 3.637979e-12,
 1.818989e-12,
 9.094947e-13,
 4.547474e-13,
 2.273737e-13,
 1.136868e-13,
 5.684342e-14,
 2.842171e-14,
 1.421085e-14,
 7.105427e-15,
 3.552714e-15,
 1.776357e-15,
 8.881784e-16,
 4.440892e-16,
 2.220446e-16,
 1.110223e-16,
 5.551115e-17,
 2.775558e-17,
 1.387779e-17,
 6.938894e-18,
 3.469447e-18,
 1.734723e-18,
 8.673617e-19,
 4.336809e-19,
 2.168404e-19,
 1.084202e-19,
 5.421011e-20,
 2.710505e-20,
 1.355253e-20,
 6.776264e-21,
 3.388132e-21,
 1.694066e-21,
 8.470329e-22,
 4.235165e-22,
 2.117582e-22,
 1.058791e-22,
 5.293956e-23,
 2.646978e-23,
 1.323489e-23,
 6.617445e-24,
 3.308722e-24,
 1.654361e-24,
 8.271806e-25,
 4.135903e-25,
 2.067952e-25,
 1.033976e-25,
 5.169879e-26,
 2.584939e-26,
 1.292470e-26,
 6.462349e-27,
 3.231174e-27,
 1.615587e-27,
 8.077936e-28,
 4.038968e-28,
 2.019484e-28,
 1.009742e-28,
 5.048710e-29,
 2.524355e-29,
 1.262177e-29,
 6.310887e-30,
 3.155444e-30,
 1.577722e-30,
 7.888609e-31
};

float           HEX[101] =
{
 1.0000000000000000000000000000000000000000000000000000000,
 0.5000000000000000000000000000000000000000000000000000000,
 0.2500000000000000000000000000000000000000000000000000000,
 0.1250000000000000000000000000000000000000000000000000000,
 0.0625000000000000000000000000000000000000000000000000000,
 0.0312500000000000000000000000000000000000000000000000000,
 0.0156250000000000000000000000000000000000000000000000000,
 0.0078125000000000000000000000000000000000000000000000000,
 0.0039062500000000000000000000000000000000000000000000000,
 0.0019531250000000000000000000000000000000000000000000000,
 0.0009765625000000000000000000000000000000000000000000000,
 0.0004882812500000000000000000000000000000000000000000000,
 0.0002441406250000000000000000000000000000000000000000000,
 0.0001220703125000000000000000000000000000000000000000000,
 0.0000610351562500000000000000000000000000000000000000000,
 0.0000305175781250000000000000000000000000000000000000000,
 0.0000152587890625000000000000000000000000000000000000000,
 0.0000076293945312500000000000000000000000000000000000000,
 0.0000038146972656250000000000000000000000000000000000000,
 0.0000019073486328125000000000000000000000000000000000000,
 0.0000009536743164062500000000000000000000000000000000000,
 0.0000004768371582031250000000000000000000000000000000000,
 0.0000002384185791015625000000000000000000000000000000000,
 0.0000001192092895507812500000000000000000000000000000000,
 0.0000000596046447753906250000000000000000000000000000000,
 0.0000000298023223876953130000000000000000000000000000000,
 0.0000000149011611938476560000000000000000000000000000000,
 0.0000000074505805969238281000000000000000000000000000000,
 0.0000000037252902984619141000000000000000000000000000000,
 0.0000000018626451492309570000000000000000000000000000000,
 0.0000000009313225746154785200000000000000000000000000000,
 0.0000000004656612873077392600000000000000000000000000000,
 0.0000000002328306436538696300000000000000000000000000000,
 0.0000000001164153218269348100000000000000000000000000000,
 0.0000000000582076609134674070000000000000000000000000000,
 0.0000000000291038304567337040000000000000000000000000000,
 0.0000000000145519152283668520000000000000000000000000000,
 0.0000000000072759576141834259000000000000000000000000000,
 0.0000000000036379788070917130000000000000000000000000000,
 0.0000000000018189894035458565000000000000000000000000000,
 0.0000000000009094947017729282400000000000000000000000000,
 0.0000000000004547473508864641200000000000000000000000000,
 0.0000000000002273736754432320600000000000000000000000000,
 0.0000000000001136868377216160300000000000000000000000000,
 0.0000000000000568434188608080150000000000000000000000000,
 0.0000000000000284217094304040070000000000000000000000000,
 0.0000000000000142108547152020040000000000000000000000000,
 0.0000000000000071054273576010019000000000000000000000000,
 0.0000000000000035527136788005009000000000000000000000000,
 0.0000000000000017763568394002505000000000000000000000000,
 0.0000000000000008881784197001252300000000000000000000000,
 0.0000000000000004440892098500626200000000000000000000000,
 0.0000000000000002220446049250313100000000000000000000000,
 0.0000000000000001110223024625156500000000000000000000000,
 0.0000000000000000555111512312578270000000000000000000000,
 0.0000000000000000277555756156289140000000000000000000000,
 0.0000000000000000138777878078144570000000000000000000000,
 0.0000000000000000069388939039072284000000000000000000000,
 0.0000000000000000034694469519536142000000000000000000000,
 0.0000000000000000017347234759768071000000000000000000000,
 0.0000000000000000008673617379884035500000000000000000000,
 0.0000000000000000004336808689942017700000000000000000000,
 0.0000000000000000002168404344971008900000000000000000000,
 0.0000000000000000001084202172485504400000000000000000000,
 0.0000000000000000000542101086242752220000000000000000000,
 0.0000000000000000000271050543121376110000000000000000000,
 0.0000000000000000000135525271560688050000000000000000000,
 0.0000000000000000000067762635780344027000000000000000000,
 0.0000000000000000000033881317890172014000000000000000000,
 0.0000000000000000000016940658945086007000000000000000000,
 0.0000000000000000000008470329472543003400000000000000000,
 0.0000000000000000000004235164736271501700000000000000000,
 0.0000000000000000000002117582368135750800000000000000000,
 0.0000000000000000000001058791184067875400000000000000000,
 0.0000000000000000000000529395592033937710000000000000000,
 0.0000000000000000000000264697796016968860000000000000000,
 0.0000000000000000000000132348898008484430000000000000000,
 0.0000000000000000000000066174449004242214000000000000000,
 0.0000000000000000000000033087224502121107000000000000000,
 0.0000000000000000000000016543612251060553000000000000000,
 0.0000000000000000000000008271806125530276700000000000000,
 0.0000000000000000000000004135903062765138400000000000000,
 0.0000000000000000000000002067951531382569200000000000000,
 0.0000000000000000000000001033975765691284600000000000000,
 0.0000000000000000000000000516987882845642300000000000000,
 0.0000000000000000000000000258493941422821150000000000000,
 0.0000000000000000000000000129246970711410570000000000000,
 0.0000000000000000000000000064623485355705287000000000000,
 0.0000000000000000000000000032311742677852644000000000000,
 0.0000000000000000000000000016155871338926322000000000000,
 0.0000000000000000000000000008077935669463160900000000000,
 0.0000000000000000000000000004038967834731580400000000000,
 0.0000000000000000000000000002019483917365790200000000000,
 0.0000000000000000000000000001009741958682895100000000000,
 0.0000000000000000000000000000504870979341447560000000000,
 0.0000000000000000000000000000252435489670723780000000000,
 0.0000000000000000000000000000126217744835361890000000000,
 0.0000000000000000000000000000063108872417680944000000000,
 0.0000000000000000000000000000031554436208840472000000000,
 0.0000000000000000000000000000015777218104420236000000000,
 0.0000000000000000000000000000007888609052210118100000000
};
@def_

@def $macro8()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
float           ftest;

#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'

int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
float           Float;

struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               Struct;

union Union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               Union;

typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef         FLOATDEF;

typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               STRDEF;

typedef union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               UNIDEF;

#define OK_f 1.0
#define NO_f 0.0

float           FLT[2] =
{
 2.938736e-38,
 1.701411e+38
};

long            LMT[3] =
{
 0x80,				/* 2.938736e-39 */
 0xffff7fff,			/* 1.701411e+38 */
 0x7f80				/* 8.507059e+37 */
};

float           NAT[10] =
{
 0.0,
 1.0,
 2.0,
 3.0,
 4.0,
 5.0,
 6.0,
 7.0,
 8.0,
 9.0
};


float           BEK[101] =
{
 1.000000,
 2.000000,
 4.000000,
 8.000000,
 16.000000,
 32.000000,
 64.000000,
 128.000000,
 256.000000,
 512.000000,
 1024.000000,
 2048.000000,
 4096.000000,
 8192.000000,
 16384.000000,
 32768.000000,
 65536.000000,
 131072.000000,
 262144.000000,
 524288.000000,
 1048576.000000,
 2097152.000000,
 4194304.000000,
 8388608.000000,
 16777216.000000,
 33554432.000000,
 67108864.000000,
 134217728.000000,
 268435456.000000,
 536870912.000000,
 1073741824.000000,
 2147483648.000000,
 4294967296.000000,
 8589934592.000000,
 17179869184.000000,
 34359738368.000000,
 68719476736.000000,
 137438953472.000000,
 274877906944.000000,
 549755813888.000000,
 1099511627776.000000,
 2199023255552.000000,
 4398046511104.000000,
 8796093022208.000000,
 17592186044416.000000,
 35184372088832.000000,
 70368744177664.000000,
 140737488355328.000000,
 281474976710656.000000,
 562949953421312.000000,
 1125899906842624.000000,
 2251799813685248.000000,
 4503599627370496.000000,
 9007199254740992.000000,
 18014398509481984.000000,
 36028797018963968.000000,
 72057594037927936.000000,
 144115188075855870.000000,
 288230376151711740.000000,
 576460752303423490.000000,
 1152921504606847000.000000,
 2305843009213694000.000000,
 4611686018427387900.000000,
 9223372036854775800.000000,
 18446744073709552000.000000,
 36893488147419103000.000000,
 73786976294838206000.000000,
 147573952589676410000.000000,
 295147905179352830000.000000,
 590295810358705650000.000000,
 1180591620717411300000.000000,
 2361183241434822600000.000000,
 4722366482869645200000.000000,
 9444732965739290400000.000000,
 18889465931478581000000.000000,
 37778931862957162000000.000000,
 75557863725914323000000.000000,
 151115727451828650000000.000000,
 302231454903657290000000.000000,
 604462909807314590000000.000000,
 1208925819614629200000000.000000,
 2417851639229258300000000.000000,
 4835703278458516700000000.000000,
 9671406556917033400000000.000000,
 19342813113834067000000000.000000,
 38685626227668134000000000.000000,
 77371252455336267000000000.000000,
 154742504910672530000000000.000000,
 309485009821345070000000000.000000,
 618970019642690140000000000.000000,
 1237940039285380300000000000.000000,
 2475880078570760500000000000.000000,
 4951760157141521100000000000.000000,
 9903520314283042200000000000.000000,
 19807040628566084000000000000.000000,
 39614081257132169000000000000.000000,
 79228162514264338000000000000.000000,
 158456325028528680000000000000.000000,
 316912650057057350000000000000.000000,
 633825300114114700000000000000.000000,
 1267650600228229400000000000000.000000
};
@def_

@def $macro9()
$LICENSE()
#include "testout.h"

long            itest;
char            ctest;
float           ftest;

#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'

int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
float           Float;

struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               Struct;

union Union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               Union;

typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef         FLOATDEF;

typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               STRDEF;

typedef union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               UNIDEF;

#define OK_f 1.0
#define NO_f 0.0

float           FLT[2] =
{
 2.938736e-38,
 1.701411e+38
};

long            LMT[3] =
{
 0x80,				/* 2.938736e-39 */
 0xffff7fff,			/* 1.701411e+38 */
 0x7f80				/* 8.507059e+37 */
};

float           NAT[10] =
{
 0.0,
 1.0,
 2.0,
 3.0,
 4.0,
 5.0,
 6.0,
 7.0,
 8.0,
 9.0
};

float           LMTA[126] =
{
 0.0000000000000000000000000000000000000235098870164457500,
 0.0000000000000000000000000000000000000470197740328915000,
 0.0000000000000000000000000000000000000940395480657830010,
 0.0000000000000000000000000000000000001880790961315660000,
 0.0000000000000000000000000000000000003761581922631320000,
 0.0000000000000000000000000000000000007523163845262640000,
 0.0000000000000000000000000000000000015046327690525280000,
 0.0000000000000000000000000000000000030092655381050560000,
 0.0000000000000000000000000000000000060185310762101120000,
 0.0000000000000000000000000000000000120370621524202240000,
 0.0000000000000000000000000000000000240741243048404480000,
 0.0000000000000000000000000000000000481482486096808960000,
 0.0000000000000000000000000000000000962964972193617930000,
 0.0000000000000000000000000000000001925929944387235900000,
 0.0000000000000000000000000000000003851859888774471700000,
 0.0000000000000000000000000000000007703719777548943400000,
 0.0000000000000000000000000000000015407439555097887000000,
 0.0000000000000000000000000000000030814879110195774000000,
 0.0000000000000000000000000000000061629758220391547000000,
 0.0000000000000000000000000000000123259516440783090000000,
 0.0000000000000000000000000000000246519032881566190000000,
 0.0000000000000000000000000000000493038065763132380000000,
 0.0000000000000000000000000000000986076131526264760000000,
 0.0000000000000000000000000000001972152263052529500000000,
 0.0000000000000000000000000000003944304526105059000000000,
 0.0000000000000000000000000000007888609052210118100000000,
 0.0000000000000000000000000000015777218104420236000000000,
 0.0000000000000000000000000000031554436208840472000000000,
 0.0000000000000000000000000000063108872417680944000000000,
 0.0000000000000000000000000000126217744835361890000000000,
 0.0000000000000000000000000000252435489670723780000000000,
 0.0000000000000000000000000000504870979341447560000000000,
 0.0000000000000000000000000001009741958682895100000000000,
 0.0000000000000000000000000002019483917365790200000000000,
 0.0000000000000000000000000004038967834731580400000000000,
 0.0000000000000000000000000008077935669463160900000000000,
 0.0000000000000000000000000016155871338926322000000000000,
 0.0000000000000000000000000032311742677852644000000000000,
 0.0000000000000000000000000064623485355705287000000000000,
 0.0000000000000000000000000129246970711410570000000000000,
 0.0000000000000000000000000258493941422821150000000000000,
 0.0000000000000000000000000516987882845642300000000000000,
 0.0000000000000000000000001033975765691284600000000000000,
 0.0000000000000000000000002067951531382569200000000000000,
 0.0000000000000000000000004135903062765138400000000000000,
 0.0000000000000000000000008271806125530276700000000000000,
 0.0000000000000000000000016543612251060553000000000000000,
 0.0000000000000000000000033087224502121107000000000000000,
 0.0000000000000000000000066174449004242214000000000000000,
 0.0000000000000000000000132348898008484430000000000000000,
 0.0000000000000000000000264697796016968860000000000000000,
 0.0000000000000000000000529395592033937710000000000000000,
 0.0000000000000000000001058791184067875400000000000000000,
 0.0000000000000000000002117582368135750800000000000000000,
 0.0000000000000000000004235164736271501700000000000000000,
 0.0000000000000000000008470329472543003400000000000000000,
 0.0000000000000000000016940658945086007000000000000000000,
 0.0000000000000000000033881317890172014000000000000000000,
 0.0000000000000000000067762635780344027000000000000000000,
 0.0000000000000000000135525271560688050000000000000000000,
 0.0000000000000000000271050543121376110000000000000000000,
 0.0000000000000000000542101086242752220000000000000000000,
 0.0000000000000000001084202172485504400000000000000000000,
 0.0000000000000000002168404344971008900000000000000000000,
 0.0000000000000000004336808689942017700000000000000000000,
 0.0000000000000000008673617379884035500000000000000000000,
 0.0000000000000000017347234759768071000000000000000000000,
 0.0000000000000000034694469519536142000000000000000000000,
 0.0000000000000000069388939039072284000000000000000000000,
 0.0000000000000000138777878078144570000000000000000000000,
 0.0000000000000000277555756156289140000000000000000000000,
 0.0000000000000000555111512312578270000000000000000000000,
 0.0000000000000001110223024625156500000000000000000000000,
 0.0000000000000002220446049250313100000000000000000000000,
 0.0000000000000004440892098500626200000000000000000000000,
 0.0000000000000008881784197001252300000000000000000000000,
 0.0000000000000017763568394002505000000000000000000000000,
 0.0000000000000035527136788005009000000000000000000000000,
 0.0000000000000071054273576010019000000000000000000000000,
 0.0000000000000142108547152020040000000000000000000000000,
 0.0000000000000284217094304040070000000000000000000000000,
 0.0000000000000568434188608080150000000000000000000000000,
 0.0000000000001136868377216160300000000000000000000000000,
 0.0000000000002273736754432320600000000000000000000000000,
 0.0000000000004547473508864641200000000000000000000000000,
 0.0000000000009094947017729282400000000000000000000000000,
 0.0000000000018189894035458565000000000000000000000000000,
 0.0000000000036379788070917130000000000000000000000000000,
 0.0000000000072759576141834259000000000000000000000000000,
 0.0000000000145519152283668520000000000000000000000000000,
 0.0000000000291038304567337040000000000000000000000000000,
 0.0000000000582076609134674070000000000000000000000000000,
 0.0000000001164153218269348100000000000000000000000000000,
 0.0000000002328306436538696300000000000000000000000000000,
 0.0000000004656612873077392600000000000000000000000000000,
 0.0000000009313225746154785200000000000000000000000000000,
 0.0000000018626451492309570000000000000000000000000000000,
 0.0000000037252902984619141000000000000000000000000000000,
 0.0000000074505805969238281000000000000000000000000000000,
 0.0000000149011611938476560000000000000000000000000000000,
 0.0000000298023223876953130000000000000000000000000000000,
 0.0000000596046447753906250000000000000000000000000000000,
 0.0000001192092895507812500000000000000000000000000000000,
 0.0000002384185791015625000000000000000000000000000000000,
 0.0000004768371582031250000000000000000000000000000000000,
 0.0000009536743164062500000000000000000000000000000000000,
 0.0000019073486328125000000000000000000000000000000000000,
 0.0000038146972656250000000000000000000000000000000000000,
 0.0000076293945312500000000000000000000000000000000000000,
 0.0000152587890625000000000000000000000000000000000000000,
 0.0000305175781250000000000000000000000000000000000000000,
 0.0000610351562500000000000000000000000000000000000000000,
 0.0001220703125000000000000000000000000000000000000000000,
 0.0002441406250000000000000000000000000000000000000000000,
 0.0004882812500000000000000000000000000000000000000000000,
 0.0009765625000000000000000000000000000000000000000000000,
 0.0019531250000000000000000000000000000000000000000000000,
 0.0039062500000000000000000000000000000000000000000000000,
 0.0078125000000000000000000000000000000000000000000000000,
 0.0156250000000000000000000000000000000000000000000000000,
 0.0312500000000000000000000000000000000000000000000000000,
 0.0625000000000000000000000000000000000000000000000000000,
 0.1250000000000000000000000000000000000000000000000000000,
 0.2500000000000000000000000000000000000000000000000000000,
 0.5000000000000000000000000000000000000000000000000000000,
 1.0
};

float           LMTB[126] =
{
 42535295865117308000000000000000000000.00000,
 21267647932558654000000000000000000000.00000,
 10633823966279327000000000000000000000.00000,
 5316911983139663500000000000000000000.00000,
 2658455991569831700000000000000000000.00000,
 1329227995784915900000000000000000000.00000,
 664613997892457940000000000000000000.00000,
 332306998946228970000000000000000000.00000,
 166153499473114480000000000000000000.00000,
 83076749736557242000000000000000000.00000,
 41538374868278621000000000000000000.00000,
 20769187434139311000000000000000000.00000,
 10384593717069655000000000000000000.00000,
 5192296858534827600000000000000000.00000,
 2596148429267413800000000000000000.00000,
 1298074214633706900000000000000000.00000,
 649037107316853450000000000000000.00000,
 324518553658426730000000000000000.00000,
 162259276829213360000000000000000.00000,
 81129638414606682000000000000000.00000,
 40564819207303341000000000000000.00000,
 20282409603651670000000000000000.00000,
 10141204801825835000000000000000.00000,
 5070602400912917600000000000000.00000,
 2535301200456458800000000000000.00000,
 1267650600228229400000000000000.00000,
 633825300114114700000000000000.00000,
 316912650057057350000000000000.00000,
 158456325028528680000000000000.00000,
 79228162514264338000000000000.00000,
 39614081257132169000000000000.00000,
 19807040628566084000000000000.00000,
 9903520314283042200000000000.00000,
 4951760157141521100000000000.00000,
 2475880078570760500000000000.00000,
 1237940039285380300000000000.00000,
 618970019642690140000000000.00000,
 309485009821345070000000000.00000,
 154742504910672530000000000.00000,
 77371252455336267000000000.00000,
 38685626227668134000000000.00000,
 19342813113834067000000000.00000,
 9671406556917033400000000.00000,
 4835703278458516700000000.00000,
 2417851639229258300000000.00000,
 1208925819614629200000000.00000,
 604462909807314590000000.00000,
 302231454903657290000000.00000,
 151115727451828650000000.00000,
 75557863725914323000000.00000,
 37778931862957162000000.00000,
 18889465931478581000000.00000,
 9444732965739290400000.00000,
 4722366482869645200000.00000,
 2361183241434822600000.00000,
 1180591620717411300000.00000,
 590295810358705650000.00000,
 295147905179352830000.00000,
 147573952589676410000.00000,
 73786976294838206000.00000,
 36893488147419103000.00000,
 18446744073709552000.00000,
 9223372036854775800.00000,
 4611686018427387900.00000,
 2305843009213694000.00000,
 1152921504606847000.00000,
 576460752303423490.00000,
 288230376151711740.00000,
 144115188075855870.00000,
 72057594037927936.00000,
 36028797018963968.00000,
 18014398509481984.00000,
 9007199254740992.00000,
 4503599627370496.00000,
 2251799813685248.00000,
 1125899906842624.00000,
 562949953421312.00000,
 281474976710656.00000,
 140737488355328.00000,
 70368744177664.00000,
 35184372088832.00000,
 17592186044416.00000,
 8796093022208.00000,
 4398046511104.00000,
 2199023255552.00000,
 1099511627776.00000,
 549755813888.00000,
 274877906944.00000,
 137438953472.00000,
 68719476736.00000,
 34359738368.00000,
 17179869184.00000,
 8589934592.00000,
 4294967296.00000,
 2147483648.00000,
 1073741824.00000,
 536870912.00000,
 268435456.00000,
 134217728.00000,
 67108864.00000,
 33554432.00000,
 16777216.00000,
 8388608.00000,
 4194304.00000,
 2097152.00000,
 1048576.00000,
 524288.00000,
 262144.00000,
 131072.00000,
 65536.00000,
 32768.00000,
 16384.00000,
 8192.00000,
 4096.00000,
 2048.00000,
 1024.00000,
 512.00000,
 256.00000,
 128.00000,
 64.00000,
 32.00000,
 16.00000,
 8.00000,
 4.00000,
 2.00000,
 1.00000
};
@def_

@def $macro10()
$LICENSE()
#include "testout.h"

long            itest;
char            ctest;
float           ftest;

#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'

int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
float		Float;

struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               Struct;

union Union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               Union;

typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef         FLOATDEF;

typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               STRDEF;

typedef union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               UNIDEF;

#define OK_f 1.0
#define NO_f 0.0

float           FLT[2] =
{
 2.938736e-38,
 1.701411e+38
};

float           NAT[10] =
{
 0.0,
 1.0,
 2.0,
 3.0,
 4.0,
 5.0,
 6.0,
 7.0,
 8.0,
 9.0
};

float           LMT[58] =
{
 170141173319264430000000000000000000000.0000000000000000000000000000000,
 85070586659632215000000000000000000000.00000000000000000000000000000000,
 28356862219877405000000000000000000000.00000000000000000000000000000000,
 7089215554969351200000000000000000000.000000000000000000000000000000000,
 1417843110993870200000000000000000000.000000000000000000000000000000000,
 236307185165645040000000000000000000.0000000000000000000000000000000000,
 33758169309377863000000000000000000.00000000000000000000000000000000000,
 4219771163672232900000000000000000.000000000000000000000000000000000000,
 468863445436636440000000000000000.0000000000000000000000000000000000000,
 46886345510804300000000000000000.00000000000000000000000000000000000000,
 4262394991485580900000000000000.000000000000000000000000000000000000000,
 355199595216775700000000000000.0000000000000000000000000000000000000000,
 27323045785905823000000000000.00000000000000000000000000000000000000000,
 1951646190810681300000000000.000000000000000000000000000000000000000000,
 130109746668936890000000000.0000000000000000000000000000000000000000000,
 8131859166808555600000000.000000000000000000000000000000000000000000000,
 478344646274386500000000.0000000000000000000000000000000000000000000000,
 26574703321399188000000.00000000000000000000000000000000000000000000000,
 1398668581048642700000.000000000000000000000000000000000000000000000000,
 69933429932041437000.00000000000000000000000000000000000000000000000000,
 3330163434812604400.000000000000000000000000000000000000000000000000000,
 151371071465979900.0000000000000000000000000000000000000000000000000000,
 6581350723223552.000000000000000000000000000000000000000000000000000000,
 274222941208576.0000000000000000000000000000000000000000000000000000000,
 10968917606400.00000000000000000000000000000000000000000000000000000000,
 421881446400.0000000000000000000000000000000000000000000000000000000000,
 15625238528.00000000000000000000000000000000000000000000000000000000000,
 558044224.0000000000000000000000000000000000000000000000000000000000000,
 19242904.00000000000000000000000000000000000000000000000000000000000000,
 641430.1250000000000000000000000000000000000000000000000000000000000000,
 20691.29492187500000000000000000000000000000000000000000000000000000000,
 646.60296630859375000000000000000000000000000000000000000000000000000,
 19.59402847290039100000000000000000000000000000000000000000000000000,
 0.57629495859146118000000000000000000000000000000000000000000000000,
 0.01646557077765464800000000000000000000000000000000000000000000000,
 0.00045737696927972138000000000000000000000000000000000000000000000,
 0.00001236154002981493200000000000000000000000000000000000000000000,
 0.00000032530368798688869000000000000000000000000000000000000000000,
 0.00000000834111979486351630000000000000000000000000000000000000000,
 0.00000000020852800042270303000000000000000000000000000000000000000,
 0.00000000000508604876964247050000000000000000000000000000000000000,
 0.00000000000012109639734112637000000000000000000000000000000000000,
 0.00000000000000281619523775683730000000000000000000000000000000000,
 0.00000000000000006400443662016040200000000000000000000000000000000,
 0.00000000000000000142232082986540970000000000000000000000000000000,
 0.00000000000000000003092001775958071000000000000000000000000000000,
 0.00000000000000000000065787273547604845000000000000000000000000000,
 0.00000000000000000000001370568198908434300000000000000000000000000,
 0.00000000000000000000000027970779167079829000000000000000000000000,
 0.00000000000000000000000000559415587963828450000000000000000000000,
 0.00000000000000000000000000010968932979319556000000000000000000000,
 0.00000000000000000000000000000210941013046019280000000000000000000,
 0.00000000000000000000000000000003980019041993634700000000000000000,
 0.00000000000000000000000000000000073704055993083991000000000000000,
 0.00000000000000000000000000000000001340073747937762800000000000000,
 0.00000000000000000000000000000000000023929888676328270000000000000,
 0.00000000000000000000000000000000000000419822608971240910000000000,
 0.00000000000000000000000000000000000000000000000000000000000000000
};
@def_

@def $macro11()
$LICENSE()
#include "testout.h"

long            itest;
char            ctest;
float           ftest;

#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'

int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
float           Float;

struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               Struct;

union Union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               Union;

typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef         FLOATDEF;

typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
}               STRDEF;

typedef union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
}               UNIDEF;

#define OK_f 1.0
#define NO_f 0.0

float           FLT[2] =
{
 2.938736e-38,
 1.701411e+38
};

float           NAT[10] =
{
 0.0,
 1.0,
 2.0,
 3.0,
 4.0,
 5.0,
 6.0,
 7.0,
 8.0,
 9.0
};

float           LMT[33] =
{
 1.000000,
 2.000000,
 6.000000,
 24.000000,
 120.000000,
 720.000000,
 5040.000000,
 40320.000000,
 362880.000000,
 3628800.000000,
 39916800.000000,
 479001600.000000,
 6227020800.000000,
 87178289152.000000,
 1307674279936.000000,
 20922788478976.000000,
 355687414628352.000000,
 6402373530419200.000000,
 121645096004222980.000000,
 2432902023163674600.000000,
 51090940837169725000.000000,
 1124000724806013000000.000000,
 25852017444594486000000.000000,
 620448454699064670000000.000000,
 15511211079246241000000000.000000,
 403291499589617300000000000.000000,
 10888870415132691000000000000.000000,
 304888371623715340000000000000.000000,
 8841763079319199900000000000000.000000,
 265252889961724360000000000000000.000000,
 8222839685527520700000000000000000.000000,
 263130869936880660000000000000000000.000000,
 8683318509846655500000000000000000000.000000
};
@def_

@def $testout()
#ifdef unix
#include<stdio.h>
#define printok() printf("@OK@\n")
#define printno() printf("@NG@\n")
#define ABS(a) ((a > 0)? (a) : (-(a)))
#define MAX(a, b) ((a > b)? (a) : (b))
#define TGEN_FLT_EQ(a, b) ( ((a)==(b)) || ABS(((a) - (b))) / MAX( ABS(a), ABS(b) ) <= __FLT_EPSILON__ )
#endif
@def_

@dir ckr.4-4-01
@file >>fn001.c $macro0() @file_
@file >>fn002.c $macro1() @file_
@file >>fn003.c $macro2() @file_
@file >>fn004.c $macro3() @file_
@file >>fn005.c $macro4() @file_
@file >>fn006.c $macro5() @file_
@file >>fn008.c $macro6() @file_
@file >>fstnd.h $macro7() @file_
@file >>fstnd2.h $macro8() @file_
@file >>fstnd3.h $macro9() @file_
@file >>fstnd4.h $macro10() @file_
@file >>fstnd5.h $macro11() @file_
@file >>testout.h $testout() @file_
@dir_
