@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@def $LICENSE()
/*
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
hikichi@sra.co.jp(Nobuyuki Hikichi)

This file was written by several people in Software Research Associates,
Inc. Japan in several years.
*/
@def_

@def $HEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.04.h"
@def_

@def $test1($VAR9)
	itest = NO;
	$VAR9 = OK;
	itest = $VAR9 << 1 > $VAR9 >> 1 >= $VAR9;

	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ctest1($VAR9)
	ctest = NCHAR;
	$VAR9 = YCHAR;
	ctest = ($VAR9 << 1 > $VAR9 >> 1) + $VAR9 - 1 >= $VAR9;

	if (ctest == OK)
		printok();
	else
		printno();
@def_

@def $macro0($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER long            Long;

$test1(Long)

	return (0);
}
@def_


@def $macro1($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test1(Struct.Long)

$test1(Struct.Short)

$test1(Struct.Unsigned)

$ctest1(Struct.Char)

	return (0);
}
@def_


@def $macro2($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		long            Long;
		char            Char;
	}               Union;

$test1(Union.Int)

$test1(Union.Long)

$ctest1(Union.Char)

	return (0);
}
@def_


@def $macro3($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER LONGDEF         Longdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

$test1(Intdef)

$test1(Longdef)

$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Long)

$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$test1(Unidef.Long)

$ctest1(Unidef.Char)

	return (0);
}
@def_


@def $macro4()
$LICENSE()
#include "testout.h"

long            itest;
char            ctest;

#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'

int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;

struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;

union Union {
	int             Int;
	long            Long;
	char            Char;
}               Union;

typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;

typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;

typedef union {
	int             Int;
	long            Long;
	char            Char;
}               UNIDEF;
@def_

@def $macro5($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER int             Int;

$test1(Int)

	return (0);
}
@def_


@def $macro6($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER short           Short;

$test1(Short)

	return (0);
}
@def_


@def $macro7($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER unsigned        Unsigned;

$test1(Unsigned)

	return (0);
}
@def_


@def $macro8($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER char            Char;

$ctest1(Char)

	return (0);
}
@def_


@def $macro9($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test1(Struct.Short)

$test1(Struct.Unsigned)

$ctest1(Struct.Char)

	return (0);
}
@def_


@def $macro10($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		char            Char;
	}               Union;

$test1(Union.Int)

$ctest1(Union.Char)

	return (0);
}
@def_


@def $macro11($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

$test1(Intdef)

$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$ctest1(Unidef.Char)

	return (0);
}
@def_

@def $testout()
#ifdef unix
#include<stdio.h>
#include<float.h>
#define printok() printf("@OK@\n")
#define printno() printf("@NG@\n")
#define ABS(a) ((a > 0)? (a) : (-(a)))
#define MAX(a, b) ((a > b)? (a) : (b))
#define TGEN_FLT_EQ(a, b) ( ((a)==(b)) || ABS(((a) - (b))) / MAX( ABS(a), ABS(b) ) <= FLT_EPSILON )
#endif
@def_

@dir ckr.2-2-04
@file >>lt???.c $macro0([,extern,static]) @file_
@file >>lt???.c $macro1([,static]) @file_
@file >>lt???.c $macro2([,static]) @file_
@file >>lt???.c $macro3([,static]) @file_
@file >>stnd2.04.h $macro4() @file_
@file >>t???.c $macro5([,extern,static,register]) @file_
@file >>t???.c $macro6([,extern,static,register]) @file_
@file >>t???.c $macro7([,extern,static,register]) @file_
@file >>t???.c $macro8([,extern,static,register]) @file_
@file >>t???.c $macro9([,static,register]) @file_
@file >>t???.c $macro10([,static,register]) @file_
@file >>t???.c $macro11([,static,register]) @file_
@file >>testout.h $testout() @file_
@dir_
