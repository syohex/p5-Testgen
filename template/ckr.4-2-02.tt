@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "def.h"
@def_

@def $FHEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fdef.h"
@def_

@def $macro0()
$LICENSE()
#include "../testout.h"
long            NO = 0;
long            OK = 1;
#define NoMistake 00
@def_

@def $macro1()
$LICENSE()
#include "../testout.h"
long            NO = 0;
long            OK = 1;
float           OK_f = 1.0;
float           NO_f = 0.0;
#define NoMistake 00
@def_

@def $macro2()
$LICENSE()
$FHEAD()
short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, no return value and legal
 */
{
	float           i;

	i = 1.0;
	levelOneNodeOne(i);
	i = 2.0;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	variable += 2.0;
	levelTwoNodeOne(variable);
	variable++;
	levelTwoNodeTwo(variable);
}

levelOneNodeTwo(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	variable += 3.0;
	levelTwoNodeThree(variable);
	variable++;
	levelTwoNodeFour(variable);
}

levelTwoNodeOne(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable += 4.0;
	levelThreeLeafOne(variable);
	variable++;
	levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	variable += 5.0;
	levelThreeLeafThree(variable);
	variable++;
	levelThreeLeafFour(variable);
}

levelTwoNodeThree(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable += 6.0;
	levelThreeLeafFive(variable);
	variable++;
	levelThreeLeafSix(variable);
}

levelTwoNodeFour(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	variable += 7.0;
	levelThreeLeafSeven(variable);
	variable++;
	levelThreeLeafEight(variable);
}

levelThreeLeafOne(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
}

levelThreeLeafThree(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
}

levelThreeLeafFour(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
}

levelThreeLeafFive(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
}

levelThreeLeafSix(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
}

levelThreeLeafEight(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
}
@def_
@def $macro3()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, no return value and illegal
 */
{
	float           i, result;

	i = 1.0;
	result = levelOneNodeOne(i);
	i = 2.0;
	result = levelOneNodeTwo(i);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	float           result;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	variable += 2.0;
	result = levelTwoNodeOne(variable);
	variable++;
	result = levelTwoNodeTwo(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	float           result;

 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	variable += 3.0;
	result = levelTwoNodeThree(variable);
	variable++;
	result = levelTwoNodeFour(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	float           result;

 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable += 4.0;
	result = levelThreeLeafOne(variable);
	variable++;
	result = levelThreeLeafTwo(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	float           result;

 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	variable += 5.0;
	result = levelThreeLeafThree(variable);
	variable++;
	result = levelThreeLeafFour(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	float           result;

 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable += 6.0;
	result = levelThreeLeafFive(variable);
	variable++;
	result = levelThreeLeafSix(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	float           result;

 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	variable += 7.0;
	result = levelThreeLeafSeven(variable);
	variable++;
	result = levelThreeLeafEight(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelThreeLeafOne(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
}

levelThreeLeafThree(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
}

levelThreeLeafFour(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
}

levelThreeLeafFive(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
}

levelThreeLeafSix(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
}

levelThreeLeafEight(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
}
@def_
@def $macro4()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, return value and legal, Float function declaration
 */
{
	float           i = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = 1.0;
	i = levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = 2.0;
	i = levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	float           storage = variable;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

	variable = 3.0;
	variable = levelTwoNodeOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable = 4.0;
	variable = levelTwoNodeTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	return (storage);
}

float
levelOneNodeTwo(variable)
	float           variable;
{
	float           storage = variable;
	float           levelTwoNodeThree(), levelTwoNodeFour();

	variable = 5.0;
	variable = levelTwoNodeThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable = 6.0;
	variable = levelTwoNodeFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	float           storage = variable;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

	variable = 7.0;
	variable = levelThreeLeafOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
	variable = 8.0;
	variable = levelThreeLeafTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeTwo(variable)
	float           variable;
{
	float           storage = variable;
	float           levelThreeLeafThree(), levelThreeLeafFour();

	variable = 9.0;
	variable = levelThreeLeafThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
	variable = 10.0;
	variable = levelThreeLeafFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeThree(variable)
	float           variable;
{
	float           storage = variable;
	float           levelThreeLeafFive(), levelThreeLeafSix();

	variable = 11.0;
	variable = levelThreeLeafFive(variable);
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
	variable = 12.0;
	variable = levelThreeLeafSix(variable);
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeFour(variable)
	float           variable;
{
	float           storage = variable;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

	variable = 13.0;
	variable = levelThreeLeafSeven(variable);
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
	variable = 14.0;
	variable = levelThreeLeafEight(variable);
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
	return (storage);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafTwo(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafThree(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafFour(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafFive(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafSix(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafSeven(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafEight(variable)
	float           variable;
{
	return (variable);
}
@def_
@def $macro5()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, return value, legal pointer to function returning a
 * float
 */
{
	float           i, divide4(), dummy1();

	i = 12.0;
	i = dummy1(divide4, i);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro6()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, used in conditional expression, float function
 * declaration
 */
{
	float           i = 1.0, levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(i);
	arg_b = 32.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	float           ii, levelTwoNodeOne();

	ii = 2.0 * variable;
	return (2.0 * levelTwoNodeOne(ii));
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	float           iii, levelThreeLeafOne();

	iii = 2.0 * variable;
	return (2.0 * levelThreeLeafOne(iii));
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (2.0 * variable);
}
@def_
@def $macro7()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, in conditional expression, pointer to function
 * returning a float
 */
{
	float           i, divide4(), dummy1();
	float           arg_a, arg_b;

	i = 12.0;
	arg_a = dummy1(divide4, i);
	arg_b = 3.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           ii;

	if (! TGEN_FLT_EQ( (ii = (*func) (Float)), 3.0) )
		statusFlag++;
	return (ii);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           ii;

	if (! TGEN_FLT_EQ( (ii = (*func) (Float)), 6.0) )
		statusFlag++;
	return (ii);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro8()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, no return value, legal
 */
{
	float           i;

	i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro9()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, no return value, illegal
 */
{
	float           i = 1.0;
	i = recursiveFunction(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	float           ii;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		ii = recursiveFunction(variable);
 if ( TGEN_FLT_EQ(ii, 0.0) )
			ii++;
	}
	return;
}
@def_
@def $macro10()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, legal, float function declaration
 */
{
	float           i = 1.0;
	float           recursiveFunction();

	i = recursiveFunction(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           result;
	float           recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
 if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro11()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, pointer to function returning a float
 */
{
	float           i = 1.0, increment(), dummy();

	i = dummy(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           result, dummy();
	if (--counter) {
		result = dummy(function, variable);
 if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro12()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, function in conditional expression, float function declaration
 */
{
	float           recursiveFunction();
	float           i = 1.0;
	float           arg_a, arg_b;

	arg_a = recursiveFunction(i) - i;
	arg_b = 1.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = recursiveFunction(variable) - variable;
		arg_b = 1.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro13()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, in conditional expression, pointer to function returning a
 * float
 */
{
	float           increment();
	float           i = 1.0, dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           dummy();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, variable);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro14()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, no return value, legal
 */
{
	float           i = 1.0;
	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		variable++;
		pollux(variable);
	}
}

pollux(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	if (--counter) {
		--variable;
		castor(variable);
	}
}
@def_
@def $macro15()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, no return value, illegal
 */
{
	float           i = 1.0;

	i = castor(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	float           ii;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		ii = pollux(variable);
 if ( TGEN_FLT_EQ(ii, 0.0) )
			ii++;
	}
}

pollux(variable)
	float           variable;
{
	float           iii;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		iii = castor(variable);
 if ( TGEN_FLT_EQ(iii, 0.0) )
			iii++;
	}
}
@def_
@def $macro16()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, legal, function declared to return a float
 */
{
	float           i = 1.0, castor();

	i = castor(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           ii = variable + 3.0, pollux();

	if (--counter) {
		ii = pollux(ii);
 if ( !(TGEN_FLT_EQ(ii, 5.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           iii = variable - 3.0, castor();

	if (--counter) {
		iii = castor(iii);
 if ( !(TGEN_FLT_EQ(iii, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro17()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, pointer to function returning a float
 */
{
	float           i = 1.0, increment(), castor();

	i = castor(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           ii = variable + 8.0, pollux();
	if (--counter) {
		ii = pollux(function, ii);
 if ( !(TGEN_FLT_EQ(ii, 10.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           iii = variable - 8.0, castor();
	if (--counter) {
		iii = castor(function, iii);
 if ( !(TGEN_FLT_EQ(iii, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro18()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, function declared to return a float
 */
{
	float           i = 1.0, castor();
	float           arg_a, arg_b;

	arg_a = castor(i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           ii = variable + 3.0, pollux();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = pollux(ii);
		arg_b = 5.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           iii = variable - 3.0, castor();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = castor(iii);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro19()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, pointer to function returning a float
 */
{
	float           i = 1.0, increment(), castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           ii = variable + 10.0, pollux();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = pollux(function, ii);
		arg_b = 12.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           iii = variable - 10.0, castor();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = castor(function, iii);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro20()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, no return value and legal
 */
{
	float           i = 0.0;
	i = 1.0;
	levelOneNodeOne(i);
	i = 2.0;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	float           i = 0.0;
 if ( ! TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 3.0;
	levelTwoNodeOne(i);
	i = 4.0;
	levelTwoNodeTwo(i);
	variable++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 5.0;
	levelTwoNodeThree(i);
	i = 6.0;
	levelTwoNodeFour(i);
	variable++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 7.0;
	levelThreeLeafOne(i);
	i = 8.0;
	levelThreeLeafTwo(i);
	variable++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 9.0;
	levelThreeLeafThree(i);
	i = 10.0;
	levelThreeLeafFour(i);
	variable++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 11.0;
	levelThreeLeafFive(i);
	i = 12.0;
	levelThreeLeafSix(i);
	variable++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 13.0;
	levelThreeLeafSeven(i);
	i = 14.0;
	levelThreeLeafEight(i);
	variable++;
}

levelThreeLeafOne(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafThree(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafFour(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafFive(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafSix(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafEight(variable)
	float           variable;
{
	float           i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}
@def_
@def $macro21()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, no return value and illegal
 */
{
	float           i = 1.0;

	i = levelOneNodeOne(i);
	i = 2.0;
	i = levelOneNodeTwo(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	float           i = 3.0;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	i = levelTwoNodeOne(i);
	i = 4.0;
	i = levelTwoNodeTwo(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	float           i = 5.0;

 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	i = levelTwoNodeThree(i);
	i = 6.0;
	i = levelTwoNodeFour(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	float           i = 7.0;

 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	i = levelThreeLeafOne(i);
	i = 8.0;
	i = levelThreeLeafTwo(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	float           i = 9.0;

 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	i = levelThreeLeafThree(i);
	i = 10.0;
	i = levelThreeLeafFour(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	float           i = 11.0;

 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	i = levelThreeLeafFive(i);
	i = 12.0;
	i = levelThreeLeafSix(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	float           i = 13.0;

 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	i = levelThreeLeafSeven(i);
	i = 14.0;
	i = levelThreeLeafEight(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelThreeLeafOne(variable)
	float           variable;
{
	float           i = 15.0;
 if ( !(TGEN_FLT_EQ(variable, 7.0)) || !(TGEN_FLT_EQ(i, 15.0)) )
		statusFlag++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	float           i = 16.0;
 if ( !(TGEN_FLT_EQ(variable, 8.0)) || !(TGEN_FLT_EQ(i, 16.0)) )
		statusFlag++;
}

levelThreeLeafThree(variable)
	float           variable;
{
	float           i = 17.0;
 if ( !(TGEN_FLT_EQ(variable, 9.0)) || !(TGEN_FLT_EQ(i, 17.0)) )
		statusFlag++;
}

levelThreeLeafFour(variable)
	float           variable;
{
	float           i = 18.0;
 if ( !(TGEN_FLT_EQ(variable, 10.0)) || !(TGEN_FLT_EQ(i, 18.0)) )
		statusFlag++;
}

levelThreeLeafFive(variable)
	float           variable;
{
	float           i = 19.0;
 if ( !(TGEN_FLT_EQ(variable, 11.0)) || !(TGEN_FLT_EQ(i, 19.0)) )
		statusFlag++;
}

levelThreeLeafSix(variable)
	float           variable;
{
	float           i = 20.0;
 if ( !(TGEN_FLT_EQ(variable, 12.0)) || !(TGEN_FLT_EQ(i, 20.0)) )
		statusFlag++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	float           i = 21.0;
 if ( !(TGEN_FLT_EQ(variable, 13.0)) || !(TGEN_FLT_EQ(i, 21.0)) )
		statusFlag++;
}

levelThreeLeafEight(variable)
	float           variable;
{
	float           i = 22.0;
 if ( !(TGEN_FLT_EQ(variable, 14.0)) || !(TGEN_FLT_EQ(i, 22.0)) )
		statusFlag++;
}
@def_
@def $macro22()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, return value and legal, float function
 * declaration
 */
{
	float           i = 1.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i++;
	i = levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	float           i = 3.0;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	i = levelTwoNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	i++;
	i = levelTwoNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 4.0)) )
		statusFlag++;
	return (variable);
}

float
levelOneNodeTwo(variable)
	float           variable;
{
	float           i = 5.0;
	float           levelTwoNodeThree(), levelTwoNodeFour();

 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	i = levelTwoNodeThree(i);
 if ( !(TGEN_FLT_EQ(i, 5.0)) )
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	float           i = 7.0;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	i = levelThreeLeafOne(i);
 if ( !(TGEN_FLT_EQ(i, 7.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafTwo(i);
 if ( !(TGEN_FLT_EQ(i, 8.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeTwo(variable)
	float           variable;
{
	float           i = 9.0;
	float           levelThreeLeafThree(), levelThreeLeafFour();

 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	i = levelThreeLeafThree(i);
 if ( !(TGEN_FLT_EQ(i, 9.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafFour(i);
 if ( !(TGEN_FLT_EQ(i, 10.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeThree(variable)
	float           variable;
{
	float           i = 11.0;
	float           levelThreeLeafFive(), levelThreeLeafSix();

 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	i = levelThreeLeafFive(i);
 if ( !(TGEN_FLT_EQ(i, 11.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafSix(i);
 if ( !(TGEN_FLT_EQ(i, 12.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeFour(variable)
	float           variable;
{
	float           i = 13.0;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	i = levelThreeLeafSeven(i);
 if ( !(TGEN_FLT_EQ(i, 13.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafEight(i);
 if ( !(TGEN_FLT_EQ(i, 14.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafTwo(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafThree(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafFour(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafFive(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafSix(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafSeven(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafEight(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
	return (variable);
}
@def_
@def $macro23()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, return value, legal pointer to function
 * returning a float
 */
{
	float           i = 12.0, divide4(), dummy1();

	i = dummy1(divide4, i);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro24()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, used in conditional expression, float
 * function declaration
 */
{
	float           i = 1.0, levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(i);
	arg_b = 32.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	float           i, levelTwoNodeOne();

	i = 2.0 * variable;
	return (2.0 * levelTwoNodeOne(i));
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	float           i, levelThreeLeafOne();

	i = 2.0 * variable;
	return (2.0 * levelThreeLeafOne(i));
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (2.0 * variable);
}
@def_
@def $macro25()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, in conditional expression, pointer to function
 * returning a float
 */
{
	float           i, divide4(), dummy1();
	float           arg_a, arg_b;

	i = 12.0;
	arg_a = dummy1(divide4, i);
	arg_b = 3.0;

	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           i;

	if (! TGEN_FLT_EQ( (i = (*func) (Float)), 3.0) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           i;

	if (! TGEN_FLT_EQ( (i = (*func) (Float)), 6.0) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro26()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, no return value, legal
 */
{
	float           i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	float           i = variable;
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(i);
}
@def_
@def $macro27()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, no return value, illegal
 */
{
	float           i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	float           i = 2.0;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(variable);
 if ( TGEN_FLT_EQ(i, 0.0) )
			i++;
	}
	return;
}
@def_
@def $macro28()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, legal, float function declaration
 */
{
	float           i = 1.0;
	float           recursiveFunction();

	i = recursiveFunction(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           i = variable;
	float           recursiveFunction();

	if (--counter) {
		i = recursiveFunction(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro29()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, pointer to function returning a float
 */
{
	float           i = 1.0, increment(), dummy();

	i = dummy(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           i = variable, dummy();
	if (--counter) {
		i = dummy(function, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro30()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, function in conditional expression, float function
 * declaration
 */
{
	float           i = 1.0, recursiveFunction();

	if (! TGEN_FLT_EQ(recursiveFunction(i), 2.0))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           i = 1.0, recursiveFunction();

	if (--counter)
		if (! TGEN_FLT_EQ(recursiveFunction(i), 2.0))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro31()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, in conditional expression, pointer to function
 * returning a float
 */
{
	float           i = 1.0, increment(), dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           i = variable, dummy();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, i);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro32()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, no return value, legal
 */
{
	float           i = 1.0;

	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	float           i = variable + 1.0;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter)
		pollux(i);
}

pollux(variable)
	float           variable;
{
	float           i = variable - 1.0;

 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	if (--counter)
		castor(i);
}
@def_
@def $macro33()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, no return value, illegal
 */
{
	float           i = 1.0;

	i = castor(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	float           i = 2.0;

	if ( !(TGEN_FLT_EQ(variable, 1.0)) || !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (--counter) {
		i = pollux(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
			i++;
	}
}

pollux(variable)
	float           variable;
{
	float           i = 1.0;

	if ( !(TGEN_FLT_EQ(variable, 2.0)) || !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (--counter) {
		i = castor(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
			i++;
	}
}
@def_
@def $macro34()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, legal, function declared to return a float
 */
{
	float           i = 1.0, castor();

	i = castor(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           i = variable + 3.0, pollux();

	if (--counter) {
		i = pollux(i);
 if ( !(TGEN_FLT_EQ(i, 5.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           i = variable - 3.0, castor();

	if (--counter) {
		i = castor(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro35()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, pointer to function returning a float
 */
{
	float           i = 1.0, increment(), castor();

	i = castor(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           pollux();
	float           i = variable + 8.0;
	if (--counter) {
		i = pollux(function, i);
 if ( !(TGEN_FLT_EQ(i, 10.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           i = variable - 8.0, castor();
	if (--counter) {
		i = castor(function, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro36()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, function declared to return a
 * float
 */
{
	float           i = 1.0, castor();
	float           arg_a, arg_b;

	arg_a = castor(i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           i = variable + 3.0, pollux();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = pollux(i);
		arg_b = 5.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           i = variable - 3.0, castor();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = castor(i);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro37()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, pointer to function returning a
 * float
 */
{
	float           i = 1.0, increment(), castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           i = variable + 8.0, pollux();

	if (--counter)
		if (! TGEN_FLT_EQ(pollux(function, i), 10.0))
			statusFlag++;
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           i = variable - 8.0, castor();

	if (--counter)
		if (! TGEN_FLT_EQ(castor(function, i), 2.0))
			statusFlag++;
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro38()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, no return value and
 * legal
 */
{
	float           i;

	i = 1.0;
	levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = 2.0;
	levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	variable += 2.0;
	levelTwoNodeOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable++;
	levelTwoNodeTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	variable += 3.0;
	levelTwoNodeThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable++;
	levelTwoNodeFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	variable += 4.0;
	levelThreeLeafOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
	variable++;
	levelThreeLeafTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	variable += 5.0;
	levelThreeLeafThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
	variable++;
	levelThreeLeafFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	variable += 6.0;
	levelThreeLeafFive(variable);
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
	variable++;
	levelThreeLeafSix(variable);
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	variable += 7.0;
	levelThreeLeafSeven(variable);
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
	variable++;
	levelThreeLeafEight(variable);
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
}

levelThreeLeafOne(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafThree(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafFour(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafFive(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafSix(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafEight(variable)
	float           variable;
{
	variable++;
}
@def_
@def $macro39()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, no return value and
 * illegal
 */
{
	float           i, result;

	i = 1.0;
	result = levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
 if ( !(TGEN_FLT_EQ(result, 0.0)) )
		result = 0.0;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	float           result;

	variable += 2.0;
	result = levelTwoNodeOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable++;
	result = levelTwoNodeTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) );
}

levelOneNodeTwo(variable)
	float           variable;
{
	float           result;

	variable += 3.0;
	result = levelTwoNodeThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable++;
	result = levelTwoNodeFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) );
}

levelTwoNodeOne(variable)
	float           variable;
{
	float           result;

	variable += 4.0;
	result = levelThreeLeafOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
	variable++;
	result = levelThreeLeafTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) );
}

levelTwoNodeTwo(variable)
	float           variable;
{
	float           result;

	variable += 5.0;
	result = levelThreeLeafThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
	variable++;
	result = levelThreeLeafFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) );
}

levelTwoNodeThree(variable)
	float           variable;
{
	float           result;

	variable += 6.0;
	result = levelThreeLeafFive(variable);
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
	variable++;
	result = levelThreeLeafSix(variable);
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) );
}

levelTwoNodeFour(variable)
	float           variable;
{
	float           result;

	variable += 7.0;
	result = levelThreeLeafSeven(variable);
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
	variable++;
	result = levelThreeLeafEight(variable);
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) );
}

levelThreeLeafOne(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafThree(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafFour(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafFive(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafSix(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafEight(variable)
	float           variable;
{
	variable++;
	return;
}
@def_
@def $macro40()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * float function declaration
 */
{
	float           i = 0.0, result = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = 1.0;
	result = levelOneNodeOne(i);
	if ( (! TGEN_FLT_EQ(i, 1.0)) || (! TGEN_FLT_EQ(result, 1.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(i);
	if ( (! TGEN_FLT_EQ(i, 2.0)) || (! TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	float           storage = variable, result = 0.0;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

	variable = 3.0;
	result = levelTwoNodeOne(variable);
	if ( !(TGEN_FLT_EQ(variable, 3.0)) || !(TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	variable = 4.0;
	result = levelTwoNodeTwo(variable);
	if ( !(TGEN_FLT_EQ(variable, 4.0)) || !(TGEN_FLT_EQ(result, 4.0)) )
		statusFlag++;
	return (storage);
}

float
levelOneNodeTwo(variable)
	float           variable;
{
	float           storage = variable, result = 0.0;
	float           levelTwoNodeThree(), levelTwoNodeFour();

	variable = 5.0;
	result = levelTwoNodeThree(variable);
	if ( !(TGEN_FLT_EQ(variable, 5.0)) || !(TGEN_FLT_EQ(result, 5.0)) )
		statusFlag++;
	variable = 6.0;
	result = levelTwoNodeFour(variable);
	if ( !(TGEN_FLT_EQ(variable, 6.0)) || !(TGEN_FLT_EQ(result, 6.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	float           storage = variable, result = 0.0;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

	variable = 7.0;
	result = levelThreeLeafOne(variable);
	if ( !(TGEN_FLT_EQ(variable, 7.0)) || !(TGEN_FLT_EQ(result, 7.0)) )
		statusFlag++;
	variable = 8.0;
	result = levelThreeLeafTwo(variable);
	if ( !(TGEN_FLT_EQ(variable, 8.0)) || !(TGEN_FLT_EQ(result, 8.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeTwo(variable)
	float           variable;
{
	float           storage = variable, result = 0.0;
	float           levelThreeLeafThree(), levelThreeLeafFour();

	variable = 9.0;
	result = levelThreeLeafThree(variable);
	if ( !(TGEN_FLT_EQ(variable,9.0)) || !(TGEN_FLT_EQ(result, 9.0)) )
		statusFlag++;
	variable = 10.0;
	result = levelThreeLeafFour(variable);
	if ( !(TGEN_FLT_EQ(variable, 10.0)) || !(TGEN_FLT_EQ(result, 10.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeThree(variable)
	float           variable;
{
	float           storage = variable, result = 0.0;
	float           levelThreeLeafFive(), levelThreeLeafSix();

	variable = 11.0;
	result = levelThreeLeafFive(variable);
	if ( !(TGEN_FLT_EQ(variable, 11.0)) || !(TGEN_FLT_EQ(result, 11.0)) )
		statusFlag++;
	variable = 12.0;
	result = levelThreeLeafSix(variable);
	if ( !(TGEN_FLT_EQ(variable, 12.0)) || !(TGEN_FLT_EQ(result, 12.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeFour(variable)
	float           variable;
{
	float           storage = variable, result = 0.0;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

	variable = 13.0;
	result = levelThreeLeafSeven(variable);
	if ( !(TGEN_FLT_EQ(variable, 13.0)) || !(TGEN_FLT_EQ(result, 13.0)) )
		statusFlag++;
	variable = 14.0;
	result = levelThreeLeafEight(variable);
	if ( !(TGEN_FLT_EQ(variable, 14.0)) || !(TGEN_FLT_EQ(result, 14.0)) )
		statusFlag++;
	return (storage);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafTwo(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafThree(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafFour(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafFive(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafSix(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafSeven(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}

float
levelThreeLeafEight(variable)
	float           variable;
{
	float           storage = variable;

	variable++;
	return (storage);
}
@def_
@def $macro41()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value, legal
 * pointer to function returning a float
 */
{
	float           i, divide4(), result = 0.0, dummy1();

	i = 12.0;
	result = dummy1(divide4, i);
	if ( (! TGEN_FLT_EQ(i, 12.0)) || (! TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           i;

	i = (*func) (Float);
	if ( (! TGEN_FLT_EQ(i, 3.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           i;

	i = (*func) (Float);
	if ( (! TGEN_FLT_EQ(i, 6.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro42()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, float function declaration
 */
{
	float           i = 1.0, levelOneNodeOne();

	if ( (! TGEN_FLT_EQ(levelOneNodeOne(i), 32.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	float           ii, levelTwoNodeOne(), result = 0.0;

	ii = 2.0 * variable++;
	result = 2.0 * levelTwoNodeOne(ii);
 if ( !(TGEN_FLT_EQ(ii, 2.0)) )
		statusFlag++;
	return (result);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	float           iii, levelThreeLeafOne(), result = 0.0;

	iii = 2.0 * variable++;
	result = 2.0 * levelThreeLeafOne(iii);
 if ( !(TGEN_FLT_EQ(iii, 4.0)) )
		statusFlag++;
	return (result);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (2.0 * variable++);
}
@def_
@def $macro43()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, in conditional
 * expression, pointer to function returning a float
 */
{
	float           i, divide4(), dummy1();
	float           arg_a, arg_b;

	i = 12.0;
	arg_a = dummy1(divide4, i);
	arg_b = 3.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 12.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           ii;

	if ( (! TGEN_FLT_EQ((ii = (*func) (Float)), 3.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (ii);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           ii;

	if ( (! TGEN_FLT_EQ((ii = (*func) (Float)), 6.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (ii);
}

float
divide2(Float)
	float           Float;
{
	return (Float++ / 2.0);
}
@def_
@def $macro44()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, no return value, legal
 */
{
	float           i;

	i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(variable++);
}
@def_
@def $macro45()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, no return value, illegal
 */
{
	float           i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	float           i = 0.0;

	if (--counter) {
		i = recursiveFunction(variable);
		if ( !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
		if (variable++ || TGEN_FLT_EQ(i, 0.0) );
	}
	return;
}
@def_
@def $macro46()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, legal, float
 * function declaration
 */
{
	float           i = 1.0, recursiveFunction(), result = 0.0;

	result = recursiveFunction(i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           result, recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro47()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, pointer to
 * function returning a float
 */
{
	float           i = 1.0, increment(), result = 0.0, dummy();

	result = dummy(increment, i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           result, dummy();
	if (--counter) {
		result = dummy(function, variable);
  		if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro48()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, float function declaration
 */
{
	float           recursiveFunction();
	float           i = 1.0;
	float           arg_a, arg_b;

	arg_a = recursiveFunction(i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = recursiveFunction(variable);
		arg_b = 2.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro49()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, in conditional expression,
 * pointer to function returning a float
 */
{
	float           increment();
	float           i = 1.0, dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           dummy();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, variable);
		arg_b = 2.0;
	 	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro50()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, no return value, legal
 */
{
	float           i = 1.0;
	castor(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	if (--counter) {
		variable++;
		pollux(variable);
		if ( !(TGEN_FLT_EQ(variable, 2.0)) )
			statusFlag++;
	}
}

pollux(variable)
	float           variable;
{
	if (--counter) {
		--variable;
		castor(variable);
 		if ( !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
}
@def_
@def $macro51()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, no return value, illegal
 */
{
	float           i = 1.0, result;

	result = castor(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
 if ( !(TGEN_FLT_EQ(result, 0.0)) )
		result = 0.0;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	float           ii;

	if (--counter) {
		ii = pollux(variable);
		if ( !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
		if (variable++ || TGEN_FLT_EQ(ii, 0.0) );
	}
}

pollux(variable)
	float           variable;
{
	float           iii;

	if (--counter) {
		iii = castor(variable);
 		if ( !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
		if (variable++ || TGEN_FLT_EQ(iii, 0.0) );
	}
}
@def_
@def $macro52()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, legal, function declared
 * to return a float
 */
{
	float           i = 1.0, castor(), result = 0.0;

	result = castor(i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           ii = variable + 3.0, pollux(), result = 0.0;

	if (--counter) {
		result = pollux(ii);
		if ( (! TGEN_FLT_EQ(result, 5.0)) || (! TGEN_FLT_EQ(ii, 4.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           iii = variable - 3.0, result = 0.0, castor();

	if (--counter) {
		result = castor(iii);
		if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro53()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, pointer to function
 * returning a float
 */
{
	float           i = 1.0, increment(), result = 0.0, castor();

	result = castor(increment, i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           ii = variable + 8.0, result = 0.0, pollux();
	if (--counter) {
		result = pollux(function, ii);
		if ( (! TGEN_FLT_EQ(result, 10.0)) || (! TGEN_FLT_EQ(ii, 9.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           iii = variable - 8.0, result = 0.0, castor();
	if (--counter) {
		result = castor(function, iii);
		if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro54()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return a float
 */
{
	float           i = 1.0, castor();
	float           arg_a, arg_b;

	arg_a = castor(i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           ii = variable + 3.0, pollux();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = pollux(ii);
		arg_b = 5.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(ii, 4.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           iii = variable - 3.0, castor();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = castor(iii);
		arg_b = 2.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro55()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, pointer to
 * function returning a float
 */
{
	float           i = 1.0, increment(), castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           ii = variable + 10.0, pollux();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = pollux(function, ii);
		arg_b = 12.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(ii, 11.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           iii = variable - 10.0, castor();
	float           arg_a, arg_b;

	if (--counter) {
		arg_a = castor(function, iii);
		arg_b = 2.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro56()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, no return value and legal
 */
{
	static float    i;

	i = 1.0;
	levelOneNodeOne(i);
	i = 2.0;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	variable += 2.0;
	levelTwoNodeOne(variable);
	variable++;
	levelTwoNodeTwo(variable);
}

levelOneNodeTwo(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	variable += 3.0;
	levelTwoNodeThree(variable);
	variable++;
	levelTwoNodeFour(variable);
}

levelTwoNodeOne(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable += 4.0;
	levelThreeLeafOne(variable);
	variable++;
	levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	variable += 5.0;
	levelThreeLeafThree(variable);
	variable++;
	levelThreeLeafFour(variable);
}

levelTwoNodeThree(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable += 6.0;
	levelThreeLeafFive(variable);
	variable++;
	levelThreeLeafSix(variable);
}

levelTwoNodeFour(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	variable += 7.0;
	levelThreeLeafSeven(variable);
	variable++;
	levelThreeLeafEight(variable);
}

levelThreeLeafOne(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
}

levelThreeLeafTwo(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
}

levelThreeLeafThree(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
}

levelThreeLeafFour(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
}

levelThreeLeafFive(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
}

levelThreeLeafSix(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
}

levelThreeLeafSeven(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
}

levelThreeLeafEight(argument)
	float           argument;
{
	static float    variable;

	variable = argument;
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
}
@def_
@def $macro57()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, no return value and illegal
 */
{
	static float    i;
	float           result;

	i = 1.0;
	result = levelOneNodeOne(i);
	i = 2.0;
	result = levelOneNodeTwo(i);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	float           argument;
{
	float           result;
	static float    variable;

	if ( (! TGEN_FLT_EQ( (variable = argument), 1.0)) )
		statusFlag++;
	variable += 2.0;
	result = levelTwoNodeOne(variable);
	variable++;
	result = levelTwoNodeTwo(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelOneNodeTwo(argument)
	float           argument;
{
	float           result;
	static float    variable;

	if (! TGEN_FLT_EQ( (variable = argument), 2.0) )
		statusFlag++;
 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	variable += 3.0;
	result = levelTwoNodeThree(variable);
	variable++;
	result = levelTwoNodeFour(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeOne(argument)
	float           argument;
{
	float           result;
	static float    variable;

	if (! TGEN_FLT_EQ((variable = argument), 3.0) )
		statusFlag++;
	variable += 4.0;
	result = levelThreeLeafOne(variable);
	variable++;
	result = levelThreeLeafTwo(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeTwo(argument)
	float           argument;
{
	float           result;
	static float    variable;

	if (! TGEN_FLT_EQ((variable = argument), 4.0))
		statusFlag++;
	variable += 5.0;
	result = levelThreeLeafThree(variable);
	variable++;
	result = levelThreeLeafFour(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeThree(argument)
	float           argument;
{
	float           result;
	static float    variable;

	if (! TGEN_FLT_EQ((variable = argument), 5.0) )
		statusFlag++;
	variable += 6.0;
	result = levelThreeLeafFive(variable);
	variable++;
	result = levelThreeLeafSix(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeFour(argument)
	float           argument;
{
	float           result;
	static float    variable;

	if (! TGEN_FLT_EQ((variable = argument), 6.0) )
		statusFlag++;
	variable += 7.0;
	result = levelThreeLeafSeven(variable);
	variable++;
	result = levelThreeLeafEight(variable);
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelThreeLeafOne(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 7.0)) )
		statusFlag++;
	return;
}

levelThreeLeafTwo(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 8.0)) )
		statusFlag++;
	return;
}

levelThreeLeafThree(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 9.0)) )
		statusFlag++;
	return;
}

levelThreeLeafFour(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 10.0)) )
		statusFlag++;
	return;
}

levelThreeLeafFive(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 11.0)) )
		statusFlag++;
	return;
}

levelThreeLeafSix(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 12.0)) )
		statusFlag++;
	return;
}

levelThreeLeafSeven(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 13.0)) )
		statusFlag++;
	return;
}

levelThreeLeafEight(argument)
	float           argument;
{
 if ( !(TGEN_FLT_EQ(argument, 14.0)) )
		statusFlag++;
	return;
}
@def_
@def $macro58()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, return value and legal, float function declaration
 */
{
	static float    i = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = 1.0;
	i = levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = 2.0;
	i = levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	static float    storage;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

	storage = variable;
	variable = 3.0;
	variable = levelTwoNodeOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	variable = 4.0;
	variable = levelTwoNodeTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	return (storage);
}

float
levelOneNodeTwo(variable)
	float           variable;
{
	static float    storage;
	float           levelTwoNodeThree(), levelTwoNodeFour();

	storage = variable;
	variable = 5.0;
	variable = levelTwoNodeThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	variable = 6.0;
	variable = levelTwoNodeFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	static float    storage;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

	storage = variable;
	variable = 7.0;
	variable = levelThreeLeafOne(variable);
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
	variable = 8.0;
	variable = levelThreeLeafTwo(variable);
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeTwo(variable)
	float           variable;
{
	static float    storage;
	float           levelThreeLeafThree(), levelThreeLeafFour();

	storage = variable;
	variable = 9.0;
	variable = levelThreeLeafThree(variable);
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
	variable = 10.0;
	variable = levelThreeLeafFour(variable);
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeThree(variable)
	float           variable;
{
	static float    storage;
	float           levelThreeLeafFive(), levelThreeLeafSix();

	storage = variable;
	variable = 11.0;
	variable = levelThreeLeafFive(variable);
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
	variable = 12.0;
	variable = levelThreeLeafSix(variable);
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeFour(variable)
	float           variable;
{
	static float    storage;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

	storage = variable;
	variable = 13.0;
	variable = levelThreeLeafSeven(variable);
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
	variable = 14.0;
	variable = levelThreeLeafEight(variable);
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
	return (storage);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafTwo(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafThree(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafFour(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafFive(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafSix(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafSeven(variable)
	float           variable;
{
	return (variable);
}

float
levelThreeLeafEight(variable)
	float           variable;
{
	return (variable);
}
@def_
@def $macro59()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, return value, legal pointer to function returning a float
 */
{
	static float    i;
	float           divide4(), dummy1();

	i = 12.0;
	i = dummy1(divide4, i);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro60()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, used in conditional expression, float function
 * declaration
 */
{
	static float    i = 1.0;
	float           levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(i);
	arg_b = 32.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	static float    ii;
	float           levelTwoNodeOne();

	ii = 2.0 * variable;
	return (2.0 * levelTwoNodeOne(ii));
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	static float    iii;
	float           levelThreeLeafOne();

	iii = 2.0 * variable;
	return (2.0 * levelThreeLeafOne(iii));
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (2.0 * variable);
}
@def_
@def $macro61()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, in conditional expression, pointer to function returning a
 * float
 */
{
	static float    i;
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	i = 12.0;
	arg_a = dummy1(divide4, i);
	arg_b = 3.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	static float    ii;

	if (! TGEN_FLT_EQ( (ii = (*func) (Float)), 3.0) )
		statusFlag++;
	return (ii);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	static float    ii;

	if (! TGEN_FLT_EQ((ii = (*func) (Float)), 6.0) )
		statusFlag++;
	return (ii);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro62()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, no return value, legal
 */
{
	static float    i;

	i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	static float    ii;

	ii = variable;
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(ii);
}
@def_
@def $macro63()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, no return value, illegal
 */
{
	static float    i = 1.0;

	i = recursiveFunction(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	static float    ii;
	float           result;

	if (! TGEN_FLT_EQ((ii = variable), 1.0) )
		statusFlag++;
	if (--counter) {
		result = recursiveFunction(ii);
 if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
	}
	return;
}
@def_
@def $macro64()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, legal, float function declaration
 */
{
	static float    i = 1.0;
	float           recursiveFunction();

	i = recursiveFunction(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	static float    ii;
	float           result;
	float           recursiveFunction();

	ii = variable;
	if (--counter) {
		result = recursiveFunction(ii);
 if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro65()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, pointer to function returning a float
 */
{
	static float    i = 1.0;
	float           increment(), dummy();

	i = dummy(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	static float    ii;
	float           result, dummy();

	ii = variable;
	if (--counter) {
		result = dummy(function, ii);
 if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro66()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, function in conditional expression, float function declaration
 */
{
	float           recursiveFunction();
	static float    i = 1.0;
	float           arg_a, arg_b;

	arg_a = recursiveFunction(i) - i;
	arg_b = 1.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           recursiveFunction();
	static float    ii;
	float           arg_a, arg_b;

	ii = variable;
	if (--counter){
		arg_a = recursiveFunction(ii) - variable;
		arg_b = 1.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro67()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, in conditional expression, pointer to function returning a float
 */
{
	float           increment(), dummy();
	static float    i = 1.0;
	float           arg_a, arg_b;

	arg_a = dummy(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	static float    ii;
	float           dummy();

	ii = variable;
	if (--counter)
		if (! TGEN_FLT_EQ(dummy(function, ii), 2.0))
			statusFlag++;
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro68()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, no return value, legal
 */
{
	static float    i = 1.0;
	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	static float    ii;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		ii = variable + 1.0;
		pollux(ii);
	}
}

pollux(variable)
	float           variable;
{
	static float    iii;

 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	if (--counter) {
		iii = variable - 1.0;
		castor(iii);
	}
}
@def_
@def $macro69()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, no return value, illegal
 */
{
	static float    i = 1.0;

	i = castor(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	static float    ii;
	float           result;

	if (! TGEN_FLT_EQ((ii = variable), 1.0))
		statusFlag++;
	if (--counter) {
		result = pollux(ii);
 if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
	}
}

pollux(variable)
	float           variable;
{
	static float    iii;
	float           result;

	if (! TGEN_FLT_EQ((iii = variable), 1.0) )
		statusFlag++;
	if (--counter) {
		result = castor(iii);
 if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
	}
}
@def_
@def $macro70()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, legal, function declared to return a float
 */
{
	static float    i = 1.0;
	float           castor();

	i = castor(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	static float    ii;
	float           pollux();

	ii = variable + 3.0;
	if (--counter) {
		ii = pollux(ii);
 if ( !(TGEN_FLT_EQ(ii, 5.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	static float    iii;
	float           castor();

	iii = variable - 3.0;
	if (--counter) {
		iii = castor(iii);
 if ( !(TGEN_FLT_EQ(iii, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro71()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, pointer to function returning a float
 */
{
	static float    i = 1.0;
	float           increment(), castor();

	i = castor(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	static float    ii;
	float           pollux();

	ii = variable + 8.0;
	if (--counter) {
		ii = pollux(function, ii);
 if ( !(TGEN_FLT_EQ(ii, 10.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	static float    iii;
	float           castor();

	iii = variable - 8.0;
	if (--counter) {
		iii = castor(function, iii);
 if ( !(TGEN_FLT_EQ(iii, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro72()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, function declared to return a float
 */
{
	static float    i = 1.0;
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	static float    ii;
	float           pollux();
	float           arg_a, arg_b;

	ii = variable + 3.0;
	if (--counter) {
		arg_a = pollux(ii);
		arg_b = 5.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	static float    iii;
	float           castor();
	float           arg_a, arg_b;

	iii = variable - 3.0;
	if (--counter) {
		arg_a = castor(iii);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro73()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, pointer to function returning a float
 */
{
	static float    i = 1.0;
	float           increment(), castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	static float    ii;
	float           pollux();

	ii = variable + 10.0;
	if (--counter) {
		if (! TGEN_FLT_EQ(pollux(function, ii), 12.0))
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	static float    iii;
	float           castor();

	iii = variable - 10.0;
	if (--counter) {
		if (! TGEN_FLT_EQ(castor(function, iii), 2.0))
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro74()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, no return value and legal
 */
{
	static float    i = 0.0;
	i = 1.0;
	levelOneNodeOne(i);
	i = 2.0;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 3.0;
	levelTwoNodeOne(i);
	i = 4.0;
	levelTwoNodeTwo(i);
	variable++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 5.0;
	levelTwoNodeThree(i);
	i = 6.0;
	levelTwoNodeFour(i);
	variable++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 7.0;
	levelThreeLeafOne(i);
	i = 8.0;
	levelThreeLeafTwo(i);
	variable++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 9.0;
	levelThreeLeafThree(i);
	i = 10.0;
	levelThreeLeafFour(i);
	variable++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 11.0;
	levelThreeLeafFive(i);
	i = 12.0;
	levelThreeLeafSix(i);
	variable++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 13.0;
	levelThreeLeafSeven(i);
	i = 14.0;
	levelThreeLeafEight(i);
	variable++;
}

levelThreeLeafOne(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafThree(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafFour(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafFive(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafSix(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}

levelThreeLeafEight(variable)
	float           variable;
{
	static float    i = 0.0;
 if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	variable++;
}
@def_
@def $macro75()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, return value and legal, float function
 * declaration
 */
{
	static float    i = 1.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i++;
	i = levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	static float    i = 3.0;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	i = levelTwoNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	i++;
	i = levelTwoNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 4.0)) )
		statusFlag++;
	return (variable);
}

float
levelOneNodeTwo(variable)
	float           variable;
{
	static float    i = 5.0;
	float           levelTwoNodeThree(), levelTwoNodeFour();

 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	i = levelTwoNodeThree(i);
 if ( !(TGEN_FLT_EQ(i, 5.0)) )
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	static float    i = 7.0;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

 if ( !(TGEN_FLT_EQ(variable, 3.0)) )
		statusFlag++;
	i = levelThreeLeafOne(i);
 if ( !(TGEN_FLT_EQ(i, 7.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafTwo(i);
 if ( !(TGEN_FLT_EQ(i, 8.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeTwo(variable)
	float           variable;
{
	static float    i = 9.0;
	float           levelThreeLeafThree(), levelThreeLeafFour();

 if ( !(TGEN_FLT_EQ(variable, 4.0)) )
		statusFlag++;
	i = levelThreeLeafThree(i);
 if ( !(TGEN_FLT_EQ(i, 9.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafFour(i);
 if ( !(TGEN_FLT_EQ(i, 10.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeThree(variable)
	float           variable;
{
	static float    i = 11.0;
	float           levelThreeLeafFive(), levelThreeLeafSix();

 if ( !(TGEN_FLT_EQ(variable, 5.0)) )
		statusFlag++;
	i = levelThreeLeafFive(i);
 if ( !(TGEN_FLT_EQ(i, 11.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafSix(i);
 if ( !(TGEN_FLT_EQ(i, 12.0)) )
		statusFlag++;
	return (variable);
}

float
levelTwoNodeFour(variable)
	float           variable;
{
	static float    i = 13.0;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

 if ( !(TGEN_FLT_EQ(variable, 6.0)) )
		statusFlag++;
	i = levelThreeLeafSeven(i);
 if ( !(TGEN_FLT_EQ(i, 13.0)) )
		statusFlag++;
	i++;
	i = levelThreeLeafEight(i);
 if ( !(TGEN_FLT_EQ(i, 14.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 7.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafTwo(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 8.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafThree(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 9.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafFour(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 10.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafFive(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 11.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafSix(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 12.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafSeven(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 13.0)) )
		statusFlag++;
	return (variable);
}

float
levelThreeLeafEight(variable)
	float           variable;
{
 if ( !(TGEN_FLT_EQ(variable, 14.0)) )
		statusFlag++;
	return (variable);
}
@def_
@def $macro76()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, return value, legal pointer to function returning
 * a float
 */
{
	static float    i = 12.0;
	float           divide4(), dummy1();

	i = dummy1(divide4, i);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	i = (*func) (Float);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro77()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, used in conditional expression, float function
 * declaration
 */
{
	static float    i = 1.0;
	float           levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(i);
	arg_b = 32.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	static float    i;
	float           levelTwoNodeOne();

	if (TGEN_FLT_EQ(i, 1.0) )
		statusFlag++;
	i = 2.0 * variable;
	return (2.0 * levelTwoNodeOne(i));
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	static float    i;
	float           levelThreeLeafOne();

	if (TGEN_FLT_EQ(i, 2.0) )
		statusFlag++;
	i = 2.0 * variable;
	return (2.0 * levelThreeLeafOne(i));
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	static float    i;

	if (TGEN_FLT_EQ(i, 4.0) )
		statusFlag++;
	return (2.0 * variable);
}
@def_
@def $macro78()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, in conditional expression, pointer to function
 * returning a float
 */
{
	static float    i;
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	i = 12.0;
	arg_a = dummy1(divide4, i);
	arg_b = 3.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	if (TGEN_FLT_EQ(i, 12.0) )
		statusFlag++;
	if (! TGEN_FLT_EQ((i = (*func) (Float)), 3.0) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	if (TGEN_FLT_EQ(i, 12.0) )
		statusFlag++;
	if (! TGEN_FLT_EQ((i = (*func) (Float)), 6.0) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro79()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, no return value, legal
 */
{
	static float    i = 1.0;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	static float    i;
	if (TGEN_FLT_EQ(i, variable) )
		statusFlag++;
	if (--counter)
		recursiveFunction(++variable);
}
@def_
@def $macro80()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, no return value, illegal
 */
{
	static float    i = 1.0;

	i = recursiveFunction(i);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	static float    i = 1.0;
	float           result;

	if ( !(TGEN_FLT_EQ(variable, 1.0)) || !(TGEN_FLT_EQ(++i, 2.0)) )
		statusFlag++;
	i = variable;
	if (--counter) {
		result = recursiveFunction(i);
 		if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
	}
	return;
}
@def_
@def $macro81()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, function in conditional expression, float function
 * declaration
 */
{
	static float    i = 1.0;
	float           recursiveFunction();
	float           arg_a, arg_b;

	arg_a = recursiveFunction(i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	static float    i = 1.0;
	float           recursiveFunction();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = recursiveFunction(i);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro82()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, no return value, legal
 */
{
	static float    i = 1.0;

	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	static float    i;

	i = variable + 1.0;
 if ( !(TGEN_FLT_EQ(variable, 1.0)) )
		statusFlag++;
	if (--counter)
		pollux(i);
}

pollux(variable)
	float           variable;
{
	static float    i;

	i = variable - 1.0;
 if ( !(TGEN_FLT_EQ(variable, 2.0)) )
		statusFlag++;
	if (--counter)
		castor(i);
}
@def_
@def $macro83()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           whatIsThis;

main()
/*
 * test class: static variable, doubled instance  : gemini, no return value, illegal
 */
{
	static float    i = 1.0;

	whatIsThis = castor(i);
 if ( TGEN_FLT_EQ(whatIsThis, 0.0) )
		whatIsThis++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	static float    i;

 if ( !(TGEN_FLT_EQ(variable, 1.0)) || counter < 10.0 && !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	i = variable + 1.0;
	if (--counter) {
		whatIsThis = pollux(i);
 		if ( TGEN_FLT_EQ(whatIsThis, 0.0) );
	}
}

pollux(variable)
	float           variable;
{
	static float    i;

 if ( !(TGEN_FLT_EQ(variable, 2.0)) || counter < 9.0 && !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = variable - 1.0;
	if (--counter) {
		whatIsThis = castor(i);
 		if ( TGEN_FLT_EQ(whatIsThis, 0.0) );
	}
}
@def_
@def $macro84()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, legal, function declared to return a float
 */
{
	static float    i = 1.0;
	float           castor();

	i = castor(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	static float    i;
	float           pollux();

	i = variable + 3.0;
	if (--counter) {
		i = pollux(i);
 if ( !(TGEN_FLT_EQ(i, 5.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	static float    i;
	float           castor();

	i = variable - 3.0;
	if (--counter) {
		i = castor(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro85()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, pointer to function returning a float
 */
{
	static float    i = 1.0;
	float           increment();
	float           castor();

	i = castor(increment, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	static float    i;
	float           pollux();

	i = variable + 8.0;
	if (--counter) {
		i = pollux(function, i);
 if ( !(TGEN_FLT_EQ(i, 10.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	static float    i;
	float           castor();

	i = variable - 8.0;
	if (--counter) {
		i = castor(function, i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro86()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, function declared to return a float
 */
{
	static float    i = 1.0;
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	static float    i;
	float           pollux();

	i = variable + 3.0;
	if (--counter)
		if (! TGEN_FLT_EQ(pollux(i), 5.0))
			statusFlag++;
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	static float    i;
	float           castor();
	float           arg_a, arg_b;

	i = variable - 3.0;
	if (--counter){
		arg_a = castor(i);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro87()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, pointer to function returning a float
 */
{
	static float    i = 1.0;
	float           increment();
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, i);
	arg_b = 2.0;
	if (! TGEN_FLT_EQ(arg_a, arg_b))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	static float    i;
	float           pollux();
	float           arg_a, arg_b;

	i = variable + 8.0;

	if (--counter){
		arg_a = pollux(function, i);
		arg_b = 10.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	static float    i;
	float           castor();
	float           arg_a, arg_b;

	i = variable - 8.0;
	if (--counter){
		arg_a = castor(function, i);
		arg_b = 2.0;
		if (! TGEN_FLT_EQ(arg_a, arg_b))
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro88()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, no return value and legal
 */
{
	static float    i;

	i = 1.0;
	levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = 2.0;
	levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	static float    i11 = 3.0;

	variable++;
	levelTwoNodeOne(i11);
 if ( !(TGEN_FLT_EQ(i11, 3.0)) )
		statusFlag++;
	i11++;
	levelTwoNodeTwo(i11);
 if ( !(TGEN_FLT_EQ(i11, 4.0)) )
		statusFlag++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	static float    i12 = 5.0;

	variable++;
	levelTwoNodeThree(i12);
 if ( !(TGEN_FLT_EQ(i12, 5.0)) )
		statusFlag++;
	i12++;
	levelTwoNodeFour(i12);
 if ( !(TGEN_FLT_EQ(i12, 6.0)) )
		statusFlag++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	static float    i21 = 7.0;

	variable++;
	levelThreeLeafOne(i21);
 if ( !(TGEN_FLT_EQ(i21, 7.0)) )
		statusFlag++;
	i21++;
	levelThreeLeafTwo(i21);
 if ( !(TGEN_FLT_EQ(i21, 8.0)) )
		statusFlag++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	static float    i22 = 9.0;

	variable++;
	levelThreeLeafThree(i22);
 if ( !(TGEN_FLT_EQ(i22, 9.0)) )
		statusFlag++;
	i22++;
	levelThreeLeafFour(i22);
 if ( !(TGEN_FLT_EQ(i22, 10.0)) )
		statusFlag++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	static float    i23 = 11.0;

	variable++;
	levelThreeLeafFive(i23);
 if ( !(TGEN_FLT_EQ(i23, 11.0)) )
		statusFlag++;
	i23++;
	levelThreeLeafSix(i23);
 if ( !(TGEN_FLT_EQ(i23, 12.0)) )
		statusFlag++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	static float    i24 = 13.0;

	variable++;
	levelThreeLeafSeven(i24);
 if ( !(TGEN_FLT_EQ(i24, 13.0)) )
		statusFlag++;
	i24++;
	levelThreeLeafEight(i24);
 if ( !(TGEN_FLT_EQ(i24, 14.0)) )
		statusFlag++;
}

levelThreeLeafOne(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafThree(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafFour(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafFive(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafSix(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	variable++;
}

levelThreeLeafEight(variable)
	float           variable;
{
	variable++;
}
@def_
@def $macro89()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, no return value and
 * illegal
 */
{
	static float    i = 0.0, result;

	i = 1.0;
	result = levelOneNodeOne(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(i);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float           variable;
{
	static float    i11 = 3.0;
	float           result;

	result = levelTwoNodeOne(i11);
 if ( !(TGEN_FLT_EQ(variable, 1.0)) || !(TGEN_FLT_EQ(i11, 3.0)) )
		statusFlag++;
	i11++;
	result = levelTwoNodeTwo(i11);
 if ( !(TGEN_FLT_EQ(i11, 4.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelOneNodeTwo(variable)
	float           variable;
{
	static float    i12 = 5.0;
	float           result;

	result = levelTwoNodeThree(i12);
 if ( !(TGEN_FLT_EQ(variable, 2.0)) || !(TGEN_FLT_EQ(i12, 5.0)) )
		statusFlag++;
	i12++;
	result = levelTwoNodeFour(i12);
 if ( !(TGEN_FLT_EQ(i12, 6.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeOne(variable)
	float           variable;
{
	static float    i21 = 7.0;
	float           result;

	result = levelThreeLeafOne(i21);
 if ( !(TGEN_FLT_EQ(variable, 3.0)) || !(TGEN_FLT_EQ(i21, 7.0)) )
		statusFlag++;
	i21++;
	result = levelThreeLeafTwo(i21);
 if ( !(TGEN_FLT_EQ(i21, 8.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeTwo(variable)
	float           variable;
{
	static float    i22 = 9.0;
	float           result;

	result = levelThreeLeafThree(i22);
 if ( !(TGEN_FLT_EQ(variable, 4.0)) || !(TGEN_FLT_EQ(i22, 9.0)) )
		statusFlag++;
	i22++;
	result = levelThreeLeafFour(i22);
 if ( !(TGEN_FLT_EQ(i22, 10.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeThree(variable)
	float           variable;
{
	static float    i23 = 11.0;
	float           result;

	result = levelThreeLeafFive(i23);
 if ( !(TGEN_FLT_EQ(variable, 5.0)) || !(TGEN_FLT_EQ(i23, 11.0)) )
		statusFlag++;
	i23++;
	result = levelThreeLeafSix(i23);
 if ( !(TGEN_FLT_EQ(i23, 12.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelTwoNodeFour(variable)
	float           variable;
{
	static float    i24 = 13.0;
	float           result;

	result = levelThreeLeafSeven(i24);
 if ( !(TGEN_FLT_EQ(variable, 6.0)) || !(TGEN_FLT_EQ(i24, 13.0)) )
		statusFlag++;
	i24++;
	result = levelThreeLeafEight(i24);
 if ( !(TGEN_FLT_EQ(i24, 14.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
}

levelThreeLeafOne(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafTwo(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafThree(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafFour(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafFive(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafSix(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafSeven(variable)
	float           variable;
{
	variable++;
	return;
}

levelThreeLeafEight(variable)
	float           variable;
{
	variable++;
	return;
}
@def_
@def $macro90()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, return value, legal pointer
 * to function returning a float
 */
{
	static float    i;
	float           divide4(), result = 0.0, dummy1();

	i = 12.0;
	result = dummy1(divide4, i);
	if ( (! TGEN_FLT_EQ(i, 12.0)) || (! TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	i = (*func) (Float);
	if ( (! TGEN_FLT_EQ(i, 3.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (i);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	static float    i;

	i = (*func) (Float);
	if ( (! TGEN_FLT_EQ(i, 6.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (i);
}

float
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro91()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, float function declaration
 */
{
	static float    i = 1.0;
	float           levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(i);
	arg_b = 32.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float           variable;
{
	static float    ii;
	float           levelTwoNodeOne(), result = 0.0;

	ii = 2.0 * variable++;
	result = 2.0 * levelTwoNodeOne(ii);
 if ( !(TGEN_FLT_EQ(ii, 2.0)) )
		statusFlag++;
	return (result);
}

float
levelTwoNodeOne(variable)
	float           variable;
{
	static float    iii;
	float           levelThreeLeafOne(), result = 0.0;

	iii = 2.0 * variable++;
	result = 2.0 * levelThreeLeafOne(iii);
 if ( !(TGEN_FLT_EQ(iii, 4.0)) )
		statusFlag++;
	return (result);
}

float
levelThreeLeafOne(variable)
	float           variable;
{
	return (2.0 * variable++);
}
@def_
@def $macro92()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, in conditional expression,
 * pointer to function returning a float
 */
{
	static float    i;
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	i = 12.0;
	arg_a = dummy1(divide4, i);
	arg_b = 3.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 12.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), Float;
{
	static float    ii;

	if ( (! TGEN_FLT_EQ((ii = (*func) (Float)), 3.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (ii);
}

float
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), Float;
{
	static float    iii;

	if ( (! TGEN_FLT_EQ((iii = (*func) (Float)), 6.0)) || (! TGEN_FLT_EQ(Float, 12.0)) )
		statusFlag++;
	Float++;
	return (iii);
}

float
divide2(Float)
	float           Float;
{
	return (Float++ / 2.0);
}
@def_
@def $macro93()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, no return value, legal
 */
{
	static float    i;

	i = 1.0;
	recursiveFunction(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	static float    ii;

	ii = variable++;
	if (--counter) {
		recursiveFunction(ii);
 if ( !(TGEN_FLT_EQ(ii, 1.0)) )
			statusFlag++;
	}
}
@def_
@def $macro94()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, no return value, illegal
 */
{
	static float    i = 1.0;
	float           result;
	result = recursiveFunction(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float           variable;
{
	static float    ii = 1.0;
	float           result;

	if (--counter) {
		result = recursiveFunction(ii);
 if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
 if ( !(TGEN_FLT_EQ(ii, 1.0)) )
			statusFlag++;
		variable++;
	}
	return;
}
@def_
@def $macro95()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, legal, float
 * function declaration
 */
{
	static float    i = 1.0;
	float           recursiveFunction(), result = 0.0;

	result = recursiveFunction(i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           result, recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if( !(TGEN_FLT_EQ(result, 2.0)) || !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro96()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, pointer to function
 * returning a float
 */
{
	static float    i = 1.0;
	float           increment(), result = 0.0, dummy();

	result = dummy(increment, i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           result, dummy();
	if (--counter) {
		result = dummy(function, variable);
 		if ( !(TGEN_FLT_EQ(result, 2.0)) || !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro97()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, float function declaration
 */
{
	float           recursiveFunction();
	static float    i = 1.0;
	float           arg_a, arg_b;

	arg_a = recursiveFunction(i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float           variable;
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = recursiveFunction(variable);
		arg_b = 2.0;
 		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) || !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro98()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, in conditional expression, pointer
 * to function returning a float
 */
{
	float           increment();
	static float    i = 1.0;
	float           dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), variable;
{
	float           dummy();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, variable);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) || !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro99()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, no return value, legal
 */
{
	static float    i = 1.0;

	castor(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	if (--counter) {
		variable++;
		pollux(variable);
		if ( !(TGEN_FLT_EQ(variable, 2.0)) )
			statusFlag++;
	}
}

pollux(variable)
	float           variable;
{
	if (--counter) {
		--variable;
		castor(variable);
		if ( !(TGEN_FLT_EQ(variable, 1.0)) )
			statusFlag++;
	}
}
@def_
@def $macro100()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, no return value, illegal
 */
{
	static float    i = 1.0;
	float           result;

	result = castor(i);
 if ( !(TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float           variable;
{
	static float    ii = 1.0;
	float           result;

	ii = variable++;
	if (--counter) {
		result = pollux(ii);
 		if ( !(TGEN_FLT_EQ(variable, 2.0)) || !(TGEN_FLT_EQ(ii, 1.0)) )
			statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
	}
}

pollux(variable)
	float           variable;
{
	static float    iii = 1.0;
	float           result;

	iii = variable++;
	if (--counter) {
		result = castor(iii);
 		if ( !(TGEN_FLT_EQ(variable, 2.0)) || !(TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
 if ( TGEN_FLT_EQ(result, 0.0) )
			result++;
	}
}
@def_
@def $macro101()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, legal, function declared to
 * return a float
 */
{
	static float    i = 1.0;
	float           castor(), result = 0.0;

	result = castor(i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	float           ii = variable + 3.0, pollux(), result = 0.0;

	if (--counter) {
		result = pollux(ii);
		if ( (! TGEN_FLT_EQ(result, 5.0)) || (! TGEN_FLT_EQ(ii, 4.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	float           iii = variable - 3.0, result = 0.0;
	float           castor();

	if (--counter) {
		result = castor(iii);
		if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro102()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, pointer to function
 * returning a float
 */
{
	static float    i = 1.0;
	float           increment(), result = 0.0;
	float           castor();

	result = castor(increment, i);
	if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	float           ii = variable + 8.0, result = 0.0;
	float           pollux();
	if (--counter) {
		result = pollux(function, ii);
		if ( (! TGEN_FLT_EQ(result, 10.0)) || (! TGEN_FLT_EQ(ii, 9.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	float           iii = variable - 8.0, result = 0.0;
	float           castor();
	if (--counter) {
		result = castor(function, iii);
		if ( (! TGEN_FLT_EQ(result, 2.0)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro103()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return a float
 */
{
	static float    i = 1.0;
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float           variable;
{
	static float    ii;
	float           pollux();
	float           arg_a, arg_b;

	ii = variable + 3.0;
	if (--counter) {
		arg_a = pollux(ii);
		arg_b = 5.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(ii, 4.0)) )
			statusFlag++;
	}
	return (++variable);
}

float
pollux(variable)
	float           variable;
{
	static float    iii;
	float           castor();
	float           arg_a, arg_b;

	iii = variable - 3.0;
	if (--counter) {
		arg_a = castor(iii);
		arg_b = 2.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro104()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, pointer to
 * function returning a float
 */
{
	static float    i = 1.0;
	float           increment();
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, i);
	arg_b = 2.0;
	if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(i, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), variable;
{
	static float    ii;
	float           pollux();
	float           arg_a, arg_b;

	ii = variable + 10.0;
	if (--counter) {
		arg_a = pollux(function, ii);
		arg_b = 12.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(ii, 11.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
pollux(function, variable)
	float           (*function) (), variable;
{
	static float    iii;
	float           castor();
	float           arg_a, arg_b;

	iii = variable - 10.0;
	if (--counter) {
		arg_a = castor(function, iii);
		arg_b = 2.0;
		if ( (! TGEN_FLT_EQ(arg_a, arg_b)) || (! TGEN_FLT_EQ(iii, 1.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro105()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, no return value and legal
 */
{
	long            i;

	i = 1L;
	levelOneNodeOne(i);
	i = 2L;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	variable += 2;
	levelTwoNodeOne(variable);
	variable++;
	levelTwoNodeTwo(variable);
}

levelOneNodeTwo(variable)
	long            variable;
{
	if (variable != 2L)
		statusFlag++;
	variable += 3;
	levelTwoNodeThree(variable);
	variable++;
	levelTwoNodeFour(variable);
}

levelTwoNodeOne(variable)
	long            variable;
{
	if (variable != 3L)
		statusFlag++;
	variable += 4;
	levelThreeLeafOne(variable);
	variable++;
	levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	if (variable != 4L)
		statusFlag++;
	variable += 5;
	levelThreeLeafThree(variable);
	variable++;
	levelThreeLeafFour(variable);
}

levelTwoNodeThree(variable)
	long            variable;
{
	if (variable != 5L)
		statusFlag++;
	variable += 6;
	levelThreeLeafFive(variable);
	variable++;
	levelThreeLeafSix(variable);
}

levelTwoNodeFour(variable)
	long            variable;
{
	if (variable != 6L)
		statusFlag++;
	variable += 7;
	levelThreeLeafSeven(variable);
	variable++;
	levelThreeLeafEight(variable);
}

levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
}
@def_
@def $macro106()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, no return value and illegal
 */
{
	long            i, result;

	i = 1L;
	result = levelOneNodeOne(i);
	i = 2L;
	result = levelOneNodeTwo(i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	long            result;

	if (variable != 1L)
		statusFlag++;
	variable += 2;
	result = levelTwoNodeOne(variable);
	variable++;
	result = levelTwoNodeTwo(variable);
	if (result == 0L)
		result++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	long            result;

	if (variable != 2L)
		statusFlag++;
	variable += 3;
	result = levelTwoNodeThree(variable);
	variable++;
	result = levelTwoNodeFour(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	long            result;

	if (variable != 3L)
		statusFlag++;
	variable += 4;
	result = levelThreeLeafOne(variable);
	variable++;
	result = levelThreeLeafTwo(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	long            result;

	if (variable != 4L)
		statusFlag++;
	variable += 5;
	result = levelThreeLeafThree(variable);
	variable++;
	result = levelThreeLeafFour(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	long            result;

	if (variable != 5L)
		statusFlag++;
	variable += 6;
	result = levelThreeLeafFive(variable);
	variable++;
	result = levelThreeLeafSix(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	long            result;

	if (variable != 6L)
		statusFlag++;
	variable += 7;
	result = levelThreeLeafSeven(variable);
	variable++;
	result = levelThreeLeafEight(variable);
	if (result == 0L)
		result++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
}
@def_
@def $macro107()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, return value and legal, Long function declaration
 */
{
	long            i = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	i = levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i = 2;
	i = levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            storage = variable;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	variable = 3;
	variable = levelTwoNodeOne(variable);
	if (variable != 3L)
		statusFlag++;
	variable = 4;
	variable = levelTwoNodeTwo(variable);
	if (variable != 4L)
		statusFlag++;
	return (storage);
}

long
levelOneNodeTwo(variable)
	long            variable;
{
	long            storage = variable;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	variable = 5;
	variable = levelTwoNodeThree(variable);
	if (variable != 5L)
		statusFlag++;
	variable = 6;
	variable = levelTwoNodeFour(variable);
	if (variable != 6L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            storage = variable;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	variable = 7;
	variable = levelThreeLeafOne(variable);
	if (variable != 7L)
		statusFlag++;
	variable = 8;
	variable = levelThreeLeafTwo(variable);
	if (variable != 8L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeTwo(variable)
	long            variable;
{
	long            storage = variable;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	variable = 9;
	variable = levelThreeLeafThree(variable);
	if (variable != 9L)
		statusFlag++;
	variable = 10;
	variable = levelThreeLeafFour(variable);
	if (variable != 10L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeThree(variable)
	long            variable;
{
	long            storage = variable;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	variable = 11;
	variable = levelThreeLeafFive(variable);
	if (variable != 11L)
		statusFlag++;
	variable = 12;
	variable = levelThreeLeafSix(variable);
	if (variable != 12L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeFour(variable)
	long            variable;
{
	long            storage = variable;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	variable = 13;
	variable = levelThreeLeafSeven(variable);
	if (variable != 13L)
		statusFlag++;
	variable = 14;
	variable = levelThreeLeafEight(variable);
	if (variable != 14L)
		statusFlag++;
	return (storage);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafTwo(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafThree(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafFour(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafFive(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafSix(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafSeven(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafEight(variable)
	long            variable;
{
	return (variable);
}
@def_
@def $macro108()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, return value, legal pointer to function returning a
 * long
 */
{
	long            i, divide4(), dummy1();

	i = 12L;
	i = dummy1(divide4, i);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro109()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, used in conditional expression, long function
 * declaration
 */
{
	long            i = 1L, levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            ii, levelTwoNodeOne();

	ii = 2 * variable;
	return (2 * levelTwoNodeOne(ii));
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            iii, levelThreeLeafOne();

	iii = 2 * variable;
	return (2 * levelThreeLeafOne(iii));
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable);
}
@def_
@def $macro110()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, in conditional expression, pointer to function
 * returning a long
 */
{
	long            i, divide4(), dummy1();

	i = 12L;
	if (dummy1(divide4, i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 3L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 6L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro111()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, no return value, legal
 */
{
	long            i;

	i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro112()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, no return value, illegal
 */
{
	long            i = 1L;
	i = recursiveFunction(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	long            ii;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		ii = recursiveFunction(variable);
		if (ii == 0L)
			ii++;
	}
	return;
}
@def_
@def $macro113()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, legal, long function declaration
 */
{
	long            i = 1L;
	long            recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            result;
	long            recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro114()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, pointer to function returning a long
 */
{
	long            i = 1L, increment(), dummy();

	i = dummy(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            result, dummy();
	if (--counter) {
		result = dummy(function, variable);
		if (result != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro115()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, function in conditional expression, long function declaration
 */
{
	long            recursiveFunction();
	long            i = 1L;

	if (!(recursiveFunction(i) - i == 1L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(variable) - variable == 1L))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro116()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, in conditional expression, pointer to function returning a
 * long
 */
{
	long            increment();
	long            i = 1L, dummy();

	if (!(dummy(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            dummy();
	if (--counter)
		if (!(dummy(function, variable) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro117()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, no return value, legal
 */
{
	long            i = 1L;
	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		variable++;
		pollux(variable);
	}
}

pollux(variable)
	long            variable;
{
	if (variable != 2L)
		statusFlag++;
	if (--counter) {
		--variable;
		castor(variable);
	}
}
@def_
@def $macro118()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, no return value, illegal
 */
{
	long            i = 1L;

	i = castor(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	long            ii;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		ii = pollux(variable);
		if (ii == 0L)
			ii++;
	}
}

pollux(variable)
	long            variable;
{
	long            iii;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		iii = castor(variable);
		if (iii == 0L)
			iii++;
	}
}
@def_
@def $macro119()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, legal, function declared to return a long
 */
{
	long            i = 1L, castor();

	i = castor(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            ii = variable + 3, pollux();

	if (--counter) {
		ii = pollux(ii);
		if (ii != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            iii = variable - 3, castor();

	if (--counter) {
		iii = castor(iii);
		if (iii != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro120()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, pointer to function returning a long
 */
{
	long            i = 1L, increment(), castor();

	i = castor(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = variable + 8, pollux();
	if (--counter) {
		ii = pollux(function, ii);
		if (ii != 10L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = variable - 8, castor();
	if (--counter) {
		iii = castor(function, iii);
		if (iii != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro121()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, function declared to return a long
 */
{
	long            i = 1L, castor();

	if (!(castor(i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            ii = variable + 3, pollux();

	if (--counter) {
		if (!(pollux(ii) == 5L))
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            iii = variable - 3, castor();
	if (--counter) {
		if (!(castor(iii) == 2L))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro122()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, pointer to function returning a long
 */
{
	long            i = 1L, increment(), castor();

	if (!(castor(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = variable + 10, pollux();
	if (--counter) {
		if (!(pollux(function, ii) == 12L))
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = variable - 10, castor();
	if (--counter) {
		if (!(castor(function, iii) == 2L))
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro123()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, no return value and legal
 */
{
	long            i = 0L;
	i = 1L;
	levelOneNodeOne(i);
	i = 2L;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 3L;
	levelTwoNodeOne(i);
	i = 4L;
	levelTwoNodeTwo(i);
	variable++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 5L;
	levelTwoNodeThree(i);
	i = 6L;
	levelTwoNodeFour(i);
	variable++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 7L;
	levelThreeLeafOne(i);
	i = 8L;
	levelThreeLeafTwo(i);
	variable++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 9L;
	levelThreeLeafThree(i);
	i = 10L;
	levelThreeLeafFour(i);
	variable++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 11L;
	levelThreeLeafFive(i);
	i = 12L;
	levelThreeLeafSix(i);
	variable++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 13L;
	levelThreeLeafSeven(i);
	i = 14L;
	levelThreeLeafEight(i);
	variable++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	long            i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}
@def_
@def $macro124()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, no return value and illegal
 */
{
	long            i = 1L;

	i = levelOneNodeOne(i);
	i = 2L;
	i = levelOneNodeTwo(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	long            i = 3L;

	if (variable != 1L)
		statusFlag++;
	i = levelTwoNodeOne(i);
	i = 4L;
	i = levelTwoNodeTwo(i);
	if (i == 0L)
		i++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	long            i = 5L;

	if (variable != 2L)
		statusFlag++;
	i = levelTwoNodeThree(i);
	i = 6L;
	i = levelTwoNodeFour(i);
	if (i == 0L)
		i++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	long            i = 7L;

	if (variable != 3L)
		statusFlag++;
	i = levelThreeLeafOne(i);
	i = 8L;
	i = levelThreeLeafTwo(i);
	if (i == 0L)
		i++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	long            i = 9L;

	if (variable != 4L)
		statusFlag++;
	i = levelThreeLeafThree(i);
	i = 10L;
	i = levelThreeLeafFour(i);
	if (i == 0L)
		i++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	long            i = 11L;

	if (variable != 5L)
		statusFlag++;
	i = levelThreeLeafFive(i);
	i = 12L;
	i = levelThreeLeafSix(i);
	if (i == 0L)
		i++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	long            i = 13L;

	if (variable != 6L)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	i = 14L;
	i = levelThreeLeafEight(i);
	if (i == 0L)
		i++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	long            i = 15L;
	if (variable != 7L || i != 15L)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	long            i = 16L;
	if (variable != 8L || i != 16L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	long            i = 17L;
	if (variable != 9L || i != 17L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	long            i = 18L;
	if (variable != 10L || i != 18L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	long            i = 19L;
	if (variable != 11L || i != 19L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	long            i = 20L;
	if (variable != 12L || i != 20L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	long            i = 21L;
	if (variable != 13L || i != 21L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	long            i = 22L;
	if (variable != 14L || i != 22L)
		statusFlag++;
}
@def_
@def $macro125()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, return value and legal, long function
 * declaration
 */
{
	long            i = 1L;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i++;
	i = levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            i = 3L;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	if (variable != 1L)
		statusFlag++;
	i = levelTwoNodeOne(i);
	if (i != 3L)
		statusFlag++;
	i++;
	i = levelTwoNodeTwo(i);
	if (i != 4L)
		statusFlag++;
	return (variable);
}

long
levelOneNodeTwo(variable)
	long            variable;
{
	long            i = 5L;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	if (variable != 2L)
		statusFlag++;
	i = levelTwoNodeThree(i);
	if (i != 5L)
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
	if (i != 6L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            i = 7L;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	if (variable != 3L)
		statusFlag++;
	i = levelThreeLeafOne(i);
	if (i != 7L)
		statusFlag++;
	i++;
	i = levelThreeLeafTwo(i);
	if (i != 8L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeTwo(variable)
	long            variable;
{
	long            i = 9L;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	if (variable != 4L)
		statusFlag++;
	i = levelThreeLeafThree(i);
	if (i != 9L)
		statusFlag++;
	i++;
	i = levelThreeLeafFour(i);
	if (i != 10L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeThree(variable)
	long            variable;
{
	long            i = 11L;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	if (variable != 5L)
		statusFlag++;
	i = levelThreeLeafFive(i);
	if (i != 11L)
		statusFlag++;
	i++;
	i = levelThreeLeafSix(i);
	if (i != 12L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeFour(variable)
	long            variable;
{
	long            i = 13L;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	if (variable != 6L)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	if (i != 13L)
		statusFlag++;
	i++;
	i = levelThreeLeafEight(i);
	if (i != 14L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
	return (variable);
}
@def_
@def $macro126()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, return value, legal pointer to function
 * returning a long
 */
{
	long            i = 12L, divide4(), dummy1();

	i = dummy1(divide4, i);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro127()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, used in conditional expression, long function
 * declaration
 */
{
	long            i = 1L, levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            i, levelTwoNodeOne();

	i = 2 * variable;
	return (2 * levelTwoNodeOne(i));
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            i, levelThreeLeafOne();

	i = 2 * variable;
	return (2 * levelThreeLeafOne(i));
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable);
}
@def_
@def $macro128()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, in conditional expression, pointer to function
 * returning a long
 */
{
	long            i, divide4(), dummy1();

	i = 12L;
	if (dummy1(divide4, i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i;

	if ((i = (*func) (Long)) != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i;

	if ((i = (*func) (Long)) != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro129()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, no return value, legal
 */
{
	long            i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	long            i = variable;
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(i);
}
@def_
@def $macro130()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, no return value, illegal
 */
{
	long            i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	long            i = 2L;

	if (variable != 1L || i != 2L)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(variable);
		if (i == 0L)
			i++;
	}
	return;
}
@def_
@def $macro131()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, legal, long function declaration
 */
{
	long            i = 1L;
	long            recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            i = variable;
	long            recursiveFunction();

	if (--counter) {
		i = recursiveFunction(i);
		if (i != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro132()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, pointer to function returning a long
 */
{
	long            i = 1L, increment(), dummy();

	i = dummy(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            i = variable, dummy();
	if (--counter) {
		i = dummy(function, i);
		if (i != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro133()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, function in conditional expression, long function
 * declaration
 */
{
	long            i = 1L, recursiveFunction();

	if (!(recursiveFunction(i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            i = 1L, recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(i) == 2L))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro134()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, in conditional expression, pointer to function
 * returning a long
 */
{
	long            i = 1L, increment(), dummy();

	if (!(dummy(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            i = variable, dummy();
	if (--counter)
		if (!(dummy(function, i) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro135()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, no return value, legal
 */
{
	long            i = 1L;

	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	long            i = variable + 1L;

	if (variable != 1L)
		statusFlag++;
	if (--counter)
		pollux(i);
}

pollux(variable)
	long            variable;
{
	long            i = variable - 1L;

	if (variable != 2L)
		statusFlag++;
	if (--counter)
		castor(i);
}
@def_
@def $macro136()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, no return value, illegal
 */
{
	long            i = 1L;

	i = castor(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	long            i = 2L;

	if (variable != 1L || i != 2L)
		statusFlag++;
	if (--counter) {
		i = pollux(i);
		if (i == 0L)
			i++;
	}
}

pollux(variable)
	long            variable;
{
	long            i = 1L;

	if (variable != 2L || i != 1L)
		statusFlag++;
	if (--counter) {
		i = castor(i);
		if (i == 0L)
			i++;
	}
}
@def_
@def $macro137()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, legal, function declared to return a long
 */
{
	long            i = 1L, castor();

	i = castor(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            i = variable + 3L, pollux();

	if (--counter) {
		i = pollux(i);
		if (i != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            i = variable - 3L, castor();

	if (--counter) {
		i = castor(i);
		if (i != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro138()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, pointer to function returning a long
 */
{
	long            i = 1L, increment(), castor();

	i = castor(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            pollux();
	long            i = variable + 8L;
	if (--counter) {
		i = pollux(function, i);
		if (i != 10L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            i = variable - 8L, castor();
	if (--counter) {
		i = castor(function, i);
		if (i != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro139()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, function declared to return a long
 */
{
	long            i = 1L, castor();

	if (!(castor(i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            i = variable + 3L, pollux();

	if (--counter)
		if (!(pollux(i) == 5L))
			statusFlag++;
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            i = variable - 3L, castor();

	if (--counter)
		if (!(castor(i) == 2L))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro140()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, pointer to function returning a
 * long
 */
{
	long            i = 1L, increment(), castor();

	if (!(castor(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            i = variable + 8L, pollux();

	if (--counter)
		if (!(pollux(function, i) == 10L))
			statusFlag++;
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            i = variable - 8L, castor();

	if (--counter)
		if (!(castor(function, i) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro141()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, no return value and
 * legal
 */
{
	long            i;

	i = 1L;
	levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i = 2L;
	levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	variable += 2L;
	levelTwoNodeOne(variable);
	if (variable != 3L)
		statusFlag++;
	variable++;
	levelTwoNodeTwo(variable);
	if (variable != 4L)
		statusFlag++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	variable += 3L;
	levelTwoNodeThree(variable);
	if (variable != 5L)
		statusFlag++;
	variable++;
	levelTwoNodeFour(variable);
	if (variable != 6L)
		statusFlag++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	variable += 4L;
	levelThreeLeafOne(variable);
	if (variable != 7L)
		statusFlag++;
	variable++;
	levelThreeLeafTwo(variable);
	if (variable != 8L)
		statusFlag++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	variable += 5L;
	levelThreeLeafThree(variable);
	if (variable != 9L)
		statusFlag++;
	variable++;
	levelThreeLeafFour(variable);
	if (variable != 10L)
		statusFlag++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	variable += 6L;
	levelThreeLeafFive(variable);
	if (variable != 11L)
		statusFlag++;
	variable++;
	levelThreeLeafSix(variable);
	if (variable != 12L)
		statusFlag++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	variable += 7L;
	levelThreeLeafSeven(variable);
	if (variable != 13L)
		statusFlag++;
	variable++;
	levelThreeLeafEight(variable);
	if (variable != 14L)
		statusFlag++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	variable++;
}
@def_
@def $macro142()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, no return value and
 * illegal
 */
{
	long            i, result;

	i = 1L;
	result = levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i = 2L;
	result = levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (result != 0L)
		result = 0L;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	long            result;

	variable += 2L;
	result = levelTwoNodeOne(variable);
	if (variable != 3L)
		statusFlag++;
	variable++;
	result = levelTwoNodeTwo(variable);
	if (variable != 4L)
		statusFlag++;
	if (result == 0L);
}

levelOneNodeTwo(variable)
	long            variable;
{
	long            result;

	variable += 3L;
	result = levelTwoNodeThree(variable);
	if (variable != 5L)
		statusFlag++;
	variable++;
	result = levelTwoNodeFour(variable);
	if (variable != 6L)
		statusFlag++;
	if (result == 0L);
}

levelTwoNodeOne(variable)
	long            variable;
{
	long            result;

	variable += 4L;
	result = levelThreeLeafOne(variable);
	if (variable != 7L)
		statusFlag++;
	variable++;
	result = levelThreeLeafTwo(variable);
	if (variable != 8L)
		statusFlag++;
	if (result == 0L);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	long            result;

	variable += 5L;
	result = levelThreeLeafThree(variable);
	if (variable != 9L)
		statusFlag++;
	variable++;
	result = levelThreeLeafFour(variable);
	if (variable != 10L)
		statusFlag++;
	if (result == 0L);
}

levelTwoNodeThree(variable)
	long            variable;
{
	long            result;

	variable += 6L;
	result = levelThreeLeafFive(variable);
	if (variable != 11L)
		statusFlag++;
	variable++;
	result = levelThreeLeafSix(variable);
	if (variable != 12L)
		statusFlag++;
	if (result == 0L);
}

levelTwoNodeFour(variable)
	long            variable;
{
	long            result;

	variable += 7L;
	result = levelThreeLeafSeven(variable);
	if (variable != 13L)
		statusFlag++;
	variable++;
	result = levelThreeLeafEight(variable);
	if (variable != 14L)
		statusFlag++;
	if (result == 0L);
}

levelThreeLeafOne(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafThree(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafFour(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafFive(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafSix(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafEight(variable)
	long            variable;
{
	variable++;
	return;
}
@def_
@def $macro143()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * long function declaration
 */
{
	long            i = 0L, result = 0L;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = 1L;
	result = levelOneNodeOne(i);
	if (i != 1L || result != 1L)
		statusFlag++;
	i = 2L;
	result = levelOneNodeTwo(i);
	if (i != 2L || result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            storage = variable, result = 0L;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	variable = 3L;
	result = levelTwoNodeOne(variable);
	if (variable != 3L || result != 3L)
		statusFlag++;
	variable = 4L;
	result = levelTwoNodeTwo(variable);
	if (variable != 4L || result != 4L)
		statusFlag++;
	return (storage);
}

long
levelOneNodeTwo(variable)
	long            variable;
{
	long            storage = variable, result = 0L;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	variable = 5L;
	result = levelTwoNodeThree(variable);
	if (variable != 5L || result != 5L)
		statusFlag++;
	variable = 6L;
	result = levelTwoNodeFour(variable);
	if (variable != 6L || result != 6L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            storage = variable, result = 0L;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	variable = 7L;
	result = levelThreeLeafOne(variable);
	if (variable != 7L || result != 7L)
		statusFlag++;
	variable = 8L;
	result = levelThreeLeafTwo(variable);
	if (variable != 8L || result != 8L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeTwo(variable)
	long            variable;
{
	long            storage = variable, result = 0L;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	variable = 9L;
	result = levelThreeLeafThree(variable);
	if (variable != 9L || result != 9L)
		statusFlag++;
	variable = 10L;
	result = levelThreeLeafFour(variable);
	if (variable != 10L || result != 10L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeThree(variable)
	long            variable;
{
	long            storage = variable, result = 0L;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	variable = 11L;
	result = levelThreeLeafFive(variable);
	if (variable != 11L || result != 11L)
		statusFlag++;
	variable = 12L;
	result = levelThreeLeafSix(variable);
	if (variable != 12L || result != 12L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeFour(variable)
	long            variable;
{
	long            storage = variable, result = 0L;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	variable = 13L;
	result = levelThreeLeafSeven(variable);
	if (variable != 13L || result != 13L)
		statusFlag++;
	variable = 14L;
	result = levelThreeLeafEight(variable);
	if (variable != 14L || result != 14L)
		statusFlag++;
	return (storage);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafTwo(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafThree(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafFour(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafFive(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafSix(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafSeven(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}

long
levelThreeLeafEight(variable)
	long            variable;
{
	long            storage = variable;

	variable++;
	return (storage);
}
@def_
@def $macro144()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value, legal
 * pointer to function returning a long
 */
{
	long            i, divide4(), result = 0L, dummy1();

	i = 12L;
	result = dummy1(divide4, i);
	if (i != 12L || result != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L || Long != 12L)
		statusFlag++;
	Long++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L || Long != 12L)
		statusFlag++;
	Long++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro145()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, long function declaration
 */
{
	long            i = 1L, levelOneNodeOne();

	if (levelOneNodeOne(i) != 32L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            ii, levelTwoNodeOne(), result = 0L;

	ii = 2L * variable++;
	result = 2L * levelTwoNodeOne(ii);
	if (ii != 2L)
		statusFlag++;
	return (result);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            iii, levelThreeLeafOne(), result = 0L;

	iii = 2L * variable++;
	result = 2L * levelThreeLeafOne(iii);
	if (iii != 4L)
		statusFlag++;
	return (result);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable++);
}
@def_
@def $macro146()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, in conditional
 * expression, pointer to function returning a long
 */
{
	long            i, divide4(), dummy1();

	i = 12L;
	if (dummy1(divide4, i) != 3L || i != 12L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 3L || Long != 12L)
		statusFlag++;
	Long++;
	return (ii);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 6L || Long != 12L)
		statusFlag++;
	Long++;
	return (ii);
}

long
divide2(Long)
	long            Long;
{
	return (Long++ / 2);
}
@def_
@def $macro147()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, no return value, legal
 */
{
	long            i;

	i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(variable++);
}
@def_
@def $macro148()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, no return value, illegal
 */
{
	long            i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	long            i = 0L;

	if (--counter) {
		i = recursiveFunction(variable);
		if (variable != 1L)
			statusFlag++;
		if (variable++ || i == 0L);
	}
	return;
}
@def_
@def $macro149()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, legal, long
 * function declaration
 */
{
	long            i = 1L, recursiveFunction(), result = 0L;

	result = recursiveFunction(i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            result, recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2L || variable != 1L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro150()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, pointer to
 * function returning a long
 */
{
	long            i = 1L, increment(), result = 0L, dummy();

	result = dummy(increment, i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            result, dummy();
	if (--counter) {
		result = dummy(function, variable);
		if (result != 2L || variable != 1L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro151()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, long function declaration
 */
{
	long            recursiveFunction();
	long            i = 1L;

	if (recursiveFunction(i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            recursiveFunction();

	if (--counter)
		if (recursiveFunction(variable) != 2L || variable != 1L)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro152()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, in conditional expression,
 * pointer to function returning a long
 */
{
	long            increment();
	long            i = 1L, dummy();

	if (dummy(increment, i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            dummy();
	if (--counter)
		if (dummy(function, variable) != 2L || variable != 1L)
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro153()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, no return value, legal
 */
{
	long            i = 1L;
	castor(i);
	if (i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	if (--counter) {
		variable++;
		pollux(variable);
		if (variable != 2L)
			statusFlag++;
	}
}

pollux(variable)
	long            variable;
{
	if (--counter) {
		--variable;
		castor(variable);
		if (variable != 1L)
			statusFlag++;
	}
}
@def_
@def $macro154()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, no return value, illegal
 */
{
	long            i = 1L, result;

	result = castor(i);
	if (i != 1L)
		statusFlag++;
	if (result != 0L)
		result = 0L;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	long            ii;

	if (--counter) {
		ii = pollux(variable);
		if (variable != 1L)
			statusFlag++;
		if (variable++ || ii == 0L);
	}
}

pollux(variable)
	long            variable;
{
	long            iii;

	if (--counter) {
		iii = castor(variable);
		if (variable != 1L)
			statusFlag++;
		if (variable++ || iii == 0L);
	}
}
@def_
@def $macro155()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, legal, function declared
 * to return a long
 */
{
	long            i = 1L, castor(), result = 0L;

	result = castor(i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            ii = variable + 3L, pollux(), result = 0L;

	if (--counter) {
		result = pollux(ii);
		if (result != 5L || ii != 4L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            iii = variable - 3L, result = 0L, castor();

	if (--counter) {
		result = castor(iii);
		if (result != 2L || iii != 1L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro156()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, pointer to function
 * returning a long
 */
{
	long            i = 1L, increment(), result = 0L, castor();

	result = castor(increment, i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = variable + 8L, result = 0L, pollux();
	if (--counter) {
		result = pollux(function, ii);
		if (result != 10L || ii != 9L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = variable - 8L, result = 0L, castor();
	if (--counter) {
		result = castor(function, iii);
		if (result != 2L || iii != 1L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro157()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return a long
 */
{
	long            i = 1L, castor();

	if (castor(i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            ii = variable + 3L, pollux();

	if (--counter) {
		if (pollux(ii) != 5L || ii != 4L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            iii = variable - 3L, castor();
	if (--counter) {
		if (castor(iii) != 2L || iii != 1L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro158()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, pointer to
 * function returning a long
 */
{
	long            i = 1L, increment(), castor();

	if (castor(increment, i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = variable + 10L, pollux();
	if (--counter) {
		if (pollux(function, ii) != 12L || ii != 11L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = variable - 10L, castor();
	if (--counter) {
		if (castor(function, iii) != 2L || iii != 1L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro159()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, no return value and legal
 */
{
	static long     i;

	i = 1L;
	levelOneNodeOne(i);
	i = 2L;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 1L)
		statusFlag++;
	variable += 2L;
	levelTwoNodeOne(variable);
	variable++;
	levelTwoNodeTwo(variable);
}

levelOneNodeTwo(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 2L)
		statusFlag++;
	variable += 3L;
	levelTwoNodeThree(variable);
	variable++;
	levelTwoNodeFour(variable);
}

levelTwoNodeOne(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 3L)
		statusFlag++;
	variable += 4L;
	levelThreeLeafOne(variable);
	variable++;
	levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 4L)
		statusFlag++;
	variable += 5L;
	levelThreeLeafThree(variable);
	variable++;
	levelThreeLeafFour(variable);
}

levelTwoNodeThree(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 5L)
		statusFlag++;
	variable += 6L;
	levelThreeLeafFive(variable);
	variable++;
	levelThreeLeafSix(variable);
}

levelTwoNodeFour(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 6L)
		statusFlag++;
	variable += 7L;
	levelThreeLeafSeven(variable);
	variable++;
	levelThreeLeafEight(variable);
}

levelThreeLeafOne(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 7L)
		statusFlag++;
}

levelThreeLeafTwo(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 8L)
		statusFlag++;
}

levelThreeLeafThree(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 9L)
		statusFlag++;
}

levelThreeLeafFour(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 10L)
		statusFlag++;
}

levelThreeLeafFive(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 11L)
		statusFlag++;
}

levelThreeLeafSix(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 12L)
		statusFlag++;
}

levelThreeLeafSeven(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 13L)
		statusFlag++;
}

levelThreeLeafEight(argument)
	long            argument;
{
	static long     variable;

	variable = argument;
	if (variable != 14L)
		statusFlag++;
}
@def_
@def $macro160()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, no return value and illegal
 */
{
	static long     i;
	long            result;

	i = 1L;
	result = levelOneNodeOne(i);
	i = 2L;
	result = levelOneNodeTwo(i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	long            argument;
{
	long            result;
	static long     variable;

	if ((variable = argument) != 1L)
		statusFlag++;
	variable += 2L;
	result = levelTwoNodeOne(variable);
	variable++;
	result = levelTwoNodeTwo(variable);
	if (result == 0L)
		result++;
}

levelOneNodeTwo(argument)
	long            argument;
{
	long            result;
	static long     variable;

	if ((variable = argument) != 2L)
		statusFlag++;
	if (variable != 2L)
		statusFlag++;
	variable += 3L;
	result = levelTwoNodeThree(variable);
	variable++;
	result = levelTwoNodeFour(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeOne(argument)
	long            argument;
{
	long            result;
	static long     variable;

	if ((variable = argument) != 3L)
		statusFlag++;
	variable += 4L;
	result = levelThreeLeafOne(variable);
	variable++;
	result = levelThreeLeafTwo(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeTwo(argument)
	long            argument;
{
	long            result;
	static long     variable;

	if ((variable = argument) != 4L)
		statusFlag++;
	variable += 5L;
	result = levelThreeLeafThree(variable);
	variable++;
	result = levelThreeLeafFour(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeThree(argument)
	long            argument;
{
	long            result;
	static long     variable;

	if ((variable = argument) != 5L)
		statusFlag++;
	variable += 6L;
	result = levelThreeLeafFive(variable);
	variable++;
	result = levelThreeLeafSix(variable);
	if (result == 0L)
		result++;
}

levelTwoNodeFour(argument)
	long            argument;
{
	long            result;
	static long     variable;

	if ((variable = argument) != 6L)
		statusFlag++;
	variable += 7L;
	result = levelThreeLeafSeven(variable);
	variable++;
	result = levelThreeLeafEight(variable);
	if (result == 0L)
		result++;
}

levelThreeLeafOne(argument)
	long            argument;
{
	if (argument != 7L)
		statusFlag++;
	return;
}

levelThreeLeafTwo(argument)
	long            argument;
{
	if (argument != 8L)
		statusFlag++;
	return;
}

levelThreeLeafThree(argument)
	long            argument;
{
	if (argument != 9L)
		statusFlag++;
	return;
}

levelThreeLeafFour(argument)
	long            argument;
{
	if (argument != 10L)
		statusFlag++;
	return;
}

levelThreeLeafFive(argument)
	long            argument;
{
	if (argument != 11L)
		statusFlag++;
	return;
}

levelThreeLeafSix(argument)
	long            argument;
{
	if (argument != 12L)
		statusFlag++;
	return;
}

levelThreeLeafSeven(argument)
	long            argument;
{
	if (argument != 13L)
		statusFlag++;
	return;
}

levelThreeLeafEight(argument)
	long            argument;
{
	if (argument != 14L)
		statusFlag++;
	return;
}
@def_
@def $macro161()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, return value and legal, long function declaration
 */
{
	static long     i = 0L;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = 1L;
	i = levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i = 2L;
	i = levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	static long     storage;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	storage = variable;
	variable = 3L;
	variable = levelTwoNodeOne(variable);
	if (variable != 3L)
		statusFlag++;
	variable = 4L;
	variable = levelTwoNodeTwo(variable);
	if (variable != 4L)
		statusFlag++;
	return (storage);
}

long
levelOneNodeTwo(variable)
	long            variable;
{
	static long     storage;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	storage = variable;
	variable = 5L;
	variable = levelTwoNodeThree(variable);
	if (variable != 5L)
		statusFlag++;
	variable = 6L;
	variable = levelTwoNodeFour(variable);
	if (variable != 6L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	static long     storage;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	storage = variable;
	variable = 7L;
	variable = levelThreeLeafOne(variable);
	if (variable != 7L)
		statusFlag++;
	variable = 8L;
	variable = levelThreeLeafTwo(variable);
	if (variable != 8L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeTwo(variable)
	long            variable;
{
	static long     storage;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	storage = variable;
	variable = 9L;
	variable = levelThreeLeafThree(variable);
	if (variable != 9L)
		statusFlag++;
	variable = 10L;
	variable = levelThreeLeafFour(variable);
	if (variable != 10L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeThree(variable)
	long            variable;
{
	static long     storage;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	storage = variable;
	variable = 11L;
	variable = levelThreeLeafFive(variable);
	if (variable != 11L)
		statusFlag++;
	variable = 12L;
	variable = levelThreeLeafSix(variable);
	if (variable != 12L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeFour(variable)
	long            variable;
{
	static long     storage;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	storage = variable;
	variable = 13L;
	variable = levelThreeLeafSeven(variable);
	if (variable != 13L)
		statusFlag++;
	variable = 14L;
	variable = levelThreeLeafEight(variable);
	if (variable != 14L)
		statusFlag++;
	return (storage);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafTwo(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafThree(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafFour(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafFive(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafSix(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafSeven(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafEight(variable)
	long            variable;
{
	return (variable);
}
@def_
@def $macro162()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, return value, legal pointer to function returning a long
 */
{
	static long     i;
	long            divide4(), dummy1();

	i = 12L;
	i = dummy1(divide4, i);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro163()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, used in conditional expression, long function declaration
 */
{
	static long     i = 1;
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	static long     ii;
	long            levelTwoNodeOne();

	ii = 2 * variable;
	return (2 * levelTwoNodeOne(ii));
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	static long     iii;
	long            levelThreeLeafOne();

	iii = 2 * variable;
	return (2 * levelThreeLeafOne(iii));
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable);
}
@def_
@def $macro164()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, in conditional expression, pointer to function returning a
 * long
 */
{
	static long     i;
	long            divide4(), dummy1();

	i = 12L;
	if (dummy1(divide4, i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	static long     ii;

	if ((ii = (*func) (Long)) != 3L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	static long     ii;

	if ((ii = (*func) (Long)) != 6L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro165()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, no return value, legal
 */
{
	static long     i;

	i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	static long     ii;

	ii = variable;
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(ii);
}
@def_
@def $macro166()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, no return value, illegal
 */
{
	static long     i = 1L;

	i = recursiveFunction(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	static long     ii;
	long            result;

	if ((ii = variable) != 1L)
		statusFlag++;
	if (--counter) {
		result = recursiveFunction(ii);
		if (result == 0L)
			result++;
	}
	return;
}
@def_
@def $macro167()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, legal, long function declaration
 */
{
	static long     i = 1L;
	long            recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	static long     ii;
	long            result;
	long            recursiveFunction();

	ii = variable;
	if (--counter) {
		result = recursiveFunction(ii);
		if (result != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro168()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, pointer to function returning a long
 */
{
	static long     i = 1L;
	long            increment(), dummy();

	i = dummy(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	static long     ii;
	long            result, dummy();

	ii = variable;
	if (--counter) {
		result = dummy(function, ii);
		if (result != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro169()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, function in conditional expression, long function declaration
 */
{
	long            recursiveFunction();
	static long     i = 1L;

	if (!(recursiveFunction(i) - i == 1L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            recursiveFunction();
	static long     ii;

	ii = variable;
	if (--counter)
		if (!(recursiveFunction(ii) - variable == 1L))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro170()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, in conditional expression, pointer to function returning a long
 */
{
	long            increment(), dummy();
	static long     i = 1L;

	if (!(dummy(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	static long     ii;
	long            dummy();

	ii = variable;
	if (--counter)
		if (!(dummy(function, ii) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro171()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, no return value, legal
 */
{
	static long     i = 1L;
	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	static long     ii;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		ii = variable + 1L;
		pollux(ii);
	}
}

pollux(variable)
	long            variable;
{
	static long     iii;

	if (variable != 2L)
		statusFlag++;
	if (--counter) {
		iii = variable - 1L;
		castor(iii);
	}
}
@def_
@def $macro172()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, no return value, illegal
 */
{
	static long     i = 1L;

	i = castor(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	static long     ii;
	long            result;

	if ((ii = variable) != 1L)
		statusFlag++;
	if (--counter) {
		result = pollux(ii);
		if (result == 0L)
			result++;
	}
}

pollux(variable)
	long            variable;
{
	static long     iii;
	long            result;

	if ((iii = variable) != 1L)
		statusFlag++;
	if (--counter) {
		result = castor(iii);
		if (result == 0L)
			result++;
	}
}
@def_
@def $macro173()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, legal, function declared to return a long
 */
{
	static long     i = 1L;
	long            castor();

	i = castor(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	static long     ii;
	long            pollux();

	ii = variable + 3L;
	if (--counter) {
		ii = pollux(ii);
		if (ii != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	static long     iii;
	long            castor();

	iii = variable - 3L;
	if (--counter) {
		iii = castor(iii);
		if (iii != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro174()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, pointer to function returning a long
 */
{
	static long     i = 1L;
	long            increment(), castor();

	i = castor(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	static long     ii;
	long            pollux();

	ii = variable + 8L;
	if (--counter) {
		ii = pollux(function, ii);
		if (ii != 10L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	static long     iii;
	long            castor();

	iii = variable - 8L;
	if (--counter) {
		iii = castor(function, iii);
		if (iii != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro175()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, function declared to return a long
 */
{
	static long     i = 1L;
	long            castor();

	if (!(castor(i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	static long     ii;
	long            pollux();

	ii = variable + 3L;
	if (--counter) {
		if (!(pollux(ii) == 5L))
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	static long     iii;
	long            castor();

	iii = variable - 3L;
	if (--counter) {
		if (!(castor(iii) == 2L))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro176()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, pointer to function returning a long
 */
{
	static long     i = 1L;
	long            increment(), castor();

	if (!(castor(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	static long     ii;
	long            pollux();

	ii = variable + 10L;
	if (--counter) {
		if (!(pollux(function, ii) == 12L))
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	static long     iii;
	long            castor();

	iii = variable - 10L;
	if (--counter) {
		if (!(castor(function, iii) == 2L))
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro177()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, no return value and legal
 */
{
	static long     i = 0L;
	i = 1L;
	levelOneNodeOne(i);
	i = 2L;
	levelOneNodeTwo(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 3L;
	levelTwoNodeOne(i);
	i = 4L;
	levelTwoNodeTwo(i);
	variable++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 5L;
	levelTwoNodeThree(i);
	i = 6L;
	levelTwoNodeFour(i);
	variable++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 7L;
	levelThreeLeafOne(i);
	i = 8L;
	levelThreeLeafTwo(i);
	variable++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 9L;
	levelThreeLeafThree(i);
	i = 10L;
	levelThreeLeafFour(i);
	variable++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 11L;
	levelThreeLeafFive(i);
	i = 12L;
	levelThreeLeafSix(i);
	variable++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	i = 13L;
	levelThreeLeafSeven(i);
	i = 14L;
	levelThreeLeafEight(i);
	variable++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	static long     i = 0L;
	if (i != 0L)
		statusFlag++;
	variable++;
}
@def_
@def $macro178()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, no return value and illegal
 */
{
	static long     i;

	i = 1L;
	i = levelOneNodeOne(i);
	i = 2L;
	i = levelOneNodeTwo(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	static long     i;

	if (variable != 1L || i != 0L)
		statusFlag++;
	i = 3L;
	i = levelTwoNodeOne(i);
	i = 4L;
	i = levelTwoNodeTwo(i);
}

levelOneNodeTwo(variable)
	long            variable;
{
	static long     i;

	if (variable != 2L || i != 0L)
		statusFlag++;
	i = 5L;
	i = levelTwoNodeThree(i);
	i = 6L;
	i = levelTwoNodeFour(i);
}

levelTwoNodeOne(variable)
	long            variable;
{
	static long     i;

	if (variable != 3L || i != 0L)
		statusFlag++;
	i = 7L;
	i = levelThreeLeafOne(i);
	i = 8L;
	i = levelThreeLeafTwo(i);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	static long     i;

	if (variable != 4L || i != 0L)
		statusFlag++;
	i = 9L;
	i = levelThreeLeafThree(i);
	i = 10L;
	i = levelThreeLeafFour(i);
}

levelTwoNodeThree(variable)
	long            variable;
{
	static long     i;

	if (variable != 5L || i != 0L)
		statusFlag++;
	i = 11L;
	i = levelThreeLeafFive(i);
	i = 12L;
	i = levelThreeLeafSix(i);
}

levelTwoNodeFour(variable)
	long            variable;
{
	static long     i;

	if (variable != 6L || i != 0L)
		statusFlag++;
	i = 13L;
	i = levelThreeLeafSeven(i);
	i = 14L;
	i = levelThreeLeafEight(i);
}

levelThreeLeafOne(variable)
	long            variable;
{
	static long     i;

	if (variable != 7L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	static long     i;

	if (variable != 8L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafThree(variable)
	long            variable;
{
	static long     i;

	if (variable != 9L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafFour(variable)
	long            variable;
{
	static long     i;

	if (variable != 10L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafFive(variable)
	long            variable;
{
	static long     i;

	if (variable != 11L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafSix(variable)
	long            variable;
{
	static long     i;

	if (variable != 12L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	static long     i;

	if (variable != 13L || i != 0L)
		statusFlag++;
	return;
}

levelThreeLeafEight(variable)
	long            variable;
{
	static long     i;

	if (variable != 14L || i != 0L)
		statusFlag++;
	return;
}
@def_
@def $macro179()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, return value and legal, long function
 * declaration
 */
{
	static long     i = 1L;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i++;
	i = levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	static long     i = 3L;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	if (variable != 1L)
		statusFlag++;
	i = levelTwoNodeOne(i);
	if (i != 3L)
		statusFlag++;
	i++;
	i = levelTwoNodeTwo(i);
	if (i != 4L)
		statusFlag++;
	return (variable);
}

long
levelOneNodeTwo(variable)
	long            variable;
{
	static long     i = 5L;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	if (variable != 2L)
		statusFlag++;
	i = levelTwoNodeThree(i);
	if (i != 5L)
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
	if (i != 6L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	static long     i = 7L;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	if (variable != 3L)
		statusFlag++;
	i = levelThreeLeafOne(i);
	if (i != 7L)
		statusFlag++;
	i++;
	i = levelThreeLeafTwo(i);
	if (i != 8L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeTwo(variable)
	long            variable;
{
	static long     i = 9L;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	if (variable != 4L)
		statusFlag++;
	i = levelThreeLeafThree(i);
	if (i != 9L)
		statusFlag++;
	i++;
	i = levelThreeLeafFour(i);
	if (i != 10L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeThree(variable)
	long            variable;
{
	static long     i = 11L;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	if (variable != 5L)
		statusFlag++;
	i = levelThreeLeafFive(i);
	if (i != 11L)
		statusFlag++;
	i++;
	i = levelThreeLeafSix(i);
	if (i != 12L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeFour(variable)
	long            variable;
{
	static long     i = 13L;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	if (variable != 6L)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	if (i != 13L)
		statusFlag++;
	i++;
	i = levelThreeLeafEight(i);
	if (i != 14L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
	return (variable);
}
@def_
@def $macro180()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, return value, legal pointer to function returning
 * a long
 */
{
	static long     i = 12L;
	long            divide4(), dummy1();

	i = dummy1(divide4, i);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro181()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, used in conditional expression, long function
 * declaration
 */
{
	static long     i = 1L;
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	static long     i;
	long            levelTwoNodeOne();

	if (i == 1L)
		statusFlag++;
	i = 2L * variable;
	return (2 * levelTwoNodeOne(i));
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	static long     i;
	long            levelThreeLeafOne();

	if (i == 2L)
		statusFlag++;
	i = 2L * variable;
	return (2 * levelThreeLeafOne(i));
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	static long     i;

	if (i == 4L)
		statusFlag++;
	return (2 * variable);
}
@def_
@def $macro182()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, in conditional expression, pointer to function
 * returning a long
 */
{
	static long     i;
	long            divide4(), dummy1();

	i = 12L;
	if (dummy1(divide4, i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	if (i == 12L)
		statusFlag++;
	if ((i = (*func) (Long)) != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	if (i == 12L)
		statusFlag++;
	if ((i = (*func) (Long)) != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro183()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, no return value, legal
 */
{
	static long     i = 1L;
	recursiveFunction(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	static long     i;
	if (i == variable)
		statusFlag++;
	if (--counter)
		recursiveFunction(++variable);
}
@def_
@def $macro184()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, no return value, illegal
 */
{
	static long     i = 1L;

	i = recursiveFunction(i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	static long     i = 1L;
	long            result;

	if (variable != 1L || ++i != 2L)
		statusFlag++;
	i = variable;
	if (--counter) {
		result = recursiveFunction(i);
		if (result == 0L)
			result++;
	}
	return;
}
@def_
@def $macro185()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, return value, legal, long function declaration
 */
{
	static long     i = 1L;
	long            recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	static long     i;
	long            recursiveFunction();

	if (i != 0L)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(variable);
		if (i != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro186()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, return value, pointer to function returning a long
 */
{
	static long     i = 1L;
	long            increment(), dummy();

	i = dummy(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	static long     i;
	long            dummy();

	if (i != 0L)
		statusFlag++;
	if (--counter) {
		i = dummy(function, variable);
		if (i != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro187()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, function in conditional expression, long function
 * declaration
 */
{
	static long     i = 1L;
	long            recursiveFunction();

	if (!(recursiveFunction(i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	static long     i = 1L;
	long            recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(i) == 2L))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro188()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, in conditional expression, pointer to function returning
 * a long
 */
{
	static long     i = 1L;
	long            increment(), dummy();

	if (!(dummy(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	static long     i;
	long            dummy();

	if (i != 0L)
		statusFlag++;
	if (--counter)
		if (!(dummy(function, variable) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro189()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, no return value, legal
 */
{
	static long     i = 1L;

	castor(i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	static long     i;

	i = variable + 1L;
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		pollux(i);
}

pollux(variable)
	long            variable;
{
	static long     i;

	i = variable - 1L;
	if (variable != 2L)
		statusFlag++;
	if (--counter)
		castor(i);
}
@def_
@def $macro190()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            whatIsThis;

main()
/*
 * test class: static variable, doubled instance  : gemini, no return value, illegal
 */
{
	static long     i = 1L;

	whatIsThis = castor(i);
	if (whatIsThis == 0L)
		whatIsThis++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	static long     i;

	if (variable != 1L || counter < 10L && i != 2L)
		statusFlag++;
	i = variable + 1L;
	if (--counter) {
		whatIsThis = pollux(i);
		if (whatIsThis == 0L);
	}
}

pollux(variable)
	long            variable;
{
	static long     i;

	if (variable != 2L || counter < 9L && i != 1L)
		statusFlag++;
	i = variable - 1L;
	if (--counter) {
		whatIsThis = castor(i);
		if (whatIsThis == 0L);
	}
}
@def_
@def $macro191()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, legal, function declared to return a long
 */
{
	static long     i = 1L;
	long            castor();

	i = castor(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	static long     i;
	long            pollux();

	i = variable + 3L;
	if (--counter) {
		i = pollux(i);
		if (i != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	static long     i;
	long            castor();

	i = variable - 3L;
	if (--counter) {
		i = castor(i);
		if (i != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro192()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, pointer to function returning a long
 */
{
	static long     i = 1L;
	long            increment();
	long            castor();

	i = castor(increment, i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	static long     i;
	long            pollux();

	i = variable + 8L;
	if (--counter) {
		i = pollux(function, i);
		if (i != 10L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	static long     i;
	long            castor();

	i = variable - 8L;
	if (--counter) {
		i = castor(function, i);
		if (i != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro193()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, function declared to return a long
 */
{
	static long     i = 1L;
	long            castor();

	if (!(castor(i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	static long     i;
	long            pollux();

	i = variable + 3L;
	if (--counter)
		if (!(pollux(i) == 5L))
			statusFlag++;
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	static long     i;
	long            castor();

	i = variable - 3L;
	if (--counter)
		if (!(castor(i) == 2L))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro194()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, pointer to function returning a long
 */
{
	static long     i = 1L;
	long            increment();
	long            castor();

	if (!(castor(increment, i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	static long     i;
	long            pollux();

	i = variable + 8L;
	if (--counter)
		if (!(pollux(function, i) == 10L))
			statusFlag++;
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	static long     i;
	long            castor();

	i = variable - 8L;
	if (--counter)
		if (!(castor(function, i) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro195()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, no return value and legal
 */
{
	static long     i;

	i = 1;
	levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i = 2;
	levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	static long     i11 = 3;

	variable++;
	levelTwoNodeOne(i11);
	if (i11 != 3L)
		statusFlag++;
	i11++;
	levelTwoNodeTwo(i11);
	if (i11 != 4L)
		statusFlag++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	static long     i12 = 5;

	variable++;
	levelTwoNodeThree(i12);
	if (i12 != 5L)
		statusFlag++;
	i12++;
	levelTwoNodeFour(i12);
	if (i12 != 6L)
		statusFlag++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	static long     i21 = 7;

	variable++;
	levelThreeLeafOne(i21);
	if (i21 != 7L)
		statusFlag++;
	i21++;
	levelThreeLeafTwo(i21);
	if (i21 != 8L)
		statusFlag++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	static long     i22 = 9;

	variable++;
	levelThreeLeafThree(i22);
	if (i22 != 9L)
		statusFlag++;
	i22++;
	levelThreeLeafFour(i22);
	if (i22 != 10L)
		statusFlag++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	static long     i23 = 11;

	variable++;
	levelThreeLeafFive(i23);
	if (i23 != 11L)
		statusFlag++;
	i23++;
	levelThreeLeafSix(i23);
	if (i23 != 12L)
		statusFlag++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	static long     i24 = 13;

	variable++;
	levelThreeLeafSeven(i24);
	if (i24 != 13L)
		statusFlag++;
	i24++;
	levelThreeLeafEight(i24);
	if (i24 != 14L)
		statusFlag++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	variable++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	variable++;
}
@def_
@def $macro196()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, no return value and
 * illegal
 */
{
	static long     i = 0, result;

	i = 1;
	result = levelOneNodeOne(i);
	if (i != 1L)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(i);
	if (i != 2L)
		statusFlag++;
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	static long     i11 = 3;
	long            result;

	result = levelTwoNodeOne(i11);
	if (variable != 1L || i11 != 3L)
		statusFlag++;
	i11++;
	result = levelTwoNodeTwo(i11);
	if (i11 != 4L)
		statusFlag++;
	if (result == 0L)
		result++;
}

levelOneNodeTwo(variable)
	long            variable;
{
	static long     i12 = 5;
	long            result;

	result = levelTwoNodeThree(i12);
	if (variable != 2L || i12 != 5L)
		statusFlag++;
	i12++;
	result = levelTwoNodeFour(i12);
	if (i12 != 6L)
		statusFlag++;
	if (result == 0L)
		result++;
}

levelTwoNodeOne(variable)
	long            variable;
{
	static long     i21 = 7;
	long            result;

	result = levelThreeLeafOne(i21);
	if (variable != 3L || i21 != 7L)
		statusFlag++;
	i21++;
	result = levelThreeLeafTwo(i21);
	if (i21 != 8L)
		statusFlag++;
	if (result == 0L)
		result++;
}

levelTwoNodeTwo(variable)
	long            variable;
{
	static long     i22 = 9;
	long            result;

	result = levelThreeLeafThree(i22);
	if (variable != 4L || i22 != 9L)
		statusFlag++;
	i22++;
	result = levelThreeLeafFour(i22);
	if (i22 != 10L)
		statusFlag++;
	if (result == 0L)
		result++;
}

levelTwoNodeThree(variable)
	long            variable;
{
	static long     i23 = 11;
	long            result;

	result = levelThreeLeafFive(i23);
	if (variable != 5L || i23 != 11L)
		statusFlag++;
	i23++;
	result = levelThreeLeafSix(i23);
	if (i23 != 12L)
		statusFlag++;
	if (result == 0L)
		result++;
}

levelTwoNodeFour(variable)
	long            variable;
{
	static long     i24 = 13;
	long            result;

	result = levelThreeLeafSeven(i24);
	if (variable != 6L || i24 != 13L)
		statusFlag++;
	i24++;
	result = levelThreeLeafEight(i24);
	if (i24 != 14L)
		statusFlag++;
	if (result == 0L)
		result++;
}

levelThreeLeafOne(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafThree(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafFour(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafFive(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafSix(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	variable++;
	return;
}

levelThreeLeafEight(variable)
	long            variable;
{
	variable++;
	return;
}
@def_
@def $macro197()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, return value, legal pointer
 * to function returning a long
 */
{
	static long     i;
	long            divide4(), result = 0, dummy1();

	i = 12;
	result = dummy1(divide4, i);
	if (i != 12L || result != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	i = (*func) (Long);
	if (i != 3L || Long != 12L)
		statusFlag++;
	Long++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	static long     i;

	i = (*func) (Long);
	if (i != 6L || Long != 12L)
		statusFlag++;
	Long++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro198()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, long function declaration
 */
{
	static long     i = 1;
	long            levelOneNodeOne();

	if (levelOneNodeOne(i) != 32L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	static long     ii;
	long            levelTwoNodeOne(), result = 0;

	ii = 2 * variable++;
	result = 2 * levelTwoNodeOne(ii);
	if (ii != 2L)
		statusFlag++;
	return (result);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	static long     iii;
	long            levelThreeLeafOne(), result = 0;

	iii = 2 * variable++;
	result = 2 * levelThreeLeafOne(iii);
	if (iii != 4L)
		statusFlag++;
	return (result);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable++);
}
@def_
@def $macro199()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, in conditional expression,
 * pointer to function returning a long
 */
{
	static long     i;
	long            divide4(), dummy1();

	i = 12;
	if (dummy1(divide4, i) != 3L || i != 12L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	static long     ii;

	if ((ii = (*func) (Long)) != 3L || Long != 12L)
		statusFlag++;
	Long++;
	return (ii);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	static long     iii;

	if ((iii = (*func) (Long)) != 6L || Long != 12L)
		statusFlag++;
	Long++;
	return (iii);
}

long
divide2(Long)
	long            Long;
{
	return (Long++ / 2);
}
@def_
@def $macro200()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, no return value, legal
 */
{
	static long     i;

	i = 1;
	recursiveFunction(i);
	if (i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	static long     ii;

	ii = variable++;
	if (--counter) {
		recursiveFunction(ii);
		if (ii != 1L)
			statusFlag++;
	}
}
@def_
@def $macro201()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, no return value, illegal
 */
{
	static long     i = 1;
	long            result;
	result = recursiveFunction(i);
	if (i != 1L)
		statusFlag++;
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	static long     ii = 1;
	long            result;

	if (--counter) {
		result = recursiveFunction(ii);
		if (result == 0L)
			result++;
		if (ii != 1L)
			statusFlag++;
		variable++;
	}
	return;
}
@def_
@def $macro202()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, legal, long function
 * declaration
 */
{
	static long     i = 1;
	long            recursiveFunction(), result = 0;

	result = recursiveFunction(i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            result, recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2L || variable != 1L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro203()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, pointer to function
 * returning a long
 */
{
	static long     i = 1;
	long            increment(), result = 0, dummy();

	result = dummy(increment, i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            result, dummy();
	if (--counter) {
		result = dummy(function, variable);
		if (result != 2L || variable != 1L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro204()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, long function declaration
 */
{
	long            recursiveFunction();
	static long     i = 1;

	if (recursiveFunction(i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            recursiveFunction();

	if (--counter)
		if (recursiveFunction(variable) != 2L || variable != 1L)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro205()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, in conditional expression, pointer
 * to function returning a long
 */
{
	long            increment();
	static long     i = 1;
	long            dummy();

	if (dummy(increment, i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            dummy();
	if (--counter)
		if (dummy(function, variable) != 2L || variable != 1L)
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro206()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, no return value, legal
 */
{
	static long     i = 1;

	castor(i);
	if (i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	if (--counter) {
		variable++;
		pollux(variable);
		if (variable != 2L)
			statusFlag++;
	}
}

pollux(variable)
	long            variable;
{
	if (--counter) {
		--variable;
		castor(variable);
		if (variable != 1L)
			statusFlag++;
	}
}
@def_
@def $macro207()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, no return value, illegal
 */
{
	static long     i = 1;
	long            result;

	result = castor(i);
	if (i != 1L)
		statusFlag++;
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	static long     ii = 1;
	long            result;

	ii = variable++;
	if (--counter) {
		result = pollux(ii);
		if (variable != 2L || ii != 1L)
			statusFlag++;
		if (result == 0L)
			result++;
	}
}

pollux(variable)
	long            variable;
{
	static long     iii = 1;
	long            result;

	iii = variable++;
	if (--counter) {
		result = castor(iii);
		if (variable != 2L || iii != 1L)
			statusFlag++;
		if (result == 0L)
			result++;
	}
}
@def_
@def $macro208()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, legal, function declared to
 * return a long
 */
{
	static long     i = 1;
	long            castor(), result = 0;

	result = castor(i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            ii = variable + 3, pollux(), result = 0;

	if (--counter) {
		result = pollux(ii);
		if (result != 5L || ii != 4L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            iii = variable - 3, result = 0;
	long            castor();

	if (--counter) {
		result = castor(iii);
		if (result != 2L || iii != 1L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro209()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, pointer to function
 * returning a long
 */
{
	static long     i = 1;
	long            increment(), result = 0;
	long            castor();

	result = castor(increment, i);
	if (result != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = variable + 8, result = 0;
	long            pollux();
	if (--counter) {
		result = pollux(function, ii);
		if (result != 10L || ii != 9L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = variable - 8, result = 0;
	long            castor();
	if (--counter) {
		result = castor(function, iii);
		if (result != 2L || iii != 1L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro210()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return a long
 */
{
	static long     i = 1;
	long            castor();

	if (castor(i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	static long     ii;
	long            pollux();

	ii = variable + 3;
	if (--counter) {
		if (pollux(ii) != 5L || ii != 4L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	static long     iii;
	long            castor();

	iii = variable - 3;
	if (--counter) {
		if (castor(iii) != 2L || iii != 1L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro211()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, pointer to
 * function returning a long
 */
{
	static long     i = 1;
	long            increment();
	long            castor();

	if (castor(increment, i) != 2L || i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	static long     ii;
	long            pollux();

	ii = variable + 10;
	if (--counter) {
		if (pollux(function, ii) != 12L || ii != 11L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	static long     iii;
	long            castor();

	iii = variable - 10;
	if (--counter) {
		if (castor(function, iii) != 2L || iii != 1L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro212()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, return value and legal, no function declaration
 */
{
	short           i = 0;

	i = 1;
	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	i = 2;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           storage = variable;

	variable += 2;
	variable = levelTwoNodeOne(variable);
	if (variable != 3)
		statusFlag++;
	variable++;
	variable = levelTwoNodeTwo(variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable += 3;
	variable = levelTwoNodeThree(variable);
	if (variable != 5)
		statusFlag++;
	variable++;
	variable = levelTwoNodeFour(variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           storage = variable;

	variable += 4;
	variable = levelThreeLeafOne(variable);
	if (variable != 7)
		statusFlag++;
	variable++;
	variable = levelThreeLeafTwo(variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable += 5;
	variable = levelThreeLeafThree(variable);
	if (variable != 9)
		statusFlag++;
	variable++;
	variable = levelThreeLeafFour(variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           storage = variable;

	variable += 6;
	variable = levelThreeLeafFive(variable);
	if (variable != 11)
		statusFlag++;
	variable++;
	variable = levelThreeLeafSix(variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           storage = variable;

	variable += 7;
	variable = levelThreeLeafSeven(variable);
	if (variable != 13)
		statusFlag++;
	variable++;
	variable = levelThreeLeafEight(variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro213()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, return value and legal, integer function declaration
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	i = 2;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           storage = variable;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	variable = 3;
	variable = levelTwoNodeOne(variable);
	if (variable != 3)
		statusFlag++;
	variable = 4;
	variable = levelTwoNodeTwo(variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	short           storage = variable;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	variable = 5;
	variable = levelTwoNodeThree(variable);
	if (variable != 5)
		statusFlag++;
	variable = 6;
	variable = levelTwoNodeFour(variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	variable = 7;
	variable = levelThreeLeafOne(variable);
	if (variable != 7)
		statusFlag++;
	variable = 8;
	variable = levelThreeLeafTwo(variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	variable = 9;
	variable = levelThreeLeafThree(variable);
	if (variable != 9)
		statusFlag++;
	variable = 10;
	variable = levelThreeLeafFour(variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	variable = 11;
	variable = levelThreeLeafFive(variable);
	if (variable != 11)
		statusFlag++;
	variable = 12;
	variable = levelThreeLeafSix(variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	variable = 13;
	variable = levelThreeLeafSeven(variable);
	if (variable != 13)
		statusFlag++;
	variable = 14;
	variable = levelThreeLeafEight(variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro214()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, return value and legal, function declared to return a
 * pointer to character
 */
{
	char           *s, *levelOne();
	short           i;

	i = 1;
	s = levelOne(i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	short           j;

	if (variable != 1)
		statusFlag++;
	j = 2;
	s = levelTwo(j);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	short           k;

	if (variable != 2)
		statusFlag++;
	k = 3;
	s = levelThree(k);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	short           l;

	if (variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < variable; l++, s++);
	return (s);
}
@def_
@def $macro215()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, return value, legal pointer to function returning an
 * integer
 */
{
	short           i, divide4();

	i = 12;
	i = dummy1(divide4, i);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro216()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, used in conditional expression, no function
 * declaration
 */
{
	short           i = 1, j;

	j = i++;
	if (!(levelOneNodeOne(j) + levelOneNodeTwo(i) == 44))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           ii, jj;
	jj = (ii = ++variable) + 1;
	return (levelTwoNodeOne(ii) + levelTwoNodeTwo(jj));
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           iii, jjj;
	jjj = (iii = ++variable) + 1;
	return (levelTwoNodeThree(iii) + levelTwoNodeFour(jjj));
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           iiii, jjjj;
	jjjj = (iiii = ++variable) + 1;
	return (levelThreeLeafOne(iiii) + levelThreeLeafTwo(jjjj));
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           iiiii, jjjjj;
	jjjjj = (iiiii = ++variable) + 1;
	return (levelThreeLeafThree(iiiii) + levelThreeLeafFour(jjjjj));
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           iiiiii, jjjjjj;
	jjjjjj = (iiiiii = ++variable) + 1;
	return (levelThreeLeafFive(iiiiii) + levelThreeLeafSix(jjjjjj));
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           iiiiiii, jjjjjjj;
	jjjjjjj = (iiiiiii = ++variable) + 1;
	return (levelThreeLeafSeven(iiiiiii) + levelThreeLeafEight(jjjjjjj));
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro217()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, used in conditional expression, integer function
 * declaration
 */
{
	short           i = 1, levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           ii, levelTwoNodeOne();

	ii = 2 * variable;
	return (2 * levelTwoNodeOne(ii));
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           iii, levelThreeLeafOne();

	iii = 2 * variable;
	return (2 * levelThreeLeafOne(iii));
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable);
}
@def_
@def $macro218()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: automatic variable instance  : linear tree structure, used in conditional expression, function declared to
 * return a pointer to character
 */
{
	char            i = 4, j, *skip();

	j = 2 * i;
	if (compare(skip(i), "andra", 5) == compare(skip(j), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	short           ii;
	char           *pointer;

	for (ii = 0, pointer = protean; ii < skipper; ii++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro219()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable instance  : linear tree structure, in conditional expression, pointer to function
 * returning an integer
 */
{
	short           i, divide4();

	i = 12;
	if (dummy1(divide4, i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 3)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 6)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro220()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, legal, no function declaration
 */
{
	short           i = 1;

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	short           result;

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro221()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, legal, integer function declaration
 */
{
	short           i = 1;
	short           recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           result;
	short           recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro222()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable instance  : recursive call, return value, function declared to return a pointer to
 * character
 */
{
	char           *s, *recursiveFunction();
	short           i = 2;

	s = recursiveFunction(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(variable);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro223()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, return value, pointer to function returning an integer
 */
{
	short           i = 1, increment();

	i = dummy(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           result;
	if (--counter) {
		result = dummy(function, variable);
		if (result != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro224()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, function in conditional expression, no function declaration
 */
{
	short           i = 1;

	if (!(recursiveFunction(i) - i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (!(recursiveFunction(variable) - variable == 1))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro225()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, function in conditional expression, integer function
 * declaration
 */
{
	short           recursiveFunction();
	short           i = 1;

	if (!(recursiveFunction(i) - i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(variable) - variable == 1))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro226()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable instance  : recursive call, in conditional expression, function declared to return a
 * pointer to character
 */
{
	char           *recursiveFunction();
	short           i = 2;

	if (!(*recursiveFunction(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (!(*recursiveFunction(variable) == '2'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro227()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : recursive call, in conditional expression, pointer to function returning an
 * integer
 */
{
	short           increment();
	short           i = 1;

	if (!(dummy(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	if (--counter)
		if (!(dummy(function, variable) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro228()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, legal, no function declaration
 */
{
	short           i = 1;

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = variable + 3;

	if (--counter) {
		ii = pollux(ii);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = variable - 3;

	if (--counter) {
		iii = castor(iii);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro229()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, legal, function declared to return an integer
 */
{
	short           i = 1, castor();

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           ii = variable + 3, pollux();

	if (--counter) {
		ii = pollux(ii);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           iii = variable - 3;

	if (--counter) {
		iii = castor(iii);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro230()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable instance  : gemini, return value, function declared to return a pointer to character
 */
{
	char           *s, *castor();
	short           i = 2;

	s = castor(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	short           ii = variable + 4;
	char           *s, *pollux();

	if (--counter) {
		s = pollux(ii);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	short           iii = variable - 4;
	char           *s;

	if (--counter) {
		s = castor(iii);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro231()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, return value, pointer to function returning an integer
 */
{
	short           i = 1, increment();

	i = castor(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = variable + 8;
	if (--counter) {
		ii = pollux(function, ii);
		if (ii != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = variable - 8;
	if (--counter) {
		iii = castor(function, iii);
		if (iii != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro232()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, no function declaration
 */
{
	short           i = 1;

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = variable + 3;
	if (--counter) {
		if (!(pollux(ii) == 5))
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = variable - 3;
	if (--counter) {
		if (!(castor(iii) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro233()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, function declared to return an integer
 */
{
	short           i = 1, castor();

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           ii = variable + 3, pollux();

	if (--counter) {
		if (!(pollux(ii) == 5))
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           iii = variable - 3;
	if (--counter) {
		if (!(castor(iii) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro234()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, function declared to return a pointer to
 * character
 */
{
	char           *castor();
	short           i = 2;

	if (!(*castor(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	short           ii = variable + 4;

	if (--counter) {
		if (!(*pollux(ii) == '6'))
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	short           iii = variable - 4;
	if (--counter) {
		if (!(*castor(iii) == '2'))
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro235()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable instance  : gemini, in conditional expression, pointer to function returning an integer
 */
{
	short           i = 1, increment();

	if (!(castor(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = variable + 10;
	if (--counter) {
		if (!(pollux(function, ii) == 12))
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = variable - 10;
	if (--counter) {
		if (!(castor(function, iii) == 2))
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro236()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, return value and legal, no function
 * declaration
 */
{
	short           i = 1;

	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	++i;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           i = variable + 2;

	if (variable != 1)
		statusFlag++;
	i = levelTwoNodeOne(i);
	if (i != 3)
		statusFlag++;
	++i;
	i = levelTwoNodeTwo(i);
	if (i != 4)
		statusFlag++;
	return (variable);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           i = variable + 3;

	if (variable != 2)
		statusFlag++;
	i = levelTwoNodeThree(i);
	if (i != 5)
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
	if (i != 6)
		statusFlag++;
	return (variable);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           i = variable + 4;

	if (variable != 3)
		statusFlag++;
	i = levelThreeLeafOne(i);
	if (i != 7)
		statusFlag++;
	++i;
	i = levelThreeLeafTwo(i);
	if (i != 8)
		statusFlag++;
	return (variable);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           i = variable + 5;

	if (variable != 4)
		statusFlag++;
	i = levelThreeLeafThree(i);
	if (i != 9)
		statusFlag++;
	++i;
	i = levelThreeLeafFour(i);
	if (i != 10)
		statusFlag++;
	return (variable);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           i = variable + 6;

	if (variable != 5)
		statusFlag++;
	i = levelThreeLeafFive(i);
	if (i != 11)
		statusFlag++;
	++i;
	i = levelThreeLeafSix(i);
	if (i != 12)
		statusFlag++;
	return (variable);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           i = variable + 7;

	if (variable != 6)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	if (i != 13)
		statusFlag++;
	++i;
	i = levelThreeLeafEight(i);
	if (i != 14)
		statusFlag++;
	return (variable);
}

levelThreeLeafOne(variable)
	short           variable;
{
	if (variable != 7)
		statusFlag++;
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	if (variable != 8)
		statusFlag++;
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	if (variable != 9)
		statusFlag++;
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	if (variable != 10)
		statusFlag++;
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	if (variable != 11)
		statusFlag++;
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	if (variable != 12)
		statusFlag++;
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	if (variable != 13)
		statusFlag++;
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	if (variable != 14)
		statusFlag++;
	return (variable);
}
@def_
@def $macro237()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, return value and legal, integer function
 * declaration
 */
{
	short           i = 1;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	i++;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           i = 3;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	if (variable != 1)
		statusFlag++;
	i = levelTwoNodeOne(i);
	if (i != 3)
		statusFlag++;
	i++;
	i = levelTwoNodeTwo(i);
	if (i != 4)
		statusFlag++;
	return (variable);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	short           i = 5;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	if (variable != 2)
		statusFlag++;
	i = levelTwoNodeThree(i);
	if (i != 5)
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
	if (i != 6)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           i = 7;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	if (variable != 3)
		statusFlag++;
	i = levelThreeLeafOne(i);
	if (i != 7)
		statusFlag++;
	i++;
	i = levelThreeLeafTwo(i);
	if (i != 8)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	short           i = 9;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	if (variable != 4)
		statusFlag++;
	i = levelThreeLeafThree(i);
	if (i != 9)
		statusFlag++;
	i++;
	i = levelThreeLeafFour(i);
	if (i != 10)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	short           i = 11;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	if (variable != 5)
		statusFlag++;
	i = levelThreeLeafFive(i);
	if (i != 11)
		statusFlag++;
	i++;
	i = levelThreeLeafSix(i);
	if (i != 12)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	short           i = 13;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	if (variable != 6)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	if (i != 13)
		statusFlag++;
	i++;
	i = levelThreeLeafEight(i);
	if (i != 14)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	if (variable != 7)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	if (variable != 8)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	if (variable != 9)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	if (variable != 10)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	if (variable != 11)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	if (variable != 12)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	if (variable != 13)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	if (variable != 14)
		statusFlag++;
	return (variable);
}
@def_
@def $macro238()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, return value and legal, function declared to
 * return a pointer to character
 */
{
	char           *s, *levelOne();
	short           i = 1;

	s = levelOne(i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	short           i = variable + 1;

	if (variable != 1)
		statusFlag++;
	s = levelTwo(i);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < variable; i++, s++);
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	short           i = variable + 1;

	if (variable != 2)
		statusFlag++;
	s = levelThree(i);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, i = 0; i < variable; i++, s++);
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	short           i;

	if (variable != 3)
		statusFlag++;
	for (s = numbers, i = 0; i < variable; i++, s++);
	return (s);
}
@def_
@def $macro239()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, return value, legal pointer to function
 * returning an integer
 */
{
	short           i = 12, divide4();

	i = dummy1(divide4, i);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro240()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, used in conditional expression, no function
 * declaration
 */
{
	short           i = 1;

	if (!(levelOneNodeOne(i) == 1))
		statusFlag++;
	i++;
	if (!(levelOneNodeTwo(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           i = variable + 2;

	if (!(levelTwoNodeOne(i) == 3))
		statusFlag++;
	i++;
	if (!(levelTwoNodeTwo(i) == 4))
		statusFlag++;
	return (variable);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           i = variable + 3;

	if (!(levelTwoNodeThree(i) == 5))
		statusFlag++;
	i++;
	if (!(levelTwoNodeFour(i) == 6))
		statusFlag++;
	return (variable);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           i = variable + 4;

	if (!(levelThreeLeafOne(i) == 7))
		statusFlag++;
	i++;
	if (!(levelThreeLeafTwo(i) == 8))
		statusFlag++;
	return (variable);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           i = variable + 5;

	if (!(levelThreeLeafThree(i) == 9))
		statusFlag++;
	i++;
	if (!(levelThreeLeafFour(i) == 10))
		statusFlag++;
	return (variable);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           i = variable + 6;

	if (!(levelThreeLeafFive(i) == 11))
		statusFlag++;
	i++;
	if (!(levelThreeLeafSix(i) == 12))
		statusFlag++;
	return (variable);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           i = variable + 7;

	if (!(levelThreeLeafSeven(i) == 13))
		statusFlag++;
	i++;
	if (!(levelThreeLeafEight(i) == 14))
		statusFlag++;
	return (variable);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro241()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, used in conditional expression, integer
 * function declaration
 */
{
	short           i = 1, levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           i, levelTwoNodeOne();

	i = 2 * variable;
	return (2 * levelTwoNodeOne(i));
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           i, levelThreeLeafOne();

	i = 2 * variable;
	return (2 * levelThreeLeafOne(i));
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable);
}
@def_
@def $macro242()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: automatic variable, doubled instance  : linear tree structure, used in conditional expression, function
 * declared to return a pointer to character
 */
{
	char            i = 4, j, *skip();

	j = 2 * i;
	if (compare(skip(i), "andra", 5) == compare(skip(j), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro243()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, doubled instance  : linear tree structure, in conditional expression, pointer to function
 * returning an integer
 */
{
	short           i, divide4();

	i = 12;
	if (dummy1(divide4, i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i;

	if ((i = (*func) (integer)) != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i;

	if ((i = (*func) (integer)) != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro244()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, legal, no function declaration
 */
{
	short           i = 1;

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	short           i = variable;

	if (--counter) {
		i = recursiveFunction(i);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro245()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, legal, integer function declaration
 */
{
	short           i = 1;
	short           recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           i = variable;
	short           recursiveFunction();

	if (--counter) {
		i = recursiveFunction(i);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro246()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, function declared to return a pointer
 * to character
 */
{
	char           *s, *recursiveFunction();
	short           i = 2;

	s = recursiveFunction(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	short           i = 3;
	char           *s;

	if (--counter) {
		s = recursiveFunction(i);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro247()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, return value, pointer to function returning an
 * integer
 */
{
	short           i = 1, increment();

	i = dummy(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           i = variable;
	if (--counter) {
		i = dummy(function, i);
		if (i != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro248()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, function in conditional expression, no function
 * declaration
 */
{
	short           i = 1;
	if (!(recursiveFunction(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	short           i = 1;
	if (--counter)
		if (!(recursiveFunction(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro249()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, function in conditional expression, integer function
 * declaration
 */
{
	short           i = 1, recursiveFunction();

	if (!(recursiveFunction(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           i = 1, recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro250()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, in conditional expression, function declared to
 * return a pointer to character
 */
{
	char           *recursiveFunction();
	short           i = 2;

	if (!(*recursiveFunction(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	short           i = variable;
	if (--counter)
		if (!(*recursiveFunction(i) == '2'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro251()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : recursive call, in conditional expression, pointer to function
 * returning an integer
 */
{
	short           i = 1, increment();

	if (!(dummy(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           i = variable;
	if (--counter)
		if (!(dummy(function, i) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro252()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, legal, no function declaration
 */
{
	short           i = 1;

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           i = variable + 3;

	if (--counter) {
		i = pollux(i);
		if (i != 5)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           i = variable - 3;

	if (--counter) {
		i = castor(i);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro253()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, legal, function declared to return an integer
 */
{
	short           i = 1, castor();

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           i = variable + 3, pollux();

	if (--counter) {
		i = pollux(i);
		if (i != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           i = variable - 3;

	if (--counter) {
		i = castor(i);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro254()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, function declared to return a pointer to
 * character
 */
{
	char           *s, *castor();
	short           i = 2;

	s = castor(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *s, *pollux();
	short           i = variable + 4;

	if (--counter) {
		s = pollux(i);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	char           *s;
	short           i = variable - 4;

	if (--counter) {
		s = castor(i);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro255()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, return value, pointer to function returning an integer
 */
{
	short           i = 1, increment();

	i = castor(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           i = variable + 8;
	if (--counter) {
		i = pollux(function, i);
		if (i != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           i = variable - 8;
	if (--counter) {
		i = castor(function, i);
		if (i != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro256()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, no function declaration
 */
{
	short           i = 1;

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           i = variable + 3;

	if (--counter)
		if (!(pollux(i) == 5))
			statusFlag++;
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           i = variable - 3;

	if (--counter)
		if (!(castor(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro257()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, function declared to return an
 * integer
 */
{
	short           i = 1, castor();

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           i = variable + 3, pollux();

	if (--counter)
		if (!(pollux(i) == 5))
			statusFlag++;
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           i = variable - 3;

	if (--counter)
		if (!(castor(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro258()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, function declared to return a
 * pointer to character
 */
{
	char           *castor();
	short           i = 2;

	if (!(*castor(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	short           i = variable + 4;

	if (--counter)
		if (!(*pollux(i) == '6'))
			statusFlag++;
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	short           i = variable - 4;

	if (--counter)
		if (!(*castor(i) == '2'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro259()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, doubled instance  : gemini, in conditional expression, pointer to function returning an
 * integer
 */
{
	short           i = 1, increment();

	if (!(castor(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           i = variable + 8;

	if (--counter)
		if (!(pollux(function, i) == 10))
			statusFlag++;
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           i = variable - 8;

	if (--counter)
		if (!(castor(function, i) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro260()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * no function declaration
 */
{
	short           i = 0, result = 0;

	i = 1;
	result = levelOneNodeOne(i);
	if (i != 1 || result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(i);
	if (i != 2 || result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           storage = variable, result = 0;

	variable += 2;
	result = levelTwoNodeOne(variable);
	if (variable != 3 || result != 3)
		statusFlag++;
	variable++;
	result = levelTwoNodeTwo(variable);
	if (variable != 4 || result != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           storage = variable, result = 0;

	variable += 3;
	result = levelTwoNodeThree(variable);
	if (variable != 5 || result != 5)
		statusFlag++;
	variable++;
	result = levelTwoNodeFour(variable);
	if (variable != 6 || result != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           storage = variable, result = 0;

	variable += 4;
	result = levelThreeLeafOne(variable);
	if (variable != 7 || result != 7)
		statusFlag++;
	variable++;
	result = levelThreeLeafTwo(variable);
	if (variable != 8 || result != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           storage = variable, result = 0;

	variable += 5;
	result = levelThreeLeafThree(variable);
	if (variable != 9 || result != 9)
		statusFlag++;
	variable++;
	result = levelThreeLeafFour(variable);
	if (variable != 10 || result != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           storage = variable, result = 0;

	variable += 6;
	result = levelThreeLeafFive(variable);
	if (variable != 11 || result != 11)
		statusFlag++;
	variable++;
	result = levelThreeLeafSix(variable);
	if (variable != 12 || result != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           storage = variable, result = 0;

	variable += 7;
	result = levelThreeLeafSeven(variable);
	if (variable != 13 || result != 13)
		statusFlag++;
	variable++;
	result = levelThreeLeafEight(variable);
	if (variable != 14 || result != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafThree(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafFour(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafFive(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafSix(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafEight(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}
@def_
@def $macro261()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * integer function declaration
 */
{
	short           i = 0, result = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	result = levelOneNodeOne(i);
	if (i != 1 || result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(i);
	if (i != 2 || result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           storage = variable, result = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	variable = 3;
	result = levelTwoNodeOne(variable);
	if (variable != 3 || result != 3)
		statusFlag++;
	variable = 4;
	result = levelTwoNodeTwo(variable);
	if (variable != 4 || result != 4)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	short           storage = variable, result = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	variable = 5;
	result = levelTwoNodeThree(variable);
	if (variable != 5 || result != 5)
		statusFlag++;
	variable = 6;
	result = levelTwoNodeFour(variable);
	if (variable != 6 || result != 6)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           storage = variable, result = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	variable = 7;
	result = levelThreeLeafOne(variable);
	if (variable != 7 || result != 7)
		statusFlag++;
	variable = 8;
	result = levelThreeLeafTwo(variable);
	if (variable != 8 || result != 8)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	short           storage = variable, result = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	variable = 9;
	result = levelThreeLeafThree(variable);
	if (variable != 9 || result != 9)
		statusFlag++;
	variable = 10;
	result = levelThreeLeafFour(variable);
	if (variable != 10 || result != 10)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	short           storage = variable, result = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	variable = 11;
	result = levelThreeLeafFive(variable);
	if (variable != 11 || result != 11)
		statusFlag++;
	variable = 12;
	result = levelThreeLeafSix(variable);
	if (variable != 12 || result != 12)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	short           storage = variable, result = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	variable = 13;
	result = levelThreeLeafSeven(variable);
	if (variable != 13 || result != 13)
		statusFlag++;
	variable = 14;
	result = levelThreeLeafEight(variable);
	if (variable != 14 || result != 14)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}
@def_
@def $macro262()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * function declared to return a pointer to character
 */
{
	char           *s, *levelOne();
	short           i;

	i = 1;
	s = levelOne(i);
	if (*s != '1' || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	short           j;

	j = 2;
	s = levelTwo(j);
	if (*s != '2' || j != 2)
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	variable++;
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	short           k;

	k = 3;
	s = levelThree(k);
	if (*s != '3' || k != 3)
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	variable++;
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	short           l;

	for (s = numbers, l = 0; l < variable; l++, s++);
	variable++;
	return (s);
}
@def_
@def $macro263()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, return value, legal
 * pointer to function returning an integer
 */
{
	short           i, divide4(), result = 0;

	i = 12;
	result = dummy1(divide4, i);
	if (i != 12 || result != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3 || integer != 12)
		statusFlag++;
	integer++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6 || integer != 12)
		statusFlag++;
	integer++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro264()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, no function declaration
 */
{
	short           i = 1, j = i++;

	if (levelOneNodeOne(j) + levelOneNodeTwo(i) != 44)
		statusFlag++;
	if (i != 2 || j != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           ii, jj, result = 0;
	jj = (ii = ++variable) + 1;
	result = levelTwoNodeOne(ii) + levelTwoNodeTwo(jj);
	if (jj != 3 || ii != 2)
		statusFlag++;
	return (result);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           iii, jjj, result = 0;
	jjj = (iii = ++variable) + 1;
	result = levelTwoNodeThree(iii) + levelTwoNodeFour(jjj);
	if (jjj != 4 || iii != 3)
		statusFlag++;
	return (result);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           iiii, jjjj, result = 0;
	jjjj = (iiii = ++variable) + 1;
	result = levelThreeLeafOne(iiii) + levelThreeLeafTwo(jjjj);
	if (jjjj != 4 || iiii != 3)
		statusFlag++;
	return (result);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           iiiii, jjjjj, result = 0;
	jjjjj = (iiiii = ++variable) + 1;
	result = levelThreeLeafThree(iiiii) + levelThreeLeafFour(jjjjj);
	if (jjjjj != 5 || iiiii != 4)
		statusFlag++;
	return (result);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           iiiiii, jjjjjj, result = 0;
	jjjjjj = (iiiiii = ++variable) + 1;
	result = levelThreeLeafFive(iiiiii) + levelThreeLeafSix(jjjjjj);
	if (jjjjjj != 5 || iiiiii != 4)
		statusFlag++;
	return (result);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           iiiiiii, jjjjjjj, result = 0;
	jjjjjjj = (iiiiiii = ++variable) + 1;
	result = levelThreeLeafSeven(iiiiiii) + levelThreeLeafEight(jjjjjjj);
	if (jjjjjjj != 6 || iiiiiii != 5)
		statusFlag++;
	return (result);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro265()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, integer function declaration
 */
{
	short           i = 1, levelOneNodeOne();

	if (levelOneNodeOne(i) != 32 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           ii, levelTwoNodeOne(), result = 0;

	ii = 2 * variable++;
	result = 2 * levelTwoNodeOne(ii);
	if (ii != 2)
		statusFlag++;
	return (result);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           iii, levelThreeLeafOne(), result = 0;

	iii = 2 * variable++;
	result = 2 * levelThreeLeafOne(iii);
	if (iii != 4)
		statusFlag++;
	return (result);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable++);
}
@def_
@def $macro266()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";
short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: automatic variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, function declared to return a pointer to character
 */
{
	char            i = 4, j = 2 * i, *skip();

	if (compare(skip(i), "andra", 5) == compare(skip(j), "across", 6))
		statusFlag++;
	if (i != 4 || j != 8)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	char           *pointer;

	for (pointer = protean; skipper >= 0; skipper--)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro267()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : linear tree structure, in conditional
 * expression, pointer to function returning an integer
 */
{
	short           i, divide4();

	i = 12;
	if (dummy1(divide4, i) != 3 || i != 12)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 3 || integer != 12)
		statusFlag++;
	integer++;
	return (ii);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 6 || integer != 12)
		statusFlag++;
	integer++;
	return (ii);
}

short
divide2(integer)
	short           integer;
{
	return (integer++ / 2);
}
@def_
@def $macro268()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, legal, no
 * function declaration
 */
{
	short           i = 1, result = 0;

	result = recursiveFunction(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	short           result;

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2 || variable != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro269()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, legal, integer
 * function declaration
 */
{
	short           i = 1, recursiveFunction(), result = 0;

	result = recursiveFunction(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           result, recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2 || variable != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro270()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, function declared
 * to return a pointer to character
 */
{
	char           *s, *recursiveFunction();
	short           i = 2;

	s = recursiveFunction(i);
	if (*s != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(variable);
		if (*s != '2' || variable != 2)
			statusFlag++;
	}
	return (numbers + variable--);
}
@def_
@def $macro271()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, return value, pointer to
 * function returning an integer
 */
{
	short           i = 1, increment(), result = 0;

	result = dummy(increment, i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           result;
	if (--counter) {
		result = dummy(function, variable);
		if (result != 2 || variable != 1)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro272()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, no function declaration
 */
{
	short           i = 1;

	if (recursiveFunction(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (recursiveFunction(variable) != 2 || variable != 1)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro273()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, integer function declaration
 */
{
	short           recursiveFunction();
	short           i = 1;

	if (recursiveFunction(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           recursiveFunction();

	if (--counter)
		if (recursiveFunction(variable) != 2 || variable != 1)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro274()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, in conditional expression,
 * function declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	short           i = 2;

	if (*recursiveFunction(i) != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (*recursiveFunction(variable) != '2' || variable != 2)
			statusFlag++;
	return (numbers + variable--);
}
@def_
@def $macro275()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : recursive call, in conditional expression,
 * pointer to function returning an integer
 */
{
	short           increment();
	short           i = 1;

	if (dummy(increment, i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	if (--counter)
		if (dummy(function, variable) != 2 || variable != 1)
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro276()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, legal, no function
 * declaration
 */
{
	short           i = 1, result = 0;

	result = castor(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = variable + 3, result = 0;

	if (--counter) {
		result = pollux(ii);
		if (result != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = variable - 3, result = 0;

	if (--counter) {
		result = castor(iii);
		if (result != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro277()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, legal, function declared
 * to return an integer
 */
{
	short           i = 1, castor(), result = 0;

	result = castor(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           ii = variable + 3, pollux(), result = 0;

	if (--counter) {
		result = pollux(ii);
		if (result != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           iii = variable - 3, result = 0;

	if (--counter) {
		result = castor(iii);
		if (result != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro278()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, function declared to
 * return a pointer to character
 */
{
	char           *s, *castor();
	short           i = 2;

	s = castor(i);
	if (*s != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	short           ii = variable + 4;
	char           *s, *pollux();

	if (--counter) {
		s = pollux(ii);
		if (*s != '6' || variable != 2)
			statusFlag++;
	}
	return (numbers + variable--);
}

char           *
pollux(variable)
	short           variable;
{
	short           iii = variable - 4;
	char           *s;

	if (--counter) {
		s = castor(iii);
		if (*s != '2' || variable != 6)
			statusFlag++;
	}
	return (numbers + variable--);
}
@def_
@def $macro279()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, return value, pointer to function
 * returning an integer
 */
{
	short           i = 1, increment(), result = 0;

	result = castor(increment, i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = variable + 8, result = 0;
	if (--counter) {
		result = pollux(function, ii);
		if (result != 10 || ii != 9)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = variable - 8, result = 0;
	if (--counter) {
		result = castor(function, iii);
		if (result != 2 || iii != 1)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro280()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, no function
 * declaration
 */
{
	short           i = 1;

	if (castor(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = variable + 3;
	if (--counter) {
		if (pollux(ii) != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = variable - 3;
	if (--counter) {
		if (castor(iii) != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro281()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return an integer
 */
{
	short           i = 1, castor();

	if (castor(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           ii = variable + 3, pollux();

	if (--counter) {
		if (pollux(ii) != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           iii = variable - 3;
	if (--counter) {
		if (castor(iii) != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro282()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *castor();
	short           i = 2;

	if (*castor(i) != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	short           ii = variable + 4;

	if (--counter) {
		if (*pollux(ii) != '6' || ii != 6)
			statusFlag++;
	}
	return (numbers + variable--);
}

char           *
pollux(variable)
	short           variable;
{
	short           iii = variable - 4;
	if (--counter) {
		if (*castor(iii) != '2' || iii != 2)
			statusFlag++;
	}
	return (numbers + variable--);
}
@def_
@def $macro283()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: automatic variable, mistaken as called by address instance  : gemini, in conditional expression, pointer to
 * function returning an integer
 */
{
	short           i = 1, increment();

	if (castor(increment, i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = variable + 10;
	if (--counter) {
		if (pollux(function, ii) != 12 || ii != 11)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = variable - 10;
	if (--counter) {
		if (castor(function, iii) != 2 || iii != 1)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro284()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, return value and legal, no function declaration
 */
{
	static short    i = 0;

	i = 1;
	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	i = 2;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	static short    storage;

	storage = variable;
	variable += 2;
	variable = levelTwoNodeOne(variable);
	if (variable != 3)
		statusFlag++;
	variable++;
	variable = levelTwoNodeTwo(variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short           variable;
{
	static short    storage;

	storage = variable;
	variable += 3;
	variable = levelTwoNodeThree(variable);
	if (variable != 5)
		statusFlag++;
	variable++;
	variable = levelTwoNodeFour(variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short           variable;
{
	static short    storage;

	storage = variable;
	variable += 4;
	variable = levelThreeLeafOne(variable);
	if (variable != 7)
		statusFlag++;
	variable++;
	variable = levelThreeLeafTwo(variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	static short    storage;

	storage = variable;
	variable += 5;
	variable = levelThreeLeafThree(variable);
	if (variable != 9)
		statusFlag++;
	variable++;
	variable = levelThreeLeafFour(variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short           variable;
{
	static short    storage;

	storage = variable;
	variable += 6;
	variable = levelThreeLeafFive(variable);
	if (variable != 11)
		statusFlag++;
	variable++;
	variable = levelThreeLeafSix(variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short           variable;
{
	static short    storage;

	storage = variable;
	variable += 7;
	variable = levelThreeLeafSeven(variable);
	if (variable != 13)
		statusFlag++;
	variable++;
	variable = levelThreeLeafEight(variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro285()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, return value and legal, integer function declaration
 */
{
	static short    i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	i = 2;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	static short    storage;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	storage = variable;
	variable = 3;
	variable = levelTwoNodeOne(variable);
	if (variable != 3)
		statusFlag++;
	variable = 4;
	variable = levelTwoNodeTwo(variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	static short    storage;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	storage = variable;
	variable = 5;
	variable = levelTwoNodeThree(variable);
	if (variable != 5)
		statusFlag++;
	variable = 6;
	variable = levelTwoNodeFour(variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	static short    storage;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	storage = variable;
	variable = 7;
	variable = levelThreeLeafOne(variable);
	if (variable != 7)
		statusFlag++;
	variable = 8;
	variable = levelThreeLeafTwo(variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	static short    storage;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	storage = variable;
	variable = 9;
	variable = levelThreeLeafThree(variable);
	if (variable != 9)
		statusFlag++;
	variable = 10;
	variable = levelThreeLeafFour(variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	static short    storage;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	storage = variable;
	variable = 11;
	variable = levelThreeLeafFive(variable);
	if (variable != 11)
		statusFlag++;
	variable = 12;
	variable = levelThreeLeafSix(variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	static short    storage;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	storage = variable;
	variable = 13;
	variable = levelThreeLeafSeven(variable);
	if (variable != 13)
		statusFlag++;
	variable = 14;
	variable = levelThreeLeafEight(variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro286()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, return value and legal, function declared to return a
 * pointer to character
 */
{
	char           *s, *levelOne();
	static short    i;

	i = 1;
	s = levelOne(i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	static short    j;

	if (variable != 1)
		statusFlag++;
	j = 2;
	s = levelTwo(j);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	static short    k;

	if (variable != 2)
		statusFlag++;
	k = 3;
	s = levelThree(k);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	short           l;

	if (variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < variable; l++, s++);
	return (s);
}
@def_
@def $macro287()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, return value, legal pointer to function returning an
 * integer
 */
{
	static short    i;
	short           divide4();

	i = 12;
	i = dummy1(divide4, i);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro288()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, used in conditional expression, no function declaration
 */
{
	static short    i = 1, j;

	j = i++;
	if (!(levelOneNodeOne(j) + levelOneNodeTwo(i) == 44))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	static short    ii, jj;
	jj = (ii = ++variable) + 1;
	return (levelTwoNodeOne(ii) + levelTwoNodeTwo(jj));
}

levelOneNodeTwo(variable)
	short           variable;
{
	static short    iii, jjj;
	jjj = (iii = ++variable) + 1;
	return (levelTwoNodeThree(iii) + levelTwoNodeFour(jjj));
}

levelTwoNodeOne(variable)
	short           variable;
{
	static short    iiii, jjjj;
	jjjj = (iiii = ++variable) + 1;
	return (levelThreeLeafOne(iiii) + levelThreeLeafTwo(jjjj));
}

levelTwoNodeTwo(variable)
	short           variable;
{
	static short    iiiii, jjjjj;
	jjjjj = (iiiii = ++variable) + 1;
	return (levelThreeLeafThree(iiiii) + levelThreeLeafFour(jjjjj));
}

levelTwoNodeThree(variable)
	short           variable;
{
	static short    iiiiii, jjjjjj;
	jjjjjj = (iiiiii = ++variable) + 1;
	return (levelThreeLeafFive(iiiiii) + levelThreeLeafSix(jjjjjj));
}

levelTwoNodeFour(variable)
	short           variable;
{
	static short    iiiiiii, jjjjjjj;
	jjjjjjj = (iiiiiii = ++variable) + 1;
	return (levelThreeLeafSeven(iiiiiii) + levelThreeLeafEight(jjjjjjj));
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro289()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, used in conditional expression, integer function
 * declaration
 */
{
	static short    i = 1;
	short           levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	static short    ii;
	short           levelTwoNodeOne();

	ii = 2 * variable;
	return (2 * levelTwoNodeOne(ii));
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	static short    iii;
	short           levelThreeLeafOne();

	iii = 2 * variable;
	return (2 * levelThreeLeafOne(iii));
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable);
}
@def_
@def $macro290()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: static variable instance  : linear tree structure, used in conditional expression, function declared to
 * return a pointer to character
 */
{
	static char     i = 4, j;
	char           *skip();

	j = 2 * i;
	if (compare(skip(i), "andra", 5) == compare(skip(j), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	static short    ii;
	char           *pointer;

	for (ii = 0, pointer = protean; ii < skipper; ii++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro291()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable instance  : linear tree structure, in conditional expression, pointer to function returning
 * an integer
 */
{
	static short    i;
	short           divide4();

	i = 12;
	if (dummy1(divide4, i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	static short    ii;

	if ((ii = (*func) (integer)) != 3)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	static short    ii;

	if ((ii = (*func) (integer)) != 6)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro292()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, legal, no function declaration
 */
{
	static short    i = 1;

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	static short    ii;
	short           result;

	ii = variable;
	if (--counter) {
		result = recursiveFunction(ii);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro293()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, legal, integer function declaration
 */
{
	static short    i = 1;
	short           recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	static short    ii;
	short           result;
	short           recursiveFunction();

	ii = variable;
	if (--counter) {
		result = recursiveFunction(ii);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro294()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable instance  : recursive call, return value, function declared to return a pointer to character
 */
{
	char           *s, *recursiveFunction();
	static short    i = 2;

	s = recursiveFunction(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	char           *s;
	static short    ii;

	ii = variable;
	if (--counter) {
		s = recursiveFunction(ii);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro295()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, return value, pointer to function returning an integer
 */
{
	static short    i = 1;
	short           increment();

	i = dummy(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	static short    ii;
	short           result;

	ii = variable;
	if (--counter) {
		result = dummy(function, ii);
		if (result != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro296()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, function in conditional expression, no function declaration
 */
{
	static short    i = 1;

	if (!(recursiveFunction(i) - i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	static short    ii;

	ii = variable;
	if (--counter)
		if (!(recursiveFunction(ii) - variable == 1))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro297()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, function in conditional expression, integer function declaration
 */
{
	short           recursiveFunction();
	static short    i = 1;

	if (!(recursiveFunction(i) - i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           recursiveFunction();
	static short    ii;

	ii = variable;
	if (--counter)
		if (!(recursiveFunction(ii) - variable == 1))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro298()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable instance  : recursive call, in conditional expression, function declared to return a pointer
 * to character
 */
{
	char           *recursiveFunction();
	static short    i = 2;

	if (!(*recursiveFunction(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	static short    ii;

	ii = variable;
	if (--counter)
		if (!(*recursiveFunction(ii) == '2'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro299()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : recursive call, in conditional expression, pointer to function returning an
 * integer
 */
{
	short           increment();
	static short    i = 1;

	if (!(dummy(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	static short    ii;

	ii = variable;
	if (--counter)
		if (!(dummy(function, ii) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro300()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, legal, no function declaration
 */
{
	static short    i = 1;

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	static short    ii;

	ii = variable + 3;
	if (--counter) {
		ii = pollux(ii);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 3;
	if (--counter) {
		iii = castor(iii);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro301()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, legal, function declared to return an integer
 */
{
	static short    i = 1;
	short           castor();

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	static short    ii;
	short           pollux();

	ii = variable + 3;
	if (--counter) {
		ii = pollux(ii);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 3;
	if (--counter) {
		iii = castor(iii);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro302()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable instance  : gemini, return value, function declared to return a pointer to character
 */
{
	char           *s, *castor();
	static short    i = 2;

	s = castor(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	static short    ii;
	char           *s, *pollux();

	ii = variable + 4;
	if (--counter) {
		s = pollux(ii);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	static short    iii;
	char           *s;

	iii = variable - 4;
	if (--counter) {
		s = castor(iii);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro303()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, return value, pointer to function returning an integer
 */
{
	static short    i = 1;
	short           increment();

	i = castor(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	static short    ii;

	ii = variable + 8;
	if (--counter) {
		ii = pollux(function, ii);
		if (ii != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	static short    iii;

	iii = variable - 8;
	if (--counter) {
		iii = castor(function, iii);
		if (iii != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro304()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, no function declaration
 */
{
	static short    i = 1;

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	static short    ii;

	ii = variable + 3;
	if (--counter) {
		if (!(pollux(ii) == 5))
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 3;
	if (--counter) {
		if (!(castor(iii) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro305()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, function declared to return an integer
 */
{
	static short    i = 1;
	short           castor();

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	static short    ii;
	short           pollux();

	ii = variable + 3;
	if (--counter) {
		if (!(pollux(ii) == 5))
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 3;
	if (--counter) {
		if (!(castor(iii) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro306()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, function declared to return a pointer to
 * character
 */
{
	char           *castor();
	static short    i = 2;

	if (!(*castor(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	static short    ii;

	ii = variable + 4;
	if (--counter) {
		if (!(*pollux(ii) == '6'))
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 4;
	if (--counter) {
		if (!(*castor(iii) == '2'))
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro307()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable instance  : gemini, in conditional expression, pointer to function returning an integer
 */
{
	static short    i = 1;
	short           increment();

	if (!(castor(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	static short    ii;

	ii = variable + 10;
	if (--counter) {
		if (!(pollux(function, ii) == 12))
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	static short    iii;

	iii = variable - 10;
	if (--counter) {
		if (!(castor(function, iii) == 2))
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro308()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, return value and legal, no function declaration
 */
{
	static short    i = 1;

	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	++i;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	static short    i;

	i = variable + 2;
	if (variable != 1)
		statusFlag++;
	i = levelTwoNodeOne(i);
	if (i != 3)
		statusFlag++;
	++i;
	i = levelTwoNodeTwo(i);
	if (i != 4)
		statusFlag++;
	return (variable);
}

levelOneNodeTwo(variable)
	short           variable;
{
	static short    i;

	i = variable + 3;
	if (variable != 2)
		statusFlag++;
	i = levelTwoNodeThree(i);
	if (i != 5)
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
	if (i != 6)
		statusFlag++;
	return (variable);
}

levelTwoNodeOne(variable)
	short           variable;
{
	static short    i;

	i = variable + 4;
	if (variable != 3)
		statusFlag++;
	i = levelThreeLeafOne(i);
	if (i != 7)
		statusFlag++;
	++i;
	i = levelThreeLeafTwo(i);
	if (i != 8)
		statusFlag++;
	return (variable);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	static short    i;

	i = variable + 5;
	if (variable != 4)
		statusFlag++;
	i = levelThreeLeafThree(i);
	if (i != 9)
		statusFlag++;
	++i;
	i = levelThreeLeafFour(i);
	if (i != 10)
		statusFlag++;
	return (variable);
}

levelTwoNodeThree(variable)
	short           variable;
{
	static short    i;

	i = variable + 6;
	if (variable != 5)
		statusFlag++;
	i = levelThreeLeafFive(i);
	if (i != 11)
		statusFlag++;
	++i;
	i = levelThreeLeafSix(i);
	if (i != 12)
		statusFlag++;
	return (variable);
}

levelTwoNodeFour(variable)
	short           variable;
{
	static short    i;

	i = variable + 7;
	if (variable != 6)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	if (i != 13)
		statusFlag++;
	++i;
	i = levelThreeLeafEight(i);
	if (i != 14)
		statusFlag++;
	return (variable);
}

levelThreeLeafOne(variable)
	short           variable;
{
	if (variable != 7)
		statusFlag++;
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	if (variable != 8)
		statusFlag++;
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	if (variable != 9)
		statusFlag++;
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	if (variable != 10)
		statusFlag++;
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	if (variable != 11)
		statusFlag++;
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	if (variable != 12)
		statusFlag++;
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	if (variable != 13)
		statusFlag++;
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	if (variable != 14)
		statusFlag++;
	return (variable);
}
@def_
@def $macro309()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, return value and legal, integer function
 * declaration
 */
{
	static short    i = 1;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(i);
	if (i != 1)
		statusFlag++;
	i++;
	i = levelOneNodeTwo(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	static short    i = 3;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	if (variable != 1)
		statusFlag++;
	i = levelTwoNodeOne(i);
	if (i != 3)
		statusFlag++;
	i++;
	i = levelTwoNodeTwo(i);
	if (i != 4)
		statusFlag++;
	return (variable);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	static short    i = 5;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	if (variable != 2)
		statusFlag++;
	i = levelTwoNodeThree(i);
	if (i != 5)
		statusFlag++;
	++i;
	i = levelTwoNodeFour(i);
	if (i != 6)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	static short    i = 7;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	if (variable != 3)
		statusFlag++;
	i = levelThreeLeafOne(i);
	if (i != 7)
		statusFlag++;
	i++;
	i = levelThreeLeafTwo(i);
	if (i != 8)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	static short    i = 9;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	if (variable != 4)
		statusFlag++;
	i = levelThreeLeafThree(i);
	if (i != 9)
		statusFlag++;
	i++;
	i = levelThreeLeafFour(i);
	if (i != 10)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	static short    i = 11;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	if (variable != 5)
		statusFlag++;
	i = levelThreeLeafFive(i);
	if (i != 11)
		statusFlag++;
	i++;
	i = levelThreeLeafSix(i);
	if (i != 12)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	static short    i = 13;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	if (variable != 6)
		statusFlag++;
	i = levelThreeLeafSeven(i);
	if (i != 13)
		statusFlag++;
	i++;
	i = levelThreeLeafEight(i);
	if (i != 14)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	if (variable != 7)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	if (variable != 8)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	if (variable != 9)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	if (variable != 10)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	if (variable != 11)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	if (variable != 12)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	if (variable != 13)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	if (variable != 14)
		statusFlag++;
	return (variable);
}
@def_
@def $macro310()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, return value and legal, function declared to
 * return a pointer to character
 */
{
	char           *s, *levelOne();
	static short    i = 1;

	s = levelOne(i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	static short    i;

	i = variable + 1;
	if (variable != 1)
		statusFlag++;
	s = levelTwo(i);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < variable; i++, s++);
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	static short    i;

	i = variable + 1;
	if (variable != 2)
		statusFlag++;
	s = levelThree(i);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, i = 0; i < variable; i++, s++);
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	static short    i;

	if (variable != 3)
		statusFlag++;
	for (s = numbers, i = 0; i < variable; i++, s++);
	return (s);
}
@def_
@def $macro311()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, return value, legal pointer to function returning
 * an integer
 */
{
	static short    i = 12;
	short           divide4();

	i = dummy1(divide4, i);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro312()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, used in conditional expression, no function
 * declaration
 */
{
	static short    i = 1;

	if (!(levelOneNodeOne(i) == 1))
		statusFlag++;
	i++;
	if (!(levelOneNodeTwo(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	static short    i;

	i = variable + 2;
	if (!(levelTwoNodeOne(i) == 3))
		statusFlag++;
	i++;
	if (!(levelTwoNodeTwo(i) == 4))
		statusFlag++;
	return (variable);
}

levelOneNodeTwo(variable)
	short           variable;
{
	static short    i;

	i = variable + 3;
	if (!(levelTwoNodeThree(i) == 5))
		statusFlag++;
	i++;
	if (!(levelTwoNodeFour(i) == 6))
		statusFlag++;
	return (variable);
}

levelTwoNodeOne(variable)
	short           variable;
{
	static short    i;

	i = variable + 4;
	if (!(levelThreeLeafOne(i) == 7))
		statusFlag++;
	i++;
	if (!(levelThreeLeafTwo(i) == 8))
		statusFlag++;
	return (variable);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	static short    i;

	i = variable + 5;
	if (!(levelThreeLeafThree(i) == 9))
		statusFlag++;
	i++;
	if (!(levelThreeLeafFour(i) == 10))
		statusFlag++;
	return (variable);
}

levelTwoNodeThree(variable)
	short           variable;
{
	static short    i;

	i = variable + 6;
	if (!(levelThreeLeafFive(i) == 11))
		statusFlag++;
	i++;
	if (!(levelThreeLeafSix(i) == 12))
		statusFlag++;
	return (variable);
}

levelTwoNodeFour(variable)
	short           variable;
{
	static short    i;

	i = variable + 7;
	if (!(levelThreeLeafSeven(i) == 13))
		statusFlag++;
	i++;
	if (!(levelThreeLeafEight(i) == 14))
		statusFlag++;
	return (variable);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro313()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, used in conditional expression, integer function
 * declaration
 */
{
	static short    i = 1;
	short           levelOneNodeOne();

	if (!(levelOneNodeOne(i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	static short    i;
	short           levelTwoNodeOne();

	if (i == 1)
		statusFlag++;
	i = 2 * variable;
	return (2 * levelTwoNodeOne(i));
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	static short    i;
	short           levelThreeLeafOne();

	if (i == 2)
		statusFlag++;
	i = 2 * variable;
	return (2 * levelThreeLeafOne(i));
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	static short    i;

	if (i == 4)
		statusFlag++;
	return (2 * variable);
}
@def_
@def $macro314()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: static variable, doubled instance  : linear tree structure, used in conditional expression, function
 * declared to return a pointer to character
 */
{
	static char     i = 4, j;
	char           *skip();

	j = 2 * i;
	if (compare(skip(i), "andra", 5) == compare(skip(j), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	static short    i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro315()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, doubled instance  : linear tree structure, in conditional expression, pointer to function
 * returning an integer
 */
{
	static short    i;
	short           divide4();

	i = 12;
	if (dummy1(divide4, i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	if (i == 12)
		statusFlag++;
	if ((i = (*func) (integer)) != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	if (i == 12)
		statusFlag++;
	if ((i = (*func) (integer)) != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro316()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, return value, legal, no function declaration
 */
{
	static short    i = 1;

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	static short    i;

	if (i != 0)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(variable);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro317()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, return value, legal, integer function declaration
 */
{
	static short    i = 1;
	short           recursiveFunction();

	i = recursiveFunction(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	static short    i;
	short           recursiveFunction();

	if (i != 0)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(variable);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro318()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, doubled instance  : recursive call, return value, function declared to return a pointer to
 * character
 */
{
	char           *s, *recursiveFunction();
	static short    i = 2;

	s = recursiveFunction(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	static short    i = 3;
	char           *s;

	if (--counter) {
		s = recursiveFunction(i);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro319()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, return value, pointer to function returning an integer
 */
{
	static short    i = 1;
	short           increment();

	i = dummy(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	static short    i;

	if (i != 0)
		statusFlag++;
	if (--counter) {
		i = dummy(function, variable);
		if (i != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro320()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, function in conditional expression, no function
 * declaration
 */
{
	static short    i = 1;

	if (!(recursiveFunction(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	static short    i = 1;

	if (--counter)
		if (!(recursiveFunction(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro321()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, function in conditional expression, integer function
 * declaration
 */
{
	static short    i = 1;
	short           recursiveFunction();

	if (!(recursiveFunction(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	static short    i = 1;
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro322()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, doubled instance  : recursive call, in conditional expression, function declared to return a
 * pointer to character
 */
{
	char           *recursiveFunction();
	static short    i = 2;

	if (!(*recursiveFunction(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	static short    i;

	if (i != 0)
		statusFlag++;
	if (--counter)
		if (!(*recursiveFunction(variable) == '2'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro323()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : recursive call, in conditional expression, pointer to function returning
 * an integer
 */
{
	static short    i = 1;
	short           increment();

	if (!(dummy(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	static short    i;

	if (i != 0)
		statusFlag++;
	if (--counter)
		if (!(dummy(function, variable) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro324()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, legal, no function declaration
 */
{
	static short    i = 1;

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	static short    i;

	i = variable + 3;
	if (--counter) {
		i = pollux(i);
		if (i != 5)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	static short    i;

	i = variable - 3;
	if (--counter) {
		i = castor(i);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro325()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, legal, function declared to return an integer
 */
{
	static short    i = 1;
	short           castor();

	i = castor(i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	static short    i;
	short           pollux();

	i = variable + 3;
	if (--counter) {
		i = pollux(i);
		if (i != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	static short    i;

	i = variable - 3;
	if (--counter) {
		i = castor(i);
		if (i != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro326()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, function declared to return a pointer to character
 */
{
	char           *s, *castor();
	static short    i = 2;

	s = castor(i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *s, *pollux();
	static short    i;

	i = variable + 4;
	if (--counter) {
		s = pollux(i);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	char           *s;
	static short    i;

	i = variable - 4;
	if (--counter) {
		s = castor(i);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro327()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, return value, pointer to function returning an integer
 */
{
	static short    i = 1;
	short           increment();

	i = castor(increment, i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	static short    i;

	i = variable + 8;
	if (--counter) {
		i = pollux(function, i);
		if (i != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	static short    i;

	i = variable - 8;
	if (--counter) {
		i = castor(function, i);
		if (i != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro328()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, no function declaration
 */
{
	static short    i = 1;

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	static short    i;

	i = variable + 3;
	if (--counter)
		if (!(pollux(i) == 5))
			statusFlag++;
	return (++variable);
}

pollux(variable)
	short           variable;
{
	static short    i;

	i = variable - 3;
	if (--counter)
		if (!(castor(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro329()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, function declared to return an
 * integer
 */
{
	static short    i = 1;
	short           castor();

	if (!(castor(i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	static short    i;
	short           pollux();

	i = variable + 3;
	if (--counter)
		if (!(pollux(i) == 5))
			statusFlag++;
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	static short    i;

	i = variable - 3;
	if (--counter)
		if (!(castor(i) == 2))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro330()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, function declared to return a pointer
 * to character
 */
{
	char           *castor();
	static short    i = 2;

	if (!(*castor(i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	static short    i;

	i = variable + 4;
	if (--counter)
		if (!(*pollux(i) == '6'))
			statusFlag++;
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	static short    i;

	i = variable - 4;
	if (--counter)
		if (!(*castor(i) == '2'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro331()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, doubled instance  : gemini, in conditional expression, pointer to function returning an
 * integer
 */
{
	static short    i = 1;
	short           increment();

	if (!(castor(increment, i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	static short    i;

	i = variable + 8;
	if (--counter)
		if (!(pollux(function, i) == 10))
			statusFlag++;
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	static short    i;

	i = variable - 8;
	if (--counter)
		if (!(castor(function, i) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro332()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, return value and legal, no
 * function declaration
 */
{
	static short    i = 0;
	short           result = 0;

	i = 1;
	result = levelOneNodeOne(i);
	if (i != 1 || result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(i);
	if (i != 2 || result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	static short    i11 = 3;
	short           storage = variable, result = 0;

	variable++;
	result = levelTwoNodeOne(i11);
	if (i11 != 3 || result != 3)
		statusFlag++;
	i11++;
	result = levelTwoNodeTwo(i11);
	if (i11 != 4 || result != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short           variable;
{
	static short    i12 = 5;
	short           storage = variable, result = 0;

	variable++;
	result = levelTwoNodeThree(i12);
	if (i12 != 5 || result != 5)
		statusFlag++;
	i12++;
	result = levelTwoNodeFour(i12);
	if (i12 != 6 || result != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short           variable;
{
	static short    i21 = 7;
	short           storage = variable, result = 0;

	variable++;
	result = levelThreeLeafOne(i21);
	if (i21 != 7 || result != 7)
		statusFlag++;
	i21++;
	result = levelThreeLeafTwo(i21);
	if (i21 != 8 || result != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	static short    i22 = 9;
	short           storage = variable, result = 0;

	variable++;
	result = levelThreeLeafThree(i22);
	if (i22 != 9 || result != 9)
		statusFlag++;
	i22++;
	result = levelThreeLeafFour(i22);
	if (i22 != 10 || result != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short           variable;
{
	static short    i23 = 11;
	short           storage = variable, result = 0;

	variable++;
	result = levelThreeLeafFive(i23);
	if (i23 != 11 || result != 11)
		statusFlag++;
	i23++;
	result = levelThreeLeafSix(i23);
	if (i23 != 12 || result != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short           variable;
{
	static short    i24 = 13;
	short           storage = variable, result = 0;

	variable++;
	result = levelThreeLeafSeven(i24);
	if (i24 != 13 || result != 13)
		statusFlag++;
	i24++;
	result = levelThreeLeafEight(i24);
	if (i24 != 14 || result != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafThree(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafFour(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafFive(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafSix(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}

levelThreeLeafEight(variable)
	short           variable;
{
	short           storage = variable;

	variable++;
	return (storage);
}
@def_
@def $macro333()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * integer function declaration
 */
{
	static short    i = 0;
	short           result = 0, levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	result = levelOneNodeOne(i);
	if (i != 1 || result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(i);
	if (i != 2 || result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	static short    i11;
	short           result = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	i11 = 3;
	result = levelTwoNodeOne(i11);
	if (i11 != 3 || result != 3)
		statusFlag++;
	i11 = 4;
	result = levelTwoNodeTwo(i11);
	if (i11 != 4 || result != 4)
		statusFlag++;
	return (variable++);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	static short    i12;
	short           result = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	i12 = 5;
	result = levelTwoNodeThree(i12);
	if (i12 != 5 || result != 5)
		statusFlag++;
	i12 = 6;
	result = levelTwoNodeFour(i12);
	if (i12 != 6 || result != 6)
		statusFlag++;
	return (variable++);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	static short    i21;
	short           result = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	i21 = 7;
	result = levelThreeLeafOne(i21);
	if (i21 != 7 || result != 7)
		statusFlag++;
	i21 = 8;
	result = levelThreeLeafTwo(i21);
	if (i21 != 8 || result != 8)
		statusFlag++;
	return (variable++);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	static short    i22;
	short           result = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	i22 = 9;
	result = levelThreeLeafThree(i22);
	if (i22 != 9 || result != 9)
		statusFlag++;
	i22 = 10;
	result = levelThreeLeafFour(i22);
	if (i22 != 10 || result != 10)
		statusFlag++;
	return (variable++);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	static short    i23;
	short           result = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	i23 = 11;
	result = levelThreeLeafFive(i23);
	if (i23 != 11 || result != 11)
		statusFlag++;
	i23 = 12;
	result = levelThreeLeafSix(i23);
	if (i23 != 12 || result != 12)
		statusFlag++;
	return (variable++);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	static short    i24;
	short           result = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	i24 = 13;
	result = levelThreeLeafSeven(i24);
	if (i24 != 13 || result != 13)
		statusFlag++;
	i24 = 14;
	result = levelThreeLeafEight(i24);
	if (i24 != 14 || result != 14)
		statusFlag++;
	return (variable++);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable++);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	return (variable++);
}
@def_
@def $macro334()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, return value and legal,
 * function declared to return a pointer to character
 */
{
	char           *s, *levelOne();
	static short    i;

	i = 1;
	s = levelOne(i);
	if (*s != '1' || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	static short    j;

	j = 2;
	s = levelTwo(j);
	if (*s != '2' || j != 2)
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	variable++;
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	static short    k;

	k = 3;
	s = levelThree(k);
	if (*s != '3' || k != 3)
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	variable++;
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	short           l;

	for (s = numbers, l = 0; l < variable; l++, s++);
	variable++;
	return (s);
}
@def_
@def $macro335()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, return value, legal pointer
 * to function returning an integer
 */
{
	static short    i;
	short           divide4(), result = 0;

	i = 12;
	result = dummy1(divide4, i);
	if (i != 12 || result != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	i = (*func) (integer);
	if (i != 3 || integer != 12)
		statusFlag++;
	integer++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	static short    i;

	i = (*func) (integer);
	if (i != 6 || integer != 12)
		statusFlag++;
	integer++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro336()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, no function declaration
 */
{
	static short    i = 1, j;

	j = i++;
	if (levelOneNodeOne(j) + levelOneNodeTwo(i) != 44)
		statusFlag++;
	if (i != 2 || j != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	static short    ii, jj, result = 0;
	jj = (ii = ++variable) + 1;
	result = levelTwoNodeOne(ii) + levelTwoNodeTwo(jj);
	if (jj != 3 || ii != 2)
		statusFlag++;
	return (result);
}

levelOneNodeTwo(variable)
	short           variable;
{
	static short    iii, jjj, result = 0;
	jjj = (iii = ++variable) + 1;
	result = levelTwoNodeThree(iii) + levelTwoNodeFour(jjj);
	if (jjj != 4 || iii != 3)
		statusFlag++;
	return (result);
}

levelTwoNodeOne(variable)
	short           variable;
{
	static short    iiii, jjjj, result = 0;
	jjjj = (iiii = ++variable) + 1;
	result = levelThreeLeafOne(iiii) + levelThreeLeafTwo(jjjj);
	if (jjjj != 4 || iiii != 3)
		statusFlag++;
	return (result);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	static short    iiiii, jjjjj, result = 0;
	jjjjj = (iiiii = ++variable) + 1;
	result = levelThreeLeafThree(iiiii) + levelThreeLeafFour(jjjjj);
	if (jjjjj != 5 || iiiii != 4)
		statusFlag++;
	return (result);
}

levelTwoNodeThree(variable)
	short           variable;
{
	static short    iiiiii, jjjjjj, result = 0;
	jjjjjj = (iiiiii = ++variable) + 1;
	result = levelThreeLeafFive(iiiiii) + levelThreeLeafSix(jjjjjj);
	if (jjjjjj != 5 || iiiiii != 4)
		statusFlag++;
	return (result);
}

levelTwoNodeFour(variable)
	short           variable;
{
	static short    iiiiiii, jjjjjjj, result = 0;
	jjjjjjj = (iiiiiii = ++variable) + 1;
	result = levelThreeLeafSeven(iiiiiii) + levelThreeLeafEight(jjjjjjj);
	if (jjjjjjj != 6 || iiiiiii != 5)
		statusFlag++;
	return (result);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro337()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, integer function declaration
 */
{
	static short    i = 1;
	short           levelOneNodeOne();

	if (levelOneNodeOne(i) != 32 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	static short    ii;
	short           levelTwoNodeOne(), result = 0;

	ii = 2 * variable++;
	result = 2 * levelTwoNodeOne(ii);
	if (ii != 2)
		statusFlag++;
	return (result);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	static short    iii;
	short           levelThreeLeafOne(), result = 0;

	iii = 2 * variable++;
	result = 2 * levelThreeLeafOne(iii);
	if (iii != 4)
		statusFlag++;
	return (result);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable++);
}
@def_
@def $macro338()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";
short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: static variable, mistaken as called by address instance  : linear tree structure, used in conditional
 * expression, function declared to return a pointer to character
 */
{
	static char     i = 4, j;
	char           *skip();

	j = 2 * i;
	if (compare(skip(i), "andra", 5) == compare(skip(j), "across", 6))
		statusFlag++;
	if (i != 4 || j != 8)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	char           *pointer;

	for (pointer = protean; skipper >= 0; skipper--)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro339()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: static variable, mistaken as called by address instance  : linear tree structure, in conditional expression,
 * pointer to function returning an integer
 */
{
	static short    i;
	short           divide4();

	i = 12;
	if (dummy1(divide4, i) != 3 || i != 12)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	static short    ii;

	if ((ii = (*func) (integer)) != 3 || integer != 12)
		statusFlag++;
	integer++;
	return (ii);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	static short    iii;

	if ((iii = (*func) (integer)) != 6 || integer != 12)
		statusFlag++;
	integer++;
	return (iii);
}

short
divide2(integer)
	short           integer;
{
	return (integer++ / 2);
}
@def_
@def $macro340()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, legal, no function
 * declaration
 */
{
	static short    i = 1;
	short           result = 0;

	result = recursiveFunction(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	short           result;

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2 || variable != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro341()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, legal, integer
 * function declaration
 */
{
	static short    i = 1;
	short           recursiveFunction(), result = 0;

	result = recursiveFunction(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           result, recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != 2 || variable != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro342()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, function declared to
 * return a pointer to character
 */
{
	char           *s, *recursiveFunction();
	static short    i = 2;

	s = recursiveFunction(i);
	if (*s != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(variable);
		if (*s != '2' || variable != 2)
			statusFlag++;
	}
	return (numbers + variable--);
}
@def_
@def $macro343()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, return value, pointer to function
 * returning an integer
 */
{
	static short    i = 1;
	short           increment(), result = 0;

	result = dummy(increment, i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           result;
	if (--counter) {
		result = dummy(function, variable);
		if (result != 2 || variable != 1)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro344()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, no function declaration
 */
{
	static short    i = 1;

	if (recursiveFunction(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (recursiveFunction(variable) != 2 || variable != 1)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro345()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, function in conditional
 * expression, integer function declaration
 */
{
	short           recursiveFunction();
	static short    i = 1;

	if (recursiveFunction(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           recursiveFunction();

	if (--counter)
		if (recursiveFunction(variable) != 2 || variable != 1)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro346()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, in conditional expression,
 * function declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	static short    i = 2;

	if (*recursiveFunction(i) != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (*recursiveFunction(variable) != '2' || variable != 2)
			statusFlag++;
	return (numbers + variable--);
}
@def_
@def $macro347()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : recursive call, in conditional expression, pointer
 * to function returning an integer
 */
{
	short           increment();
	static short    i = 1;

	if (dummy(increment, i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	if (--counter)
		if (dummy(function, variable) != 2 || variable != 1)
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro348()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, legal, no function
 * declaration
 */
{
	static short    i = 1;
	short           result = 0;

	result = castor(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = variable + 3, result = 0;

	if (--counter) {
		result = pollux(ii);
		if (result != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = variable - 3, result = 0;

	if (--counter) {
		result = castor(iii);
		if (result != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro349()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, legal, function declared to
 * return an integer
 */
{
	static short    i = 1;
	short           castor(), result = 0;

	result = castor(i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           ii = variable + 3, pollux(), result = 0;

	if (--counter) {
		result = pollux(ii);
		if (result != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           iii = variable - 3, result = 0;

	if (--counter) {
		result = castor(iii);
		if (result != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro350()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, function declared to return
 * a pointer to character
 */
{
	char           *s, *castor();
	static short    i = 2;

	s = castor(i);
	if (*s != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	short           ii = variable + 4;
	char           *s, *pollux();

	if (--counter) {
		s = pollux(ii);
		if (*s != '6' || variable != 2)
			statusFlag++;
	}
	return (numbers + variable--);
}

char           *
pollux(variable)
	short           variable;
{
	short           iii = variable - 4;
	char           *s;

	if (--counter) {
		s = castor(iii);
		if (*s != '2' || variable != 6)
			statusFlag++;
	}
	return (numbers + variable--);
}
@def_
@def $macro351()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, return value, pointer to function
 * returning an integer
 */
{
	static short    i = 1;
	short           increment(), result = 0;

	result = castor(increment, i);
	if (result != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = variable + 8, result = 0;
	if (--counter) {
		result = pollux(function, ii);
		if (result != 10 || ii != 9)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = variable - 8, result = 0;
	if (--counter) {
		result = castor(function, iii);
		if (result != 2 || iii != 1)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro352()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, no function
 * declaration
 */
{
	static short    i = 1;

	if (castor(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = variable + 3;
	if (--counter) {
		if (pollux(ii) != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = variable - 3;
	if (--counter) {
		if (castor(iii) != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro353()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return an integer
 */
{
	static short    i = 1;
	short           castor();

	if (castor(i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	static short    ii;
	short           pollux();

	ii = variable + 3;
	if (--counter) {
		if (pollux(ii) != 5 || ii != 4)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 3;
	if (--counter) {
		if (castor(iii) != 2 || iii != 1)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro354()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *castor();
	static short    i = 2;

	if (*castor(i) != '2' || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	static short    ii;

	ii = variable + 4;
	if (--counter) {
		if (*pollux(ii) != '6' || ii != 6)
			statusFlag++;
	}
	return (numbers + variable--);
}

char           *
pollux(variable)
	short           variable;
{
	static short    iii;

	iii = variable - 4;
	if (--counter) {
		if (*castor(iii) != '2' || iii != 2)
			statusFlag++;
	}
	return (numbers + variable--);
}
@def_
@def $macro355()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: static variable, mistaken as called by address instance  : gemini, in conditional expression, pointer to
 * function returning an integer
 */
{
	static short    i = 1;
	short           increment();

	if (castor(increment, i) != 2 || i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	static short    ii;

	ii = variable + 10;
	if (--counter) {
		if (pollux(function, ii) != 12 || ii != 11)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	static short    iii;

	iii = variable - 10;
	if (--counter) {
		if (castor(function, iii) != 2 || iii != 1)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_

@dir ckr.4-2-02
@file >>def.h $macro0() @file_
@file >>fdef.h $macro1() @file_
@file >>ft0701.c $macro2() @file_
@file >>ft0702.c $macro3() @file_
@file >>ft0704.c $macro4() @file_
@file >>ft0706.c $macro5() @file_
@file >>ft0708.c $macro6() @file_
@file >>ft0710.c $macro7() @file_
@file >>ft0711.c $macro8() @file_
@file >>ft0712.c $macro9() @file_
@file >>ft0714.c $macro10() @file_
@file >>ft0716.c $macro11() @file_
@file >>ft0718.c $macro12() @file_
@file >>ft0720.c $macro13() @file_
@file >>ft0721.c $macro14() @file_
@file >>ft0722.c $macro15() @file_
@file >>ft0724.c $macro16() @file_
@file >>ft0726.c $macro17() @file_
@file >>ft0728.c $macro18() @file_
@file >>ft0730.c $macro19() @file_
@file >>ft0801.c $macro20() @file_
@file >>ft0802.c $macro21() @file_
@file >>ft0804.c $macro22() @file_
@file >>ft0806.c $macro23() @file_
@file >>ft0808.c $macro24() @file_
@file >>ft0810.c $macro25() @file_
@file >>ft0811.c $macro26() @file_
@file >>ft0812.c $macro27() @file_
@file >>ft0814.c $macro28() @file_
@file >>ft0816.c $macro29() @file_
@file >>ft0818.c $macro30() @file_
@file >>ft0820.c $macro31() @file_
@file >>ft0821.c $macro32() @file_
@file >>ft0822.c $macro33() @file_
@file >>ft0824.c $macro34() @file_
@file >>ft0826.c $macro35() @file_
@file >>ft0828.c $macro36() @file_
@file >>ft0830.c $macro37() @file_
@file >>ft0901.c $macro38() @file_
@file >>ft0902.c $macro39() @file_
@file >>ft0904.c $macro40() @file_
@file >>ft0906.c $macro41() @file_
@file >>ft0908.c $macro42() @file_
@file >>ft0910.c $macro43() @file_
@file >>ft0911.c $macro44() @file_
@file >>ft0912.c $macro45() @file_
@file >>ft0914.c $macro46() @file_
@file >>ft0916.c $macro47() @file_
@file >>ft0918.c $macro48() @file_
@file >>ft0920.c $macro49() @file_
@file >>ft0921.c $macro50() @file_
@file >>ft0922.c $macro51() @file_
@file >>ft0924.c $macro52() @file_
@file >>ft0926.c $macro53() @file_
@file >>ft0928.c $macro54() @file_
@file >>ft0930.c $macro55() @file_
@file >>ft1001.c $macro56() @file_
@file >>ft1002.c $macro57() @file_
@file >>ft1004.c $macro58() @file_
@file >>ft1006.c $macro59() @file_
@file >>ft1008.c $macro60() @file_
@file >>ft1010.c $macro61() @file_
@file >>ft1011.c $macro62() @file_
@file >>ft1012.c $macro63() @file_
@file >>ft1014.c $macro64() @file_
@file >>ft1016.c $macro65() @file_
@file >>ft1018.c $macro66() @file_
@file >>ft1020.c $macro67() @file_
@file >>ft1021.c $macro68() @file_
@file >>ft1022.c $macro69() @file_
@file >>ft1024.c $macro70() @file_
@file >>ft1026.c $macro71() @file_
@file >>ft1028.c $macro72() @file_
@file >>ft1030.c $macro73() @file_
@file >>ft1101.c $macro74() @file_
@file >>ft1104.c $macro75() @file_
@file >>ft1106.c $macro76() @file_
@file >>ft1108.c $macro77() @file_
@file >>ft1110.c $macro78() @file_
@file >>ft1111.c $macro79() @file_
@file >>ft1112.c $macro80() @file_
@file >>ft1118.c $macro81() @file_
@file >>ft1121.c $macro82() @file_
@file >>ft1122.c $macro83() @file_
@file >>ft1124.c $macro84() @file_
@file >>ft1126.c $macro85() @file_
@file >>ft1128.c $macro86() @file_
@file >>ft1130.c $macro87() @file_
@file >>ft1201.c $macro88() @file_
@file >>ft1202.c $macro89() @file_
@file >>ft1206.c $macro90() @file_
@file >>ft1208.c $macro91() @file_
@file >>ft1210.c $macro92() @file_
@file >>ft1211.c $macro93() @file_
@file >>ft1212.c $macro94() @file_
@file >>ft1214.c $macro95() @file_
@file >>ft1216.c $macro96() @file_
@file >>ft1218.c $macro97() @file_
@file >>ft1220.c $macro98() @file_
@file >>ft1221.c $macro99() @file_
@file >>ft1222.c $macro100() @file_
@file >>ft1224.c $macro101() @file_
@file >>ft1226.c $macro102() @file_
@file >>ft1228.c $macro103() @file_
@file >>ft1230.c $macro104() @file_
@file >>lt0701.c $macro105() @file_
@file >>lt0702.c $macro106() @file_
@file >>lt0704.c $macro107() @file_
@file >>lt0706.c $macro108() @file_
@file >>lt0708.c $macro109() @file_
@file >>lt0710.c $macro110() @file_
@file >>lt0711.c $macro111() @file_
@file >>lt0712.c $macro112() @file_
@file >>lt0714.c $macro113() @file_
@file >>lt0716.c $macro114() @file_
@file >>lt0718.c $macro115() @file_
@file >>lt0720.c $macro116() @file_
@file >>lt0721.c $macro117() @file_
@file >>lt0722.c $macro118() @file_
@file >>lt0724.c $macro119() @file_
@file >>lt0726.c $macro120() @file_
@file >>lt0728.c $macro121() @file_
@file >>lt0730.c $macro122() @file_
@file >>lt0801.c $macro123() @file_
@file >>lt0802.c $macro124() @file_
@file >>lt0804.c $macro125() @file_
@file >>lt0806.c $macro126() @file_
@file >>lt0808.c $macro127() @file_
@file >>lt0810.c $macro128() @file_
@file >>lt0811.c $macro129() @file_
@file >>lt0812.c $macro130() @file_
@file >>lt0814.c $macro131() @file_
@file >>lt0816.c $macro132() @file_
@file >>lt0818.c $macro133() @file_
@file >>lt0820.c $macro134() @file_
@file >>lt0821.c $macro135() @file_
@file >>lt0822.c $macro136() @file_
@file >>lt0824.c $macro137() @file_
@file >>lt0826.c $macro138() @file_
@file >>lt0828.c $macro139() @file_
@file >>lt0830.c $macro140() @file_
@file >>lt0901.c $macro141() @file_
@file >>lt0902.c $macro142() @file_
@file >>lt0904.c $macro143() @file_
@file >>lt0906.c $macro144() @file_
@file >>lt0908.c $macro145() @file_
@file >>lt0910.c $macro146() @file_
@file >>lt0911.c $macro147() @file_
@file >>lt0912.c $macro148() @file_
@file >>lt0914.c $macro149() @file_
@file >>lt0916.c $macro150() @file_
@file >>lt0918.c $macro151() @file_
@file >>lt0920.c $macro152() @file_
@file >>lt0921.c $macro153() @file_
@file >>lt0922.c $macro154() @file_
@file >>lt0924.c $macro155() @file_
@file >>lt0926.c $macro156() @file_
@file >>lt0928.c $macro157() @file_
@file >>lt0930.c $macro158() @file_
@file >>lt1001.c $macro159() @file_
@file >>lt1002.c $macro160() @file_
@file >>lt1004.c $macro161() @file_
@file >>lt1006.c $macro162() @file_
@file >>lt1008.c $macro163() @file_
@file >>lt1010.c $macro164() @file_
@file >>lt1011.c $macro165() @file_
@file >>lt1012.c $macro166() @file_
@file >>lt1014.c $macro167() @file_
@file >>lt1016.c $macro168() @file_
@file >>lt1018.c $macro169() @file_
@file >>lt1020.c $macro170() @file_
@file >>lt1021.c $macro171() @file_
@file >>lt1022.c $macro172() @file_
@file >>lt1024.c $macro173() @file_
@file >>lt1026.c $macro174() @file_
@file >>lt1028.c $macro175() @file_
@file >>lt1030.c $macro176() @file_
@file >>lt1101.c $macro177() @file_
@file >>lt1102.c $macro178() @file_
@file >>lt1104.c $macro179() @file_
@file >>lt1106.c $macro180() @file_
@file >>lt1108.c $macro181() @file_
@file >>lt1110.c $macro182() @file_
@file >>lt1111.c $macro183() @file_
@file >>lt1112.c $macro184() @file_
@file >>lt1114.c $macro185() @file_
@file >>lt1116.c $macro186() @file_
@file >>lt1118.c $macro187() @file_
@file >>lt1120.c $macro188() @file_
@file >>lt1121.c $macro189() @file_
@file >>lt1122.c $macro190() @file_
@file >>lt1124.c $macro191() @file_
@file >>lt1126.c $macro192() @file_
@file >>lt1128.c $macro193() @file_
@file >>lt1130.c $macro194() @file_
@file >>lt1201.c $macro195() @file_
@file >>lt1202.c $macro196() @file_
@file >>lt1206.c $macro197() @file_
@file >>lt1208.c $macro198() @file_
@file >>lt1210.c $macro199() @file_
@file >>lt1211.c $macro200() @file_
@file >>lt1212.c $macro201() @file_
@file >>lt1214.c $macro202() @file_
@file >>lt1216.c $macro203() @file_
@file >>lt1218.c $macro204() @file_
@file >>lt1220.c $macro205() @file_
@file >>lt1221.c $macro206() @file_
@file >>lt1222.c $macro207() @file_
@file >>lt1224.c $macro208() @file_
@file >>lt1226.c $macro209() @file_
@file >>lt1228.c $macro210() @file_
@file >>lt1230.c $macro211() @file_
@file >>t0703.c $macro212() @file_
@file >>t0704.c $macro213() @file_
@file >>t0705.c $macro214() @file_
@file >>t0706.c $macro215() @file_
@file >>t0707.c $macro216() @file_
@file >>t0708.c $macro217() @file_
@file >>t0709.c $macro218() @file_
@file >>t0710.c $macro219() @file_
@file >>t0713.c $macro220() @file_
@file >>t0714.c $macro221() @file_
@file >>t0715.c $macro222() @file_
@file >>t0716.c $macro223() @file_
@file >>t0717.c $macro224() @file_
@file >>t0718.c $macro225() @file_
@file >>t0719.c $macro226() @file_
@file >>t0720.c $macro227() @file_
@file >>t0723.c $macro228() @file_
@file >>t0724.c $macro229() @file_
@file >>t0725.c $macro230() @file_
@file >>t0726.c $macro231() @file_
@file >>t0727.c $macro232() @file_
@file >>t0728.c $macro233() @file_
@file >>t0729.c $macro234() @file_
@file >>t0730.c $macro235() @file_
@file >>t0803.c $macro236() @file_
@file >>t0804.c $macro237() @file_
@file >>t0805.c $macro238() @file_
@file >>t0806.c $macro239() @file_
@file >>t0807.c $macro240() @file_
@file >>t0808.c $macro241() @file_
@file >>t0809.c $macro242() @file_
@file >>t0810.c $macro243() @file_
@file >>t0813.c $macro244() @file_
@file >>t0814.c $macro245() @file_
@file >>t0815.c $macro246() @file_
@file >>t0816.c $macro247() @file_
@file >>t0817.c $macro248() @file_
@file >>t0818.c $macro249() @file_
@file >>t0819.c $macro250() @file_
@file >>t0820.c $macro251() @file_
@file >>t0823.c $macro252() @file_
@file >>t0824.c $macro253() @file_
@file >>t0825.c $macro254() @file_
@file >>t0826.c $macro255() @file_
@file >>t0827.c $macro256() @file_
@file >>t0828.c $macro257() @file_
@file >>t0829.c $macro258() @file_
@file >>t0830.c $macro259() @file_
@file >>t0903.c $macro260() @file_
@file >>t0904.c $macro261() @file_
@file >>t0905.c $macro262() @file_
@file >>t0906.c $macro263() @file_
@file >>t0907.c $macro264() @file_
@file >>t0908.c $macro265() @file_
@file >>t0909.c $macro266() @file_
@file >>t0910.c $macro267() @file_
@file >>t0913.c $macro268() @file_
@file >>t0914.c $macro269() @file_
@file >>t0915.c $macro270() @file_
@file >>t0916.c $macro271() @file_
@file >>t0917.c $macro272() @file_
@file >>t0918.c $macro273() @file_
@file >>t0919.c $macro274() @file_
@file >>t0920.c $macro275() @file_
@file >>t0923.c $macro276() @file_
@file >>t0924.c $macro277() @file_
@file >>t0925.c $macro278() @file_
@file >>t0926.c $macro279() @file_
@file >>t0927.c $macro280() @file_
@file >>t0928.c $macro281() @file_
@file >>t0929.c $macro282() @file_
@file >>t0930.c $macro283() @file_
@file >>t1003.c $macro284() @file_
@file >>t1004.c $macro285() @file_
@file >>t1005.c $macro286() @file_
@file >>t1006.c $macro287() @file_
@file >>t1007.c $macro288() @file_
@file >>t1008.c $macro289() @file_
@file >>t1009.c $macro290() @file_
@file >>t1010.c $macro291() @file_
@file >>t1013.c $macro292() @file_
@file >>t1014.c $macro293() @file_
@file >>t1015.c $macro294() @file_
@file >>t1016.c $macro295() @file_
@file >>t1017.c $macro296() @file_
@file >>t1018.c $macro297() @file_
@file >>t1019.c $macro298() @file_
@file >>t1020.c $macro299() @file_
@file >>t1023.c $macro300() @file_
@file >>t1024.c $macro301() @file_
@file >>t1025.c $macro302() @file_
@file >>t1026.c $macro303() @file_
@file >>t1027.c $macro304() @file_
@file >>t1028.c $macro305() @file_
@file >>t1029.c $macro306() @file_
@file >>t1030.c $macro307() @file_
@file >>t1103.c $macro308() @file_
@file >>t1104.c $macro309() @file_
@file >>t1105.c $macro310() @file_
@file >>t1106.c $macro311() @file_
@file >>t1107.c $macro312() @file_
@file >>t1108.c $macro313() @file_
@file >>t1109.c $macro314() @file_
@file >>t1110.c $macro315() @file_
@file >>t1113.c $macro316() @file_
@file >>t1114.c $macro317() @file_
@file >>t1115.c $macro318() @file_
@file >>t1116.c $macro319() @file_
@file >>t1117.c $macro320() @file_
@file >>t1118.c $macro321() @file_
@file >>t1119.c $macro322() @file_
@file >>t1120.c $macro323() @file_
@file >>t1123.c $macro324() @file_
@file >>t1124.c $macro325() @file_
@file >>t1125.c $macro326() @file_
@file >>t1126.c $macro327() @file_
@file >>t1127.c $macro328() @file_
@file >>t1128.c $macro329() @file_
@file >>t1129.c $macro330() @file_
@file >>t1130.c $macro331() @file_
@file >>t1203.c $macro332() @file_
@file >>t1204.c $macro333() @file_
@file >>t1205.c $macro334() @file_
@file >>t1206.c $macro335() @file_
@file >>t1207.c $macro336() @file_
@file >>t1208.c $macro337() @file_
@file >>t1209.c $macro338() @file_
@file >>t1210.c $macro339() @file_
@file >>t1213.c $macro340() @file_
@file >>t1214.c $macro341() @file_
@file >>t1215.c $macro342() @file_
@file >>t1216.c $macro343() @file_
@file >>t1217.c $macro344() @file_
@file >>t1218.c $macro345() @file_
@file >>t1219.c $macro346() @file_
@file >>t1220.c $macro347() @file_
@file >>t1223.c $macro348() @file_
@file >>t1224.c $macro349() @file_
@file >>t1225.c $macro350() @file_
@file >>t1226.c $macro351() @file_
@file >>t1227.c $macro352() @file_
@file >>t1228.c $macro353() @file_
@file >>t1229.c $macro354() @file_
@file >>t1230.c $macro355() @file_

@dir_
