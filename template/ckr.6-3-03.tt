@comment
  Copyright (C) 2005 Free software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@comment
�����t�@�C�����e�X�g
@comment_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
@def_

@def $macro0()
$LICENSE()
#include "testout.h"
#define NO 0
#define OK 1
#define NoMistake 00
@def_
@def $macro1()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
float           i;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, legal
 */
{

	extern short    statusFlag;

	i = 1.0;
	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro2()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;

recursiveFunction(variable)
	float          *variable;
{
	extern float    i;
	extern short    counter;

	float           rec;

	rec = *variable;
	if (! TGEN_FLT_EQ(rec, i) )
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro3()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
float           i = 1.0;
float           result;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, illegal
 */
{
	extern short    statusFlag;

	result = recursiveFunction(&i);
	if ( TGEN_FLT_EQ(result, 0) )
		result++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro4()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
float           ii;

recursiveFunction(variable)
	float          *variable;
{
	extern float    i;
	extern short    counter;
	extern float    result;


	if (! TGEN_FLT_EQ( (ii = *variable), i) )
		statusFlag++;

	if (--counter)
		result = recursiveFunction(&ii);
	return;
}
@def_
@def $macro5()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, no function declaration
 */
{
	extern short    statusFlag;
	extern float    rec;

	float           result;

	result = recursiveFunction(&i);
	if (! TGEN_FLT_EQ(result, rec) )
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro6()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
float           rec;

recursiveFunction(variable)
	float          *variable;
{
	extern short    counter;
	extern float    i;

	float           result = 0;

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (! TGEN_FLT_EQ(result, rec) )
			statusFlag++;
	}
	rec = i + 1;
	return (i + 1);
}
@def_
@def $macro7()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, integer function declaration
 */
{
	extern short    statusFlag;
	extern float    rec;

	float           result = 0;
	float           recursiveFunction();

	result = recursiveFunction(&i);
	if (! TGEN_FLT_EQ(result, rec) )
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro8()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
float           rec;

float
recursiveFunction(variable)
	float          *variable;
{
	extern short    counter;
	extern float    i;

	float           result = 0;
	float           recursiveFunction();

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (! TGEN_FLT_EQ(result, rec) )
			statusFlag++;
	}
	rec = i + 1;
	return (i + 1);
}
@def_
@def $macro9()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, pointer to function returning an integer
 */
{
	extern float    dum;
	float           result = 0, increment();

	result = dummy(increment, &i);
	if (! TGEN_FLT_EQ(result, dum) )
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro10()
$LICENSE()
$HEAD()
#include "def.h"
float           dum;

dummy(function, variable)
	float           (*function) (), *variable;
{
	extern short    statusFlag;
	extern short    counter;

	float           result;

	if (--counter) {
		result = dummy(function, variable);
		if (! TGEN_FLT_EQ(result, dum) )
			statusFlag++;
	}
	dum = function(*variable);
	return (dum);
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro11()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, no function
 * declaration
 */
{
	extern float    rec;
	float           arg_a, arg_b;

	arg_a = recursiveFunction(&i) - i;
	arg_b = rec;

	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro12()
$LICENSE()
$HEAD()
#include "def.h"
float           rec;

recursiveFunction(variable)
	float          *variable;
{
	extern short    statusFlag;
	extern short    counter;
	float           arg_a, arg_b;

	if (--counter){
		arg_a = (recursiveFunction(variable) - (*variable));
		arg_b = rec;
		if (! TGEN_FLT_EQ(arg_a , arg_b) )
			statusFlag++;
	}

	rec = *variable;
	return ((*variable) + 1);
}
@def_
@def $macro13()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, integer function
 * declaration
 */
{
	extern float    rec;
	float           recursiveFunction();
	float           arg_a, arg_b;

	arg_a = recursiveFunction(&i) - i;
	arg_b = rec;

	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro14()
$LICENSE()
$HEAD()
#include "def.h"
float           rec;

float
recursiveFunction(variable)
	float          *variable;
{
	extern short    statusFlag;
	extern short    counter;

	float           recursiveFunction();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = recursiveFunction(variable) - *variable;
		arg_b = rec;
		if (! TGEN_FLT_EQ(arg_a, arg_b) )
			statusFlag++;
	}

	rec = *variable;
	return ((*variable) + 1);
}
@def_
@def $macro15()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, pointer to function returning
 * an integer
 */
{
	extern float    dum;
	float           increment();
	float           arg_a, arg_b;

	arg_a = dummy(increment, &i);
	arg_b = dum;

	if (! TGEN_FLT_EQ(arg_a, arg_b) )
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro16()
$LICENSE()
$HEAD()
#include "def.h"
float           dum;

dummy(function, variable)
	float           (*function) (), *variable;
{
	extern short    statusFlag;
	extern short    counter;
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, variable);
		arg_b = dum;
		if (! TGEN_FLT_EQ(arg_a, arg_b) )
			statusFlag++;
	}

	dum = function(*variable);
	return (dum);
}


float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro17()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
short           i;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, legal
 */
{

	extern short    statusFlag;

	i = 1;
	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro18()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;

recursiveFunction(variable)
	short          *variable;
{
	extern short    i;
	extern short    counter;

	short           rec;

	rec = *variable;
	if (rec != i)
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro19()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
short           i = 1;
short           result;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, illegal
 */
{
	extern short    statusFlag;

	result = recursiveFunction(&i);
	if (result == 0)
		result++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro20()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
short           ii;

recursiveFunction(variable)
	short          *variable;
{
	extern short    i;
	extern short    counter;
	extern short    result;


	if ((ii = *variable) != i)
		statusFlag++;

	if (--counter)
		result = recursiveFunction(&ii);
	return;
}
@def_
@def $macro21()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, no function declaration
 */
{
	extern short    statusFlag;
	extern short    rec;

	short           result;

	result = recursiveFunction(&i);
	if (result != rec)
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro22()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
short           rec;

recursiveFunction(variable)
	short          *variable;
{
	extern short    counter;
	extern short    i;

	short           result = 0;

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (result != rec)
			statusFlag++;
	}
	rec = i + 1;
	return (i + 1);
}
@def_
@def $macro23()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, integer function declaration
 */
{
	extern short    statusFlag;
	extern short    rec;

	short           result = 0;
	short           recursiveFunction();

	result = recursiveFunction(&i);
	if (result != rec)
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro24()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
short           rec;

short
recursiveFunction(variable)
	short          *variable;
{
	extern short    counter;
	extern short    i;

	short           result = 0;
	short           recursiveFunction();

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (result != rec)
			statusFlag++;
	}
	rec = i + 1;
	return (i + 1);
}
@def_
@def $macro25()
$LICENSE()
$HEAD()

#include "def.h"

short           counter = 10;
char           *numbers = "0123456789";
short           i = 2;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, function declared to return a pointer to
 * character
 */
{
	extern short    statusFlag;
	extern char    *rec;

	char           *s, *recursiveFunction();

	s = recursiveFunction(&i);
	if (*s != *rec)
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro26()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
char           *rec;

char           *
recursiveFunction(variable)
	short          *variable;
{
	extern short    counter;
	extern char    *numbers;

	char           *s;

	if (--counter) {
		s = recursiveFunction(variable);
		if (*s != *rec)
			statusFlag++;
	}
	rec = numbers + (*variable);
	return (rec);
}
@def_
@def $macro27()
$LICENSE()
$HEAD()

#include    "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, pointer to function returning an integer
 */
{
	extern short    dum;
	short           result = 0, increment();

	result = dummy(increment, &i);
	if (result != dum)
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro28()
$LICENSE()
$HEAD()

short           dum;

dummy(function, variable)
	short           (*function) (), *variable;
{
	extern short    statusFlag;
	extern short    counter;

	short           result;

	if (--counter) {
		result = dummy(function, variable);
		if (result != dum)
			statusFlag++;
	}
	dum = function(*variable);
	return (dum);
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro29()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, no function
 * declaration
 */
{
	extern short    rec;

	if (!(recursiveFunction(&i) - i == rec))
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro30()
$LICENSE()
$HEAD()

short           rec;

recursiveFunction(variable)
	short          *variable;
{
	extern short    statusFlag;
	extern short    counter;

	if (--counter)
		if (!(recursiveFunction(variable) - (*variable) == rec))
			statusFlag++;

	rec = *variable;
	return ((*variable) + 1);
}
@def_
@def $macro31()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, integer function
 * declaration
 */
{
	extern short    rec;
	short           recursiveFunction();

	if (!(recursiveFunction(&i) - i == rec))
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro32()
$LICENSE()
$HEAD()

short           rec;

short
recursiveFunction(variable)
	short          *variable;
{
	extern short    statusFlag;
	extern short    counter;

	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(variable) - *variable == rec))
			statusFlag++;

	rec = *variable;
	return ((*variable) + 1);
}
@def_
@def $macro33()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           i = 2;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, function declared to return a
 * pointer to character
 */
{
	extern char    *rec;
	char           *recursiveFunction();

	if (!(*recursiveFunction(&i) == *rec))
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro34()
$LICENSE()
$HEAD()

char           *rec;

char           *
recursiveFunction(variable)
	short          *variable;
{
	extern short    statusFlag;
	extern short    counter;
	extern char    *numbers;

	if (--counter)
		if (!(*recursiveFunction(variable) == *rec))
			statusFlag++;

	rec = numbers + (*variable);
	return (rec);
}
@def_
@def $macro35()
$LICENSE()
$HEAD()

#include "def.h"

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, pointer to function returning
 * an integer
 */
{
	extern short    dum;
	short           increment();

	if (!(dummy(increment, &i) == dum))
		statusFlag++;

	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}
@def_
@def $macro36()
$LICENSE()
$HEAD()

short           dum;

dummy(function, variable)
	short           (*function) (), *variable;
{
	extern short    statusFlag;
	extern short    counter;

	if (--counter)
		if (!(dummy(function, variable) == dum))
			statusFlag++;

	dum = function(*variable);
	return (dum);
}


short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_

@def $macro37()
ft000.c ft001.c
ft100.c ft101.c
ft200.c ft201.c
ft300.c ft301.c
ft500.c ft501.c
ft600.c ft601.c
ft700.c ft701.c
ft900.c ft901.c
t000.c t001.c
t100.c t101.c
t200.c t201.c
t300.c t301.c
t400.c t401.c
t500.c t501.c
t600.c t601.c
t700.c t701.c
t800.c t801.c
t900.c t901.c
@def_

@include
testout.h.inc
@include_

@dir ckr.6-3-03
@file >>def.h $macro0() @file_
@file >>ft000.c $macro1() @file_
@file >>ft001.c $macro2() @file_
@file >>ft100.c $macro3() @file_
@file >>ft101.c $macro4() @file_
@file >>ft200.c $macro5() @file_
@file >>ft201.c $macro6() @file_
@file >>ft300.c $macro7() @file_
@file >>ft301.c $macro8() @file_
@file >>ft500.c $macro9() @file_
@file >>ft501.c $macro10() @file_
@file >>ft600.c $macro11() @file_
@file >>ft601.c $macro12() @file_
@file >>ft700.c $macro13() @file_
@file >>ft701.c $macro14() @file_
@file >>ft900.c $macro15() @file_
@file >>ft901.c $macro16() @file_
@file >>t000.c $macro17() @file_
@file >>t001.c $macro18() @file_
@file >>t100.c $macro19() @file_
@file >>t101.c $macro20() @file_
@file >>t200.c $macro21() @file_
@file >>t201.c $macro22() @file_
@file >>t300.c $macro23() @file_
@file >>t301.c $macro24() @file_
@file >>t400.c $macro25() @file_
@file >>t401.c $macro26() @file_
@file >>t500.c $macro27() @file_
@file >>t501.c $macro28() @file_
@file >>t600.c $macro29() @file_
@file >>t601.c $macro30() @file_
@file >>t700.c $macro31() @file_
@file >>t701.c $macro32() @file_
@file >>t800.c $macro33() @file_
@file >>t801.c $macro34() @file_
@file >>t900.c $macro35() @file_
@file >>t901.c $macro36() @file_
@file >>FILESET $macro37() @file_
@file >>testout.h $testout() @file_
@dir_
