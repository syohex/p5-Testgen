@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "def.h"
@def_

@def $FHEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fdef.h"
@def_

@def $macro0()
$LICENSE()
#include "testout.h"
long            NO = 0;
long            OK = 1;
#define NoMistake 00
@def_

@def $macro1()
$LICENSE()
#include "testout.h"
long            NO = 0;
long            OK = 1;
float           OK_f = 1.0;
float           NO_f = 0.0;
#define NoMistake 00
@def_

@def $macro2()
$LICENSE()
$FHEAD()
short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: float constant instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne(1.0);
	levelOneNodeTwo(2.0);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 1.0)) )
		statusFlag++;
	levelTwoNodeOne(3.0);
	levelTwoNodeTwo(4.0);
}

levelOneNodeTwo(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 2.0)) )
		statusFlag++;
	levelTwoNodeThree(5.0);
	levelTwoNodeFour(6.0);
}

levelTwoNodeOne(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 3.0)) )
		statusFlag++;
	levelThreeLeafOne(7.0);
	levelThreeLeafTwo(8.0);
}

levelTwoNodeTwo(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 4.0)) )
		statusFlag++;
	levelThreeLeafThree(9.0);
	levelThreeLeafFour(10.0);
}

levelTwoNodeThree(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 5.0)) )
		statusFlag++;
	levelThreeLeafFive(11.0);
	levelThreeLeafSix(12.0);
}

levelTwoNodeFour(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 6.0)) )
		statusFlag++;
	levelThreeLeafSeven(13.0);
	levelThreeLeafEight(14.0);
}

levelThreeLeafOne(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 7.0)) )
		statusFlag++;
}

levelThreeLeafTwo(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 8.0)) )
		statusFlag++;
}

levelThreeLeafThree(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 9.0)) )
		statusFlag++;
}

levelThreeLeafFour(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 10.0)) )
		statusFlag++;
}

levelThreeLeafFive(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 11.0)) )
		statusFlag++;
}

levelThreeLeafSix(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 12.0)) )
		statusFlag++;
}

levelThreeLeafSeven(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 13.0)) )
		statusFlag++;
}

levelThreeLeafEight(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 14.0)) )
		statusFlag++;
}
@def_
@def $macro3()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: float constant instance  : linear tree structure, no return value and illegal 
 */
{
	float           i = 0.0;

	i = levelOneNodeOne(1.0);
	i = levelOneNodeTwo(2.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 1.0)) )
		statusFlag++;
	i = levelTwoNodeOne(3.0);
	i = levelTwoNodeTwo(4.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelOneNodeTwo(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 2.0)) )
		statusFlag++;
	i = levelTwoNodeThree(5.0);
	i = levelTwoNodeFour(6.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeOne(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 3.0)) )
		statusFlag++;
	i = levelThreeLeafOne(7.0);
	i = levelThreeLeafTwo(8.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeTwo(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 4.0)) )
		statusFlag++;
	i = levelThreeLeafThree(9.0);
	i = levelThreeLeafFour(10.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeThree(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 5.0)) )
		statusFlag++;
	i = levelThreeLeafFive(11.0);
	i = levelThreeLeafSix(12.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelTwoNodeFour(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 6.0)) )
		statusFlag++;
	i = levelThreeLeafSeven(13.0);
	i = levelThreeLeafEight(14.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
}

levelThreeLeafOne(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 7.0)) )
		statusFlag++;
}

levelThreeLeafTwo(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 8.0)) )
		statusFlag++;
}

levelThreeLeafThree(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 9.0)) )
		statusFlag++;
}

levelThreeLeafFour(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 10.0)) )
		statusFlag++;
}

levelThreeLeafFive(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 11.0)) )
		statusFlag++;
}

levelThreeLeafSix(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 12.0)) )
		statusFlag++;
}

levelThreeLeafSeven(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 13.0)) )
		statusFlag++;
}

levelThreeLeafEight(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 14.0)) )
		statusFlag++;
}
@def_
@def $macro4()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: float constant instance  : linear tree structure, return value and legal, float function declaration 
 */
{
	float           i = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(1.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelOneNodeTwo(2.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
levelOneNodeOne(constant)
	float           constant;
{
	float           i = 0.0;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

 if ( !(TGEN_FLT_EQ(constant, 1.0)) )
		statusFlag++;
	i = levelTwoNodeOne(3.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelTwoNodeTwo(4.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	return (constant);
}

float 
levelOneNodeTwo(constant)
	float           constant;
{
	float           i = 0.0;
	float           levelTwoNodeThree(), levelTwoNodeFour();

 if ( !(TGEN_FLT_EQ(constant, 2.0)) )
		statusFlag++;
	i = levelTwoNodeThree(5.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelTwoNodeFour(6.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	return (constant);
}

float 
levelTwoNodeOne(constant)
	float           constant;
{
	float           i = 0.0;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

 if ( !(TGEN_FLT_EQ(constant, 3.0)) )
		statusFlag++;
	i = levelThreeLeafOne(7.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelThreeLeafTwo(8.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	return (constant);
}

float 
levelTwoNodeTwo(constant)
	float           constant;
{
	float           i = 0.0;
	float           levelThreeLeafThree(), levelThreeLeafFour();

 if ( !(TGEN_FLT_EQ(constant, 4.0)) )
		statusFlag++;
	i = levelThreeLeafThree(9.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelThreeLeafFour(10.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	return (constant);
}

float 
levelTwoNodeThree(constant)
	float           constant;
{
	float           i = 0.0;
	float           levelThreeLeafFive(), levelThreeLeafSix();

 if ( !(TGEN_FLT_EQ(constant, 5.0)) )
		statusFlag++;
	i = levelThreeLeafFive(11.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelThreeLeafSix(12.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	return (constant);
}

float 
levelTwoNodeFour(constant)
	float           constant;
{
	float           i = 0.0;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

 if ( !(TGEN_FLT_EQ(constant, 6.0)) )
		statusFlag++;
	i = levelThreeLeafSeven(13.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	i = 0.0;
	i = levelThreeLeafEight(14.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafOne(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 7.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafTwo(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 8.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafThree(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 9.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafFour(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 10.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafFive(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 11.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafSix(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 12.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafSeven(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 13.0)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafEight(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 14.0)) )
		statusFlag++;
	return (constant);
}
@def_
@def $macro5()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: float constant instance  : linear tree structure, return value, legal pointer to function returning an float 
 */
{
	float           i, divide4(), dummy1();

	i = dummy1(divide4, 12.0);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           i = Float;

	i = (*func) (12.0);
 if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	return (i);
}

float 
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float 
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           i = Float;

	i = (*func) (12.0);
 if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (i);
}

float 
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro6()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: float constant instance  : linear tree structure, used in conditional expression, float function declaration 
 */
{
	float           levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(1.0);
	arg_b = 1.0;

	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
levelOneNodeOne(constant)
	float           constant;
{
	float           levelTwoNodeOne();
	float           arg_a, arg_b;

	arg_a = levelTwoNodeOne(3.0);
	arg_b = 3.0;

	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	return (constant);
}

float 
levelTwoNodeOne(constant)
	float           constant;
{
	float           levelThreeLeafOne();
	float           arg_a, arg_b;

	arg_a = levelThreeLeafOne(7.0);
	arg_b = 7.0;

	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	return (constant);
}

float 
levelThreeLeafOne(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 7.0)) )
		statusFlag++;
	return (constant);
}
@def_
@def $macro7()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: float constant instance  : linear tree structure, in conditional expression, pointer to function returning an
 * float 
 */
{
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	arg_a = dummy1(divide4, 12.0);
	arg_b = 3.0;

	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
dummy1(func, Float)
	float           (*func) (), Float;
{
	float           i = Float;

	if ( !(TGEN_FLT_EQ((i = (*func) (12.0)), 3.0)) )
		statusFlag++;
	return (i);
}

float 
divide4(Float)
	float           Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float 
dummy2(func, Float)
	float           (*func) (), Float;
{
	float           i = Float;

	if ( !(TGEN_FLT_EQ((i = (*func) (12.0)), 6.0)) )
		statusFlag++;
	return (i);
}

float 
divide2(Float)
	float           Float;
{
	return (Float / 2.0);
}
@def_
@def $macro8()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction(1.0);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 1.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(1.0);
}
@def_
@def $macro9()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : recursive call, no return value, illegal 
 */
{
	float           i;

	i = recursiveFunction(0.0);
 if (! TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 0.0)) )
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(0.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
			i++;
	}
	return;
}
@def_
@def $macro10()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : recursive call, return value, legal, float function declaration 
 */
{
	float           i = 0.0;
	float           recursiveFunction();

	i = recursiveFunction(1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
recursiveFunction(constant)
	float           constant;
{
	float           i;
	float           recursiveFunction();

	if (--counter) {
		i = recursiveFunction(1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro11()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : recursive call, return value, pointer to function returning an float 
 */
{
	float           i, increment(), dummy();

	i = dummy(increment, 1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
dummy(function, constant)
	float           (*function) (), constant;
{
	float           i, dummy();
	if (--counter) {
		i = dummy(function, 1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (function(constant));
}

float 
increment(constant)
	float           constant;
{
	return (++constant);
}
@def_
@def $macro12()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : recursive call, function in conditional expression, float function declaration 
 */
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	arg_a = recursiveFunction(1.0);
	arg_b = 2.0;

	if (! (TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
recursiveFunction(constant)
	float           constant;
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = recursiveFunction(1.0);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro13()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : recursive call, in conditional expression, pointer to function returning an float 
 */
{
	float           increment(), dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, 1.0);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
dummy(function, constant)
	float           (*function) (), constant;
{
	float           dummy();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, 1.0);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(constant));
}

float 
increment(constant)
	float           constant;
{
	return (++constant);
}
@def_
@def $macro14()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : gemini, no return value, legal 
 */
{
	castor(1.0);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 1.0)) )
		statusFlag++;
	if (--counter)
		pollux(2.0);
}

pollux(constant)
	float           constant;
{
 if ( !(TGEN_FLT_EQ(constant, 2.0)) )
		statusFlag++;
	if (--counter)
		castor(1.0);
}
@def_
@def $macro15()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : gemini, no return value, illegal 
 */
{
	float           i;

	i = castor(0.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 0.0)) )
		statusFlag++;
	if (--counter) {
		i = pollux(0.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
			i++;
	}
}

pollux(constant)
	float           constant;
{
	float           i;

 if ( !(TGEN_FLT_EQ(constant, 0.0)) )
		statusFlag++;
	if (--counter) {
		i = castor(0.0);
 if ( TGEN_FLT_EQ(i, 0.0) )
			i++;
	}
}
@def_
@def $macro16()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : gemini, return value, legal, function declared to return an float 
 */
{
	float           i = 0.0, castor();

	i = castor(1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
castor(constant)
	float           constant;
{
	float           i, pollux();

	if (--counter) {
		i = pollux(4.0);
 if ( !(TGEN_FLT_EQ(i, 5.0)) )
			statusFlag++;
	}
	return (++constant);
}

float 
pollux(constant)
	float           constant;
{
	float           i, castor();

	if (--counter) {
		i = castor(1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro17()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : gemini, return value, pointer to function returning an float 
 */
{
	float           i, increment(), castor();

	i = castor(increment, 1.0);
 if ( !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
castor(function, constant)
	float           (*function) (), constant;
{
	float           i, pollux();
	if (--counter) {
		i = pollux(function, 9.0);
 if ( !(TGEN_FLT_EQ(i, 10.0)) )
			statusFlag++;
	}
	return (function(constant));
}

float 
pollux(function, constant)
	float           (*function) (), constant;
{
	float           i, castor();
	if (--counter) {
		i = castor(function, 3.0);
 if ( !(TGEN_FLT_EQ(i, 4.0)) )
			statusFlag++;
	}
	return (function(constant));
}

float 
increment(constant)
	float           constant;
{
	return (++constant);
}
@def_
@def $macro18()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : gemini, in conditional expression, function declared to return an float 
 */
{
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(1.0);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
castor(constant)
	float           constant;
{
	float           pollux();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = pollux(4.0);
		arg_b = 5.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++constant);
}

float 
pollux(constant)
	float           constant;
{
	float           castor();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = castor(1.0);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro19()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: float constant instance  : gemini, in conditional expression, pointer to function returning an float 
 */
{
	float           increment(), castor();
	float           arg_a, arg_b;

	arg_a = castor(increment, 1.0);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float 
castor(function, constant)
	float           (*function) (), constant;
{
	float           pollux();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = pollux(function, 9.0);
		arg_b = 10.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(constant));
}

float 
pollux(function, constant)
	float           (*function) (), constant;
{
	float           castor();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = castor(function, 3.0);
		arg_b = 4.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(constant));
}

float 
increment(constant)
	float           constant;
{
	return (++constant);
}
@def_
@def $macro20()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne(1L);
	levelOneNodeTwo(2L);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	long            constant;
{
	if (constant != 1L)
		statusFlag++;
	levelTwoNodeOne(3L);
	levelTwoNodeTwo(4L);
}

levelOneNodeTwo(constant)
	long            constant;
{
	if (constant != 2L)
		statusFlag++;
	levelTwoNodeThree(5L);
	levelTwoNodeFour(6L);
}

levelTwoNodeOne(constant)
	long            constant;
{
	if (constant != 3L)
		statusFlag++;
	levelThreeLeafOne(7L);
	levelThreeLeafTwo(8L);
}

levelTwoNodeTwo(constant)
	long            constant;
{
	if (constant != 4L)
		statusFlag++;
	levelThreeLeafThree(9L);
	levelThreeLeafFour(10L);
}

levelTwoNodeThree(constant)
	long            constant;
{
	if (constant != 5L)
		statusFlag++;
	levelThreeLeafFive(11L);
	levelThreeLeafSix(12L);
}

levelTwoNodeFour(constant)
	long            constant;
{
	if (constant != 6L)
		statusFlag++;
	levelThreeLeafSeven(13L);
	levelThreeLeafEight(14L);
}

levelThreeLeafOne(constant)
	long            constant;
{
	if (constant != 7L)
		statusFlag++;
}

levelThreeLeafTwo(constant)
	long            constant;
{
	if (constant != 8L)
		statusFlag++;
}

levelThreeLeafThree(constant)
	long            constant;
{
	if (constant != 9L)
		statusFlag++;
}

levelThreeLeafFour(constant)
	long            constant;
{
	if (constant != 10L)
		statusFlag++;
}

levelThreeLeafFive(constant)
	long            constant;
{
	if (constant != 11L)
		statusFlag++;
}

levelThreeLeafSix(constant)
	long            constant;
{
	if (constant != 12L)
		statusFlag++;
}

levelThreeLeafSeven(constant)
	long            constant;
{
	if (constant != 13L)
		statusFlag++;
}

levelThreeLeafEight(constant)
	long            constant;
{
	if (constant != 14L)
		statusFlag++;
}
@def_
@def $macro21()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant instance  : linear tree structure, no return value and illegal 
 */
{
	long            i = 0;

	i = levelOneNodeOne(1L);
	i = levelOneNodeTwo(2L);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	long            constant;
{
	long            i;

	if (constant != 1L)
		statusFlag++;
	i = levelTwoNodeOne(3L);
	i = levelTwoNodeTwo(4L);
	if (i == 0L)
		i++;
}

levelOneNodeTwo(constant)
	long            constant;
{
	long            i;

	if (constant != 2L)
		statusFlag++;
	i = levelTwoNodeThree(5L);
	i = levelTwoNodeFour(6L);
	if (i == 0L)
		i++;
}

levelTwoNodeOne(constant)
	long            constant;
{
	long            i;

	if (constant != 3L)
		statusFlag++;
	i = levelThreeLeafOne(7L);
	i = levelThreeLeafTwo(8L);
	if (i == 0L)
		i++;
}

levelTwoNodeTwo(constant)
	long            constant;
{
	long            i;

	if (constant != 4L)
		statusFlag++;
	i = levelThreeLeafThree(9L);
	i = levelThreeLeafFour(10L);
	if (i == 0L)
		i++;
}

levelTwoNodeThree(constant)
	long            constant;
{
	long            i;

	if (constant != 5L)
		statusFlag++;
	i = levelThreeLeafFive(11L);
	i = levelThreeLeafSix(12L);
	if (i == 0L)
		i++;
}

levelTwoNodeFour(constant)
	long            constant;
{
	long            i;

	if (constant != 6L)
		statusFlag++;
	i = levelThreeLeafSeven(13L);
	i = levelThreeLeafEight(14L);
	if (i == 0L)
		i++;
}

levelThreeLeafOne(constant)
	long            constant;
{
	if (constant != 7L)
		statusFlag++;
}

levelThreeLeafTwo(constant)
	long            constant;
{
	if (constant != 8L)
		statusFlag++;
}

levelThreeLeafThree(constant)
	long            constant;
{
	if (constant != 9L)
		statusFlag++;
}

levelThreeLeafFour(constant)
	long            constant;
{
	if (constant != 10L)
		statusFlag++;
}

levelThreeLeafFive(constant)
	long            constant;
{
	if (constant != 11L)
		statusFlag++;
}

levelThreeLeafSix(constant)
	long            constant;
{
	if (constant != 12L)
		statusFlag++;
}

levelThreeLeafSeven(constant)
	long            constant;
{
	if (constant != 13L)
		statusFlag++;
}

levelThreeLeafEight(constant)
	long            constant;
{
	if (constant != 14L)
		statusFlag++;
}
@def_
@def $macro22()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant instance  : linear tree structure, return value and legal, long function declaration 
 */
{
	long            i = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(1L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo(2L);
	if (i == 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
levelOneNodeOne(constant)
	long            constant;
{
	long            i = 0;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	if (constant != 1L)
		statusFlag++;
	i = levelTwoNodeOne(3L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(4L);
	if (i == 0L)
		statusFlag++;
	return (constant);
}

long 
levelOneNodeTwo(constant)
	long            constant;
{
	long            i = 0;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	if (constant != 2L)
		statusFlag++;
	i = levelTwoNodeThree(5L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(6L);
	if (i == 0L)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeOne(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	if (constant != 3L)
		statusFlag++;
	i = levelThreeLeafOne(7L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(8L);
	if (i == 0L)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeTwo(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	if (constant != 4L)
		statusFlag++;
	i = levelThreeLeafThree(9L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(10L);
	if (i == 0L)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeThree(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	if (constant != 5L)
		statusFlag++;
	i = levelThreeLeafFive(11L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(12L);
	if (i == 0L)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeFour(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	if (constant != 6L)
		statusFlag++;
	i = levelThreeLeafSeven(13L);
	if (i == 0L)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(14L);
	if (i == 0L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafOne(constant)
	long            constant;
{
	if (constant != 7L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafTwo(constant)
	long            constant;
{
	if (constant != 8L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafThree(constant)
	long            constant;
{
	if (constant != 9L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafFour(constant)
	long            constant;
{
	if (constant != 10L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafFive(constant)
	long            constant;
{
	if (constant != 11L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafSix(constant)
	long            constant;
{
	if (constant != 12L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafSeven(constant)
	long            constant;
{
	if (constant != 13L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafEight(constant)
	long            constant;
{
	if (constant != 14L)
		statusFlag++;
	return (constant);
}
@def_
@def $macro23()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: long constant instance  : linear tree structure, return value, legal pointer to function returning an long 
 */
{
	long            i, divide4(), dummy1();

	i = dummy1(divide4, 12L);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i = Long;

	i = (*func) (12L);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long 
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long 
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i = Long;

	i = (*func) (12L);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long 
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro24()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant instance  : linear tree structure, used in conditional expression, long function declaration 
 */
{
	long            levelOneNodeOne();

	if (levelOneNodeOne(1L) != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
levelOneNodeOne(constant)
	long            constant;
{
	long            levelTwoNodeOne();

	if (levelTwoNodeOne(3L) != 3L)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeOne(constant)
	long            constant;
{
	long            levelThreeLeafOne();

	if (levelThreeLeafOne(7L) != 7L)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafOne(constant)
	long            constant;
{
	if (constant != 7L)
		statusFlag++;
	return (constant);
}
@def_
@def $macro25()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: long constant instance  : linear tree structure, in conditional expression, pointer to function returning an
 * long 
 */
{
	long            divide4(), dummy1();

	if (dummy1(divide4, 12L) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i = Long;

	if ((i = (*func) (12L)) != 3L)
		statusFlag++;
	return (i);
}

long 
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long 
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i = Long;

	if ((i = (*func) (12L)) != 6L)
		statusFlag++;
	return (i);
}

long 
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro26()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction(1L);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	long            constant;
{
	if (constant != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(1L);
}
@def_
@def $macro27()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : recursive call, no return value, illegal 
 */
{
	long            i;

	i = recursiveFunction(0L);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	long            constant;
{
	long            i;

	if (constant != 0L)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(0L);
		if (i == 0L)
			i++;
	}
	return;
}
@def_
@def $macro28()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : recursive call, return value, legal, long function declaration 
 */
{
	long            i = 0;
	long            recursiveFunction();

	i = recursiveFunction(1L);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
recursiveFunction(constant)
	long            constant;
{
	long            i;
	long            recursiveFunction();

	if (--counter) {
		i = recursiveFunction(1L);
		if (i != 2L)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro29()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : recursive call, return value, pointer to function returning an long 
 */
{
	long            i, increment(), dummy();

	i = dummy(increment, 1L);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy(function, constant)
	long            (*function) (), constant;
{
	long            i, dummy();
	if (--counter) {
		i = dummy(function, 1L);
		if (i != 2L)
			statusFlag++;
	}
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro30()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : recursive call, function in conditional expression, long function declaration 
 */
{
	long            recursiveFunction();

	if (!(recursiveFunction(1L) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
recursiveFunction(constant)
	long            constant;
{
	long            recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(1L) == 2L))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro31()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : recursive call, in conditional expression, pointer to function returning an long 
 */
{
	long            increment(), dummy();

	if (!(dummy(increment, 1L) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy(function, constant)
	long            (*function) (), constant;
{
	long            dummy();
	if (--counter)
		if (!(dummy(function, 1L) == 2L))
			statusFlag++;
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro32()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : gemini, no return value, legal 
 */
{
	castor(1L);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	long            constant;
{
	if (constant != 1L)
		statusFlag++;
	if (--counter)
		pollux(2L);
}

pollux(constant)
	long            constant;
{
	if (constant != 2L)
		statusFlag++;
	if (--counter)
		castor(1L);
}
@def_
@def $macro33()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : gemini, no return value, illegal 
 */
{
	long            i;

	i = castor(0L);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	long            constant;
{
	long            i;

	if (constant != 0L)
		statusFlag++;
	if (--counter) {
		i = pollux(0L);
		if (i == 0L)
			i++;
	}
}

pollux(constant)
	long            constant;
{
	long            i;

	if (constant != 0L)
		statusFlag++;
	if (--counter) {
		i = castor(0L);
		if (i == 0L)
			i++;
	}
}
@def_
@def $macro34()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : gemini, return value, legal, function declared to return an long 
 */
{
	long            i = 0, castor();

	i = castor(1L);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(constant)
	long            constant;
{
	long            i, pollux();

	if (--counter) {
		i = pollux(4L);
		if (i != 5L)
			statusFlag++;
	}
	return (++constant);
}

long 
pollux(constant)
	long            constant;
{
	long            i, castor();

	if (--counter) {
		i = castor(1L);
		if (i != 2L)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro35()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : gemini, return value, pointer to function returning an long 
 */
{
	long            i, increment(), castor();

	i = castor(increment, 1L);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(function, constant)
	long            (*function) (), constant;
{
	long            i, pollux();
	if (--counter) {
		i = pollux(function, 9L);
		if (i != 10L)
			statusFlag++;
	}
	return (function(constant));
}

long 
pollux(function, constant)
	long            (*function) (), constant;
{
	long            i, castor();
	if (--counter) {
		i = castor(function, 3L);
		if (i != 4L)
			statusFlag++;
	}
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro36()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : gemini, in conditional expression, function declared to return an long 
 */
{
	long            castor();

	if (!(castor(1L) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(constant)
	long            constant;
{
	long            pollux();

	if (--counter)
		if (!(pollux(4L) == 5L))
			statusFlag++;
	return (++constant);
}

long 
pollux(constant)
	long            constant;
{
	long            castor();
	if (--counter)
		if (!(castor(1L) == 2L))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro37()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant instance  : gemini, in conditional expression, pointer to function returning an long 
 */
{
	long            increment(), castor();

	if (!(castor(increment, 1L) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(function, constant)
	long            (*function) (), constant;
{
	long            pollux();
	if (--counter)
		if (!(pollux(function, 9L) == 10L))
			statusFlag++;
	return (function(constant));
}

long 
pollux(function, constant)
	long            (*function) (), constant;
{
	long            castor();
	if (--counter)
		if (!(castor(function, 3L) == 4L))
			statusFlag++;
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro38()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant, illegal instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne(2147483648UL);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	long            constant;
{
	if (constant != 2147483648UL)
		statusFlag++;
	levelTwoNodeOne(-2147483649UL);
	levelTwoNodeTwo(-2147483650UL);
}

levelTwoNodeOne(constant)
	long            constant;
{
	if (constant != -2147483649UL)
		statusFlag++;
	levelThreeLeafOne(2147483649UL);
}

levelTwoNodeTwo(constant)
	long            constant;
{
	if (constant != -2147483650UL)
		statusFlag++;
	levelThreeLeafThree(2147483650UL);
}

levelThreeLeafOne(constant)
	long            constant;
{
	if (constant != 2147483649UL)
		statusFlag++;
}

levelThreeLeafThree(constant)
	long            constant;
{
	if (constant != 2147483650UL)
		statusFlag++;
}
@def_
@def $macro39()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant, illegal instance  : linear tree structure, no return value and illegal 
 */
{
	long            i;

	i = levelOneNodeOne(2147483648UL);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	long            constant;
{
	long            i;

	if (constant != 2147483648UL)
		statusFlag++;
	i = levelTwoNodeOne(2147483649UL);
	if (i == 0L)
		i++;
}

levelTwoNodeOne(constant)
	long            constant;
{
	long            i;

	if (constant != 2147483649UL)
		statusFlag++;
	i = levelThreeLeafOne(2147483650UL);
	i = levelThreeLeafTwo(2147483651UL);
	if (i == 0L)
		i++;
}

levelThreeLeafOne(constant)
	long            constant;
{
	if (constant != 2147483650UL)
		statusFlag++;
	return;
}

levelThreeLeafTwo(constant)
	long            constant;
{
	if (constant != 2147483651UL)
		statusFlag++;
	return;
}
@def_
@def $macro40()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant, illegal instance  : linear tree structure, return value and legal, long function declaration 
 */
{
	long            i = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(2147483648UL);
	if (i != 2147483648UL)
		statusFlag++;
	i = 0L;
	i = levelOneNodeTwo(2147483649UL);
	if (i != 2147483649UL)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
levelOneNodeOne(constant)
	long            constant;
{
	long            i = 0;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	i = levelTwoNodeOne(2147483650UL);
	if (i != 2147483650UL)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(2147483651UL);
	if (i != 2147483651UL)
		statusFlag++;
	return (constant);
}

long 
levelOneNodeTwo(constant)
	long            constant;
{
	long            i = 0;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	i = levelTwoNodeThree(2147483652UL);
	if (i != 2147483652UL)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(2147483653UL);
	if (i != 2147483653UL)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeOne(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	i = levelThreeLeafOne(2147483654UL);
	if (i != 2147483654UL)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(2147483655UL);
	if (i != 2147483655UL)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeTwo(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	i = levelThreeLeafThree(2147483656UL);
	if (i != 2147483656UL)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(2147483657UL);
	if (i != 2147483657UL)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeThree(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	i = levelThreeLeafFive(2147483658UL);
	if (i != 2147483658UL)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(2147483659UL);
	if (i != 2147483659UL)
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeFour(constant)
	long            constant;
{
	long            i = 0;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	i = levelThreeLeafSeven(2147483660UL);
	if (i != 2147483660UL)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(2147483661UL);
	if (i != 2147483661UL)
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafOne(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafTwo(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafThree(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafFour(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafFive(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafSix(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafSeven(constant)
	long            constant;
{
	return (constant);
}

long 
levelThreeLeafEight(constant)
	long            constant;
{
	return (constant);
}
@def_
@def $macro41()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: long constant, illegal instance  : linear tree structure, return value, legal pointer to function returning
 * an long 
 */
{
	long            i, divide4(), dummy1();

	i = dummy1(divide4, ((long) (65500 + ($ULONGMAX() & ~0xffffUL))));

	if (i != -9L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i = Long;

	i = (*func) ((long) (65500 + ($ULONGMAX() & ~0xffffUL)));
	if (i != -9L)
		statusFlag++;
	return (i);
}

long 
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long 
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i = Long;

	i = (*func) ((long) (65500 + ($ULONGMAX() & ~0xffffUL)));
	if (i != -18L)
		statusFlag++;
	return (i);
}

long 
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro42()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: long constant, illegal instance  : linear tree structure, used in conditional expression, long function
 * declaration 
 */
{
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(-2147483649UL) == -2147483649UL))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
levelOneNodeOne(constant)
	long            constant;
{
	long            levelTwoNodeOne();

	if (!(levelTwoNodeOne(-2147483650UL) == -2147483650UL))
		statusFlag++;
	return (constant);
}

long 
levelTwoNodeOne(constant)
	long            constant;
{
	long            levelThreeLeafOne();

	if (!(levelThreeLeafOne(-2147483651UL) == -2147483651UL))
		statusFlag++;
	return (constant);
}

long 
levelThreeLeafOne(constant)
	long            constant;
{
	return (constant);
}
@def_
@def $macro43()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: long constant, illegal instance  : linear tree structure, in conditional expression, pointer to function
 * returning an long 
 */
{
	long            divide4(), dummy1();

	if (dummy1(divide4, (long) (60000 + ($ULONGMAX() & ~0xffffUL))) != -1384L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy1(func, Long)
	long            (*func) (), Long;
{
	Long++;
	return ((*func) ((long) (60000 + ($ULONGMAX() & ~0xffffUL))));
}

long 
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long 
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i;

	Long++;
	if ((i = (*func) ((long) (60000 + ($ULONGMAX() & ~0xffffUL)))) != -2768L)
		statusFlag++;
	return (i);
}

long 
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro44()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction(2147483648UL);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	long            constant;
{
	if (constant != 2147483648UL)
		statusFlag++;
	if (--counter)
		recursiveFunction(2147483648UL);
}
@def_
@def $macro45()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : recursive call, no return value, illegal 
 */
{
	long            i;

	i = recursiveFunction(2147483648UL);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	long            constant;
{
	long            i;

	if (constant != 2147483648UL)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(2147483648UL);
		if (i == 0L)
			i++;
	}
	return;
}
@def_
@def $macro46()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : recursive call, return value, legal, long function declaration 
 */
{
	long            i = 0;
	long            recursiveFunction();

	i = recursiveFunction(2147483648UL);
	if (i != 2147483649UL)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
recursiveFunction(constant)
	long            constant;
{
	long            i;
	long            recursiveFunction();

	if (--counter) {
		i = recursiveFunction(2147483648UL);
		if (i != 2147483649UL)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro47()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : recursive call, return value, pointer to function returning an long 
 */
{
	long            i, increment(), dummy();

	i = dummy(increment, -2147483650UL);
	if (i != -2147483649UL)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy(function, constant)
	long            (*function) (), constant;
{
	long            i, dummy();
	if (--counter) {
		i = dummy(function, -2147483650UL);
		if (i != -2147483649UL)
			statusFlag++;
	}
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro48()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : recursive call, function in conditional expression, long function
 * declaration 
 */
{
	long            recursiveFunction();

	if (!(recursiveFunction(2147483650UL) == 2147483649UL))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
recursiveFunction(constant)
	long            constant;
{
	long            recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(2147483650UL) == 2147483649UL))
			statusFlag++;
	return (--constant);
}
@def_
@def $macro49()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : recursive call, in conditional expression, pointer to function returning
 * an long 
 */
{
	long            increment(), dummy();

	if (!(dummy(increment, 2147483650UL) == 2147483651UL))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
dummy(function, constant)
	long            (*function) (), constant;
{
	long            dummy();
	if (--counter)
		if (!(dummy(function, 2147483650UL) == 2147483651UL))
			statusFlag++;
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro50()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : gemini, no return value, legal 
 */
{
	castor(2147483680UL);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	long            constant;
{
	if (constant != 2147483680UL)
		statusFlag++;
	if (--counter)
		pollux(-2147483680UL);
}

pollux(constant)
	long            constant;
{
	if (constant != -2147483680UL)
		statusFlag++;
	if (--counter)
		castor(2147483680UL);
}
@def_
@def $macro51()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : gemini, no return value, illegal 
 */
{
	long            i;

	i = castor(2147483649UL);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	long            constant;
{
	long            i;

	if (constant != 2147483649UL)
		statusFlag++;
	if (--counter) {
		i = pollux(-2147483649UL);
		if (i == 0L)
			i++;
	}
}

pollux(constant)
	long            constant;
{
	long            i;

	if (constant != -2147483649UL)
		statusFlag++;
	if (--counter) {
		i = castor(2147483649UL);
		if (i == 0L)
			i++;
	}
}
@def_
@def $macro52()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : gemini, return value, legal, function declared to return an long 
 */
{
	long            i = 0, castor();

	i = castor(2147483650UL);
	if (i != 2147483651UL)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(constant)
	long            constant;
{
	long            i, pollux();

	if (--counter) {
		i = pollux(2147483650UL);
		if (i != 2147483649UL)
			statusFlag++;
	}
	return (++constant);
}

long 
pollux(constant)
	long            constant;
{
	long            i, castor();

	if (--counter) {
		i = castor(2147483650UL);
		if (i != 2147483651UL)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro53()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : gemini, return value, pointer to function returning an long 
 */
{
	long            i, increment(), castor();

	i = castor(increment, 2147483648UL);
	if (i != 2147483649UL)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(function, constant)
	long            (*function) (), constant;
{
	long            i, pollux();
	if (--counter) {
		i = pollux(function, -2147483649UL);
		if (i != -2147483648UL)
			statusFlag++;
	}
	return (function(constant));
}

long 
pollux(function, constant)
	long            (*function) (), constant;
{
	long            i, castor();
	if (--counter) {
		i = castor(function, 2147483650UL);
		if (i != 2147483651UL)
			statusFlag++;
	}
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro54()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : gemini, in conditional expression, function declared to return an long 
 */
{
	long            castor();

	if (!(castor(2147483650UL) == 2147483651UL))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(constant)
	long            constant;
{
	long            pollux();

	if (--counter)
		if (!(pollux(-2147483650UL) == -2147483649UL))
			statusFlag++;
	return (++constant);
}

long 
pollux(constant)
	long            constant;
{
	long            castor();

	if (--counter)
		if (!(castor(2147483650UL) == 2147483651UL))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro55()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: long constant, illegal instance  : gemini, in conditional expression, pointer to function returning an long 
 */
{
	long            increment(), castor();

	if (!(castor(increment, 2147483650UL) == 2147483651UL))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long 
castor(function, constant)
	long            (*function) (), constant;
{
	long            pollux();
	if (--counter)
		if (!(pollux(function, -2147483650UL) == -2147483649UL))
			statusFlag++;
	return (function(constant));
}

long 
pollux(function, constant)
	long            (*function) (), constant;
{
	long            castor();

	if (--counter)
		if (!(castor(function, 2147483650UL) == 2147483651UL))
			statusFlag++;
	return (function(constant));
}

long 
increment(constant)
	long            constant;
{
	return (++constant);
}
@def_
@def $macro56()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne(1);
	levelOneNodeTwo(2);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	if (constant != 1)
		statusFlag++;
	levelTwoNodeOne(3);
	levelTwoNodeTwo(4);
}

levelOneNodeTwo(constant)
	short           constant;
{
	if (constant != 2)
		statusFlag++;
	levelTwoNodeThree(5);
	levelTwoNodeFour(6);
}

levelTwoNodeOne(constant)
	short           constant;
{
	if (constant != 3)
		statusFlag++;
	levelThreeLeafOne(7);
	levelThreeLeafTwo(8);
}

levelTwoNodeTwo(constant)
	short           constant;
{
	if (constant != 4)
		statusFlag++;
	levelThreeLeafThree(9);
	levelThreeLeafFour(10);
}

levelTwoNodeThree(constant)
	short           constant;
{
	if (constant != 5)
		statusFlag++;
	levelThreeLeafFive(11);
	levelThreeLeafSix(12);
}

levelTwoNodeFour(constant)
	short           constant;
{
	if (constant != 6)
		statusFlag++;
	levelThreeLeafSeven(13);
	levelThreeLeafEight(14);
}

levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != 7)
		statusFlag++;
}

levelThreeLeafTwo(constant)
	short           constant;
{
	if (constant != 8)
		statusFlag++;
}

levelThreeLeafThree(constant)
	short           constant;
{
	if (constant != 9)
		statusFlag++;
}

levelThreeLeafFour(constant)
	short           constant;
{
	if (constant != 10)
		statusFlag++;
}

levelThreeLeafFive(constant)
	short           constant;
{
	if (constant != 11)
		statusFlag++;
}

levelThreeLeafSix(constant)
	short           constant;
{
	if (constant != 12)
		statusFlag++;
}

levelThreeLeafSeven(constant)
	short           constant;
{
	if (constant != 13)
		statusFlag++;
}

levelThreeLeafEight(constant)
	short           constant;
{
	if (constant != 14)
		statusFlag++;
}
@def_
@def $macro57()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, no return value and illegal 
 */
{
	short           i = 0;

	i = levelOneNodeOne(1);
	i = levelOneNodeTwo(2);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	short           i;

	if (constant != 1)
		statusFlag++;
	i = levelTwoNodeOne(3);
	i = levelTwoNodeTwo(4);
	if (i == 0)
		i++;
}

levelOneNodeTwo(constant)
	short           constant;
{
	short           i;

	if (constant != 2)
		statusFlag++;
	i = levelTwoNodeThree(5);
	i = levelTwoNodeFour(6);
	if (i == 0)
		i++;
}

levelTwoNodeOne(constant)
	short           constant;
{
	short           i;

	if (constant != 3)
		statusFlag++;
	i = levelThreeLeafOne(7);
	i = levelThreeLeafTwo(8);
	if (i == 0)
		i++;
}

levelTwoNodeTwo(constant)
	short           constant;
{
	short           i;

	if (constant != 4)
		statusFlag++;
	i = levelThreeLeafThree(9);
	i = levelThreeLeafFour(10);
	if (i == 0)
		i++;
}

levelTwoNodeThree(constant)
	short           constant;
{
	short           i;

	if (constant != 5)
		statusFlag++;
	i = levelThreeLeafFive(11);
	i = levelThreeLeafSix(12);
	if (i == 0)
		i++;
}

levelTwoNodeFour(constant)
	short           constant;
{
	short           i;

	if (constant != 6)
		statusFlag++;
	i = levelThreeLeafSeven(13);
	i = levelThreeLeafEight(14);
	if (i == 0)
		i++;
}

levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != 7)
		statusFlag++;
}

levelThreeLeafTwo(constant)
	short           constant;
{
	if (constant != 8)
		statusFlag++;
}

levelThreeLeafThree(constant)
	short           constant;
{
	if (constant != 9)
		statusFlag++;
}

levelThreeLeafFour(constant)
	short           constant;
{
	if (constant != 10)
		statusFlag++;
}

levelThreeLeafFive(constant)
	short           constant;
{
	if (constant != 11)
		statusFlag++;
}

levelThreeLeafSix(constant)
	short           constant;
{
	if (constant != 12)
		statusFlag++;
}

levelThreeLeafSeven(constant)
	short           constant;
{
	if (constant != 13)
		statusFlag++;
}

levelThreeLeafEight(constant)
	short           constant;
{
	if (constant != 14)
		statusFlag++;
}
@def_
@def $macro58()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	short           i = 0;

	i = levelOneNodeOne(1);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo(2);
	if (i == 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	short           i = 0;

	if (constant != 1)
		statusFlag++;
	i = levelTwoNodeOne(3);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(4);
	if (i == 0)
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	short           constant;
{
	short           i = 0;

	if (constant != 2)
		statusFlag++;
	i = levelTwoNodeThree(5);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(6);
	if (i == 0)
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	short           constant;
{
	short           i = 0;

	if (constant != 3)
		statusFlag++;
	i = levelThreeLeafOne(7);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(8);
	if (i == 0)
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	short           constant;
{
	short           i = 0;

	if (constant != 4)
		statusFlag++;
	i = levelThreeLeafThree(9);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(10);
	if (i == 0)
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	short           constant;
{
	short           i = 0;

	if (constant != 5)
		statusFlag++;
	i = levelThreeLeafFive(11);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(12);
	if (i == 0)
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	short           constant;
{
	short           i = 0;

	if (constant != 6)
		statusFlag++;
	i = levelThreeLeafSeven(13);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(14);
	if (i == 0)
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != 7)
		statusFlag++;
	return (constant);
}

levelThreeLeafTwo(constant)
	short           constant;
{
	if (constant != 8)
		statusFlag++;
	return (constant);
}

levelThreeLeafThree(constant)
	short           constant;
{
	if (constant != 9)
		statusFlag++;
	return (constant);
}

levelThreeLeafFour(constant)
	short           constant;
{
	if (constant != 10)
		statusFlag++;
	return (constant);
}

levelThreeLeafFive(constant)
	short           constant;
{
	if (constant != 11)
		statusFlag++;
	return (constant);
}

levelThreeLeafSix(constant)
	short           constant;
{
	if (constant != 12)
		statusFlag++;
	return (constant);
}

levelThreeLeafSeven(constant)
	short           constant;
{
	if (constant != 13)
		statusFlag++;
	return (constant);
}

levelThreeLeafEight(constant)
	short           constant;
{
	if (constant != 14)
		statusFlag++;
	return (constant);
}
@def_
@def $macro59()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, return value and legal, integer function declaration 
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(1);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo(2);
	if (i == 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	short           constant;
{
	short           i = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	if (constant != 1)
		statusFlag++;
	i = levelTwoNodeOne(3);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(4);
	if (i == 0)
		statusFlag++;
	return (constant);
}

short 
levelOneNodeTwo(constant)
	short           constant;
{
	short           i = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	if (constant != 2)
		statusFlag++;
	i = levelTwoNodeThree(5);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(6);
	if (i == 0)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeOne(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	if (constant != 3)
		statusFlag++;
	i = levelThreeLeafOne(7);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(8);
	if (i == 0)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeTwo(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	if (constant != 4)
		statusFlag++;
	i = levelThreeLeafThree(9);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(10);
	if (i == 0)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeThree(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	if (constant != 5)
		statusFlag++;
	i = levelThreeLeafFive(11);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(12);
	if (i == 0)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeFour(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	if (constant != 6)
		statusFlag++;
	i = levelThreeLeafSeven(13);
	if (i == 0)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(14);
	if (i == 0)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != 7)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafTwo(constant)
	short           constant;
{
	if (constant != 8)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafThree(constant)
	short           constant;
{
	if (constant != 9)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafFour(constant)
	short           constant;
{
	if (constant != 10)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafFive(constant)
	short           constant;
{
	if (constant != 11)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafSix(constant)
	short           constant;
{
	if (constant != 12)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafSeven(constant)
	short           constant;
{
	if (constant != 13)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafEight(constant)
	short           constant;
{
	if (constant != 14)
		statusFlag++;
	return (constant);
}
@def_
@def $macro60()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: integer constant instance  : linear tree structure, return value and legal, function declared to return a
 * pointer to character 
 */
{
	char           *s, *levelOne();

	s = levelOne(1);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(constant)
	short           constant;
{
	char           *s, *levelTwo();
	short           i;

	if (constant != 1)
		statusFlag++;
	s = levelTwo(2);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelTwo(constant)
	short           constant;
{
	char           *s, *levelThree();
	short           i;

	if (constant != 2)
		statusFlag++;
	s = levelThree(3);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelThree(constant)
	short           constant;
{
	char           *s;
	short           i;

	if (constant != 3)
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}
@def_
@def $macro61()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: integer constant instance  : linear tree structure, return value, legal pointer to function returning an
 * integer 
 */
{
	short           i, divide4();

	i = dummy1(divide4, 12);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i = integer;

	i = (*func) (12);
	if (i != 3)
		statusFlag++;
	return (i);
}

short 
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i = integer;

	i = (*func) (12);
	if (i != 6)
		statusFlag++;
	return (i);
}

short 
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro62()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, used in conditional expression, no function declaration 
 */
{
	if (levelOneNodeOne(1) != 1)
		statusFlag++;
	if (levelOneNodeTwo(2) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	if (levelTwoNodeOne(3) != 3)
		statusFlag++;
	if (levelTwoNodeTwo(4) != 4)
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	short           constant;
{
	if (levelTwoNodeThree(5) != 5)
		statusFlag++;
	if (levelTwoNodeFour(6) != 6)
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	short           constant;
{
	if (levelThreeLeafOne(7) != 7)
		statusFlag++;
	if (levelThreeLeafTwo(8) != 8)
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	short           constant;
{
	if (levelThreeLeafThree(9) != 9)
		statusFlag++;
	if (levelThreeLeafFour(10) != 10)
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	short           constant;
{
	if (levelThreeLeafFive(11) != 11)
		statusFlag++;
	if (levelThreeLeafSix(12) != 12)
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	short           constant;
{
	if (levelThreeLeafSeven(13) != 13)
		statusFlag++;
	if (levelThreeLeafEight(14) != 14)
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafTwo(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafThree(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFour(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFive(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSix(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSeven(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafEight(constant)
	short           constant;
{
	return (constant);
}
@def_
@def $macro63()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, used in conditional expression, integer function
 * declaration 
 */
{
	short           levelOneNodeOne();

	if (levelOneNodeOne(1) != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	short           constant;
{
	short           levelTwoNodeOne();

	if (levelTwoNodeOne(3) != 3)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeOne(constant)
	short           constant;
{
	short           levelThreeLeafOne();

	if (levelThreeLeafOne(7) != 7)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != 7)
		statusFlag++;
	return (constant);
}
@def_
@def $macro64()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: integer constant instance  : linear tree structure, used in conditional expression, function declared to
 * return a pointer to character 
 */
{
	char           *skip();

	if (compare(skip(4), "andra", 5) == compare(skip(8), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro65()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: integer constant instance  : linear tree structure, in conditional expression, pointer to function returning
 * an integer 
 */
{
	short           divide4();

	if (dummy1(divide4, 12) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i = integer;

	if ((i = (*func) (12)) != 3)
		statusFlag++;
	return (i);
}

short 
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i = integer;

	if ((i = (*func) (12)) != 6)
		statusFlag++;
	return (i);
}

short 
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro66()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction(1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	if (constant != 1)
		statusFlag++;
	if (--counter)
		recursiveFunction(1);
}
@def_
@def $macro67()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, no return value, illegal 
 */
{
	short           i;

	i = recursiveFunction(0);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	short           i;

	if (constant != 0)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(0);
		if (i == 0)
			i++;
	}
	return;
}
@def_
@def $macro68()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = recursiveFunction(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = recursiveFunction(1);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro69()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, return value, legal, integer function declaration 
 */
{
	short           i = 0;
	short           recursiveFunction();

	i = recursiveFunction(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	short           constant;
{
	short           i;
	short           recursiveFunction();

	if (--counter) {
		i = recursiveFunction(1);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro70()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant instance  : recursive call, return value, function declared to return a pointer to character 
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction(2);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	short           constant;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(3);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro71()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = dummy(increment, 1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	short           (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = dummy(function, 1);
		if (i != 2)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro72()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, function in conditional expression, no function declaration 
 */
{
	if (!(recursiveFunction(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	if (--counter)
		if (!(recursiveFunction(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro73()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, function in conditional expression, integer function declaration 
 */
{
	short           recursiveFunction();

	if (!(recursiveFunction(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	short           constant;
{
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro74()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant instance  : recursive call, in conditional expression, function declared to return a pointer
 * to character 
 */
{
	char           *recursiveFunction();

	if (!(*recursiveFunction(2) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	short           constant;
{
	if (--counter)
		if (!(*recursiveFunction(3) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro75()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : recursive call, in conditional expression, pointer to function returning an
 * integer 
 */
{
	short           increment();

	if (!(dummy(increment, 1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	short           (*function) (), constant;
{
	if (--counter)
		if (!(dummy(function, 1) == 2))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro76()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, no return value, legal 
 */
{
	castor(1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	if (constant != 1)
		statusFlag++;
	if (--counter)
		pollux(2);
}

pollux(constant)
	short           constant;
{
	if (constant != 2)
		statusFlag++;
	if (--counter)
		castor(1);
}
@def_
@def $macro77()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, no return value, illegal 
 */
{
	short           i;

	i = castor(0);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	short           i;

	if (constant != 0)
		statusFlag++;
	if (--counter) {
		i = pollux(0);
		if (i == 0)
			i++;
	}
}

pollux(constant)
	short           constant;
{
	short           i;

	if (constant != 0)
		statusFlag++;
	if (--counter) {
		i = castor(0);
		if (i == 0)
			i++;
	}
}
@def_
@def $macro78()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = castor(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = pollux(4);
		if (i != 5)
			statusFlag++;
	}
	return (++constant);
}

pollux(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = castor(1);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro79()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, return value, legal, function declared to return an integer 
 */
{
	short           i = 0, castor();

	i = castor(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	short           constant;
{
	short           i, pollux();

	if (--counter) {
		i = pollux(4);
		if (i != 5)
			statusFlag++;
	}
	return (++constant);
}

short 
pollux(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = castor(1);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro80()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant instance  : gemini, return value, function declared to return a pointer to character 
 */
{
	char           *s, *castor();

	s = castor(2);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	short           constant;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux(6);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + constant);
}

char           *
pollux(constant)
	short           constant;
{
	char           *s;

	if (--counter) {
		s = castor(3);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro81()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = castor(increment, 1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = pollux(function, 9);
		if (i != 10)
			statusFlag++;
	}
	return (function(constant));
}

pollux(function, constant)
	short           (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = castor(function, 3);
		if (i != 4)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro82()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, in conditional expression, no function declaration 
 */
{
	if (!(castor(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	if (--counter)
		if (!(pollux(4) == 5))
			statusFlag++;
	return (++constant);
}

pollux(constant)
	short           constant;
{
	if (--counter)
		if (!(castor(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro83()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, in conditional expression, function declared to return an integer 
 */
{
	short           castor();

	if (!(castor(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	short           constant;
{
	short           pollux();

	if (--counter)
		if (!(pollux(4) == 5))
			statusFlag++;
	return (++constant);
}

short 
pollux(constant)
	short           constant;
{
	if (--counter)
		if (!(castor(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro84()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant instance  : gemini, in conditional expression, function declared to return a pointer to
 * character 
 */
{
	char           *castor();

	if (!(*castor(2) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	short           constant;
{
	char           *pollux();

	if (--counter)
		if (!(*pollux(6) == '6'))
			statusFlag++;
	return (numbers + constant);
}

char           *
pollux(constant)
	short           constant;
{
	if (--counter)
		if (!(*castor(3) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro85()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant instance  : gemini, in conditional expression, pointer to function returning an integer 
 */
{
	short           increment();

	if (!(castor(increment, 1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) (), constant;
{
	if (--counter)
		if (!(pollux(function, 9) == 10))
			statusFlag++;
	return (function(constant));
}

pollux(function, constant)
	short           (*function) (), constant;
{
	if (--counter)
		if (!(castor(function, 3) == 4))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro86()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne( (short) 32768);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	if (constant != (short) 32768)
		statusFlag++;
	levelTwoNodeOne( (short) -32769);
	levelTwoNodeTwo( (short) -32770);
}

levelTwoNodeOne(constant)
	short           constant;
{
	if (constant != (short) -32769)
		statusFlag++;
	levelThreeLeafOne( (short) 32769);
}

levelTwoNodeTwo(constant)
	short           constant;
{
	if (constant != (short) -32770)
		statusFlag++;
	levelThreeLeafThree( (short) 32770);
}

levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != (short) 32769)
		statusFlag++;
}

levelThreeLeafThree(constant)
	short           constant;
{
	if (constant != (short) 32770)
		statusFlag++;
}
@def_
@def $macro87()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, no return value and illegal 
 */
{
	short           i;

	i = levelOneNodeOne( (short) 32768);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	short           i;

	if (constant != (short) 32768)
		statusFlag++;
	i = levelTwoNodeOne( (short) 32769);
	if (i == 0)
		i++;
}

levelTwoNodeOne(constant)
	short           constant;
{
	short           i;

	if (constant != (short) 32769)
		statusFlag++;
	i = levelThreeLeafOne( (short) 32770);
	i = levelThreeLeafTwo( (short) 32771);
	if (i == 0)
		i++;
}

levelThreeLeafOne(constant)
	short           constant;
{
	if (constant != (short) 32770)
		statusFlag++;
	return;
}

levelThreeLeafTwo(constant)
	short           constant;
{
	if (constant != (short) 32771)
		statusFlag++;
	return;
}
@def_
@def $macro88()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	short           i = 0;

	i = levelOneNodeOne( (short) 32768);
	if (i != (short) 32768)
		statusFlag++;
	i = levelOneNodeTwo( (short) 32769);
	if (i != (short) 32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	short           i = 0;

	i = levelTwoNodeOne( (short) 32770);
	if (i != (short) 32770)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo( (short) 32771);
	if (i != (short) 32771)
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	short           constant;
{
	short           i = 0;

	i = levelTwoNodeThree( (short) 32772);
	if (i != (short) 32772)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour( (short) 32773);
	if (i != (short) 32773)
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	short           constant;
{
	short           i = 0;

	i = levelThreeLeafOne( (short) 32774);
	if (i != (short) 32774)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo( (short) 32775);
	if (i != (short) 32775)
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	short           constant;
{
	short           i = 0;

	i = levelThreeLeafThree( (short) 32776);
	if (i != (short) 32776)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour( (short) 32777);
	if (i != (short) 32777)
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	short           constant;
{
	short           i = 0;

	i = levelThreeLeafFive( (short) 32778);
	if (i != (short) 32778)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix( (short) 32779);
	if (i != (short) 32779)
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	short           constant;
{
	short           i = 0;

	i = levelThreeLeafSeven( (short) 32780);
	if (i != (short) 32780)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight( (short) 32781);
	if (i != (short) 32781)
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafTwo(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafThree(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFour(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFive(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSix(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSeven(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafEight(constant)
	short           constant;
{
	return (constant);
}
@def_
@def $macro89()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, return value and legal, integer function
 * declaration 
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne( (short) 32768);
	if (i != (short) 32768)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo( (short) 32769);
	if (i != (short) 32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	short           constant;
{
	short           i = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	i = levelTwoNodeOne( (short) 32770);
	if (i != (short) 32770)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo( (short) 32771);
	if (i != (short) 32771)
		statusFlag++;
	return (constant);
}

short 
levelOneNodeTwo(constant)
	short           constant;
{
	short           i = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	i = levelTwoNodeThree( (short) 32772);
	if (i != (short) 32772)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour( (short) 32773);
	if (i != (short) 32773)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeOne(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	i = levelThreeLeafOne( (short) 32774);
	if (i != (short) 32774)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo( (short) 32775);
	if (i != (short) 32775)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeTwo(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	i = levelThreeLeafThree( (short) 32776);
	if (i != (short) 32776)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour( (short) 32777);
	if (i != (short) 32777)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeThree(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	i = levelThreeLeafFive( (short) 32778);
	if (i != (short) 32778)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix( (short) 32779);
	if (i != (short) 32779)
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeFour(constant)
	short           constant;
{
	short           i = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	i = levelThreeLeafSeven( (short) 32780);
	if (i != (short) 32780)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight( (short) 32781);
	if (i != (short) 32781)
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafOne(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafTwo(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafThree(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafFour(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafFive(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafSix(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafSeven(constant)
	short           constant;
{
	return (constant);
}

short 
levelThreeLeafEight(constant)
	short           constant;
{
	return (constant);
}
@def_
@def $macro90()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: integer constant, illegal instance  : linear tree structure, return value and legal, function declared to
 * return a pointer to character 
 */
{
	char           *s, *levelOne();

	s = levelOne( (short) 65539);
	if (*s != '3')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(constant)
	short           constant;
{
	char           *s, *levelTwo();
	short           i;

	if (constant != (short) 65539)
		statusFlag++;
	s = levelTwo( (short) 65538);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelTwo(constant)
	short           constant;
{
	char           *s, *levelThree();
	short           i;

	if (constant != (short) 65538)
		statusFlag++;
	s = levelThree( (short) 65537);
	if (*s != '1')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelThree(constant)
	short           constant;
{
	char           *s;
	short           i;

	if (constant != (short) 65537)
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}
@def_
@def $macro91()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: integer constant, illegal instance  : linear tree structure, return value, legal pointer to function
 * returning an integer 
 */
{
	short           i, divide4();

/* i=dummy1(divide4,65500); */
	i = dummy1(divide4, (int) 65500);
	if (i != -9)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i = integer;

/* i=(*func)(65500); */
	i = (*func) ((int) 65500);
	if (i != -9)
		statusFlag++;
	return (i);
}

short 
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i = integer;

/* i=(*func)(65500); */
	i = (*func) ((int) 65500);
	if (i != -18)
		statusFlag++;
	return (i);
}

short 
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro92()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, used in conditional expression, no function
 * declaration 
 */
{
	if (!(levelOneNodeOne( (short) 32768) == (short) 32768))
		statusFlag++;
	if (!(levelOneNodeTwo( (short) 32769) == (short) 32769))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	short           constant;
{
	if (!(levelTwoNodeOne( (short) 32770) == (short) 32770))
		statusFlag++;
	if (!(levelTwoNodeTwo( (short) 32771) == (short) 32771))
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	short           constant;
{
	if (!(levelTwoNodeThree( (short) 32772) == (short) 32772))
		statusFlag++;
	if (!(levelTwoNodeFour( (short) 32773) == (short) 32773))
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	short           constant;
{
	if (!(levelThreeLeafOne( (short) 32774) == (short) 32774))
		statusFlag++;
	if (!(levelThreeLeafTwo( (short) 32775) == (short) 32775))
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	short           constant;
{
	if (!(levelThreeLeafThree( (short) 32776) == (short) 32776))
		statusFlag++;
	if (!(levelThreeLeafFour( (short) 32777) == (short) 32777))
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	short           constant;
{
	if (!(levelThreeLeafFive( (short) 32778) == (short) 32778))
		statusFlag++;
	if (!(levelThreeLeafSix( (short) 32779) == (short) 32779))
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	short           constant;
{
	if (!(levelThreeLeafSeven( (short) 32780) == (short) 32780))
		statusFlag++;
	if (!(levelThreeLeafEight( (short) 32781) == (short) 32781))
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafTwo(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafThree(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFour(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFive(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSix(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSeven(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafEight(constant)
	short           constant;
{
	return (constant);
}
@def_
@def $macro93()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, used in conditional expression, integer
 * function declaration 
 */
{
	short           levelOneNodeOne();

	if (!(levelOneNodeOne( (short) -32769) == (short) -32769))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	short           constant;
{
	short           levelTwoNodeOne();

	if (!(levelTwoNodeOne( (short) -32770) == (short) -32770))
		statusFlag++;
	return (constant);
}

short 
levelTwoNodeOne(constant)
	short           constant;
{
	short           levelThreeLeafOne();

	if (!(levelThreeLeafOne( (short) -32771) == (short) -32771))
		statusFlag++;
	return (constant);
}

short 
levelThreeLeafOne(constant)
	short           constant;
{
	return (constant);
}
@def_
@def $macro94()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: integer constant, illegal instance  : linear tree structure, used in conditional expression, function
 * declared to return a pointer to character 
 */
{
	char           *skip();

	if (compare(skip( (short) 65540), "andra", 5) 
            == compare(skip( (short) 65544), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro95()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: integer constant, illegal instance  : linear tree structure, in conditional expression, pointer to function
 * returning an integer 
 */
{
	short           divide4();

	if (dummy1(divide4, (short) 60000) != (short) -1384)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	integer++;
	return ((*func) ( (short) 60000));
}

short 
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i;

	integer++;
	if ((i = (*func) ( (short) 60000)) != (short) -2768)
		statusFlag++;
	return (i);
}

short 
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro96()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction( (short) 32768);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	if (constant != (short) 32768)
		statusFlag++;
	if (--counter)
		recursiveFunction( (short) 32768);
}
@def_
@def $macro97()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, no return value, illegal 
 */
{
	short           i;

	i = recursiveFunction( (short) 32768);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	short           i;

	if (constant != (short) 32768)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction( (short) 32768);
		if (i == 0)
			i++;
	}
	return;
}
@def_
@def $macro98()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = recursiveFunction( (short) 32768);
	if (i != (short) 32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = recursiveFunction( (short) 32768);
		if (i != (short) 32769)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro99()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, return value, legal, integer function declaration 
 */
{
	short           i = 0;
	short           recursiveFunction();

	i = recursiveFunction( (short) 32768);
	if (i != (short) 32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	short           constant;
{
	short           i;
	short           recursiveFunction();

	if (--counter) {
		i = recursiveFunction( (short) 32768);
		if (i != (short) 32769)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro100()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant, illegal instance  : recursive call, return value, function declared to return a pointer to
 * character 
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction( (short) 65538);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	short           constant;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction( (short) 65539);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro101()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = dummy(increment, (short) -32770);
	if (i != (short) -32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	short           (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = dummy(function, (short) -32770);
		if (i != (short) -32769)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro102()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, function in conditional expression, no function
 * declaration 
 */
{
	if (!(recursiveFunction( (short) 32770) == (short) 32771))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	short           constant;
{
	if (--counter)
		if (!(recursiveFunction( (short) 32772) == (short) 32773))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro103()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, function in conditional expression, integer function
 * declaration 
 */
{
	short           recursiveFunction();

	if (!(recursiveFunction( (short) 32770) == (short) 32769))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	short           constant;
{
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction( (short) 32770) == (short) 32769))
			statusFlag++;
	return (--constant);
}
@def_
@def $macro104()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant, illegal instance  : recursive call, in conditional expression, function declared to return
 * a pointer to character 
 */
{
	char           *recursiveFunction();

	if (!(*recursiveFunction( (short) 65538) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	short           constant;
{
	if (--counter)
		if (!(*recursiveFunction( (short) 65539) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro105()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : recursive call, in conditional expression, pointer to function
 * returning an integer 
 */
{
	short           increment();

	if (!(dummy(increment, (short) 32770) == (short) 32771))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	short           (*function) (), constant;
{
	if (--counter)
		if (!(dummy(function, (short) 32770) == (short) 32771))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro106()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, no return value, legal 
 */
{
	castor( (short) 32800);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	if (constant != (short) 32800)
		statusFlag++;
	if (--counter)
		pollux( (short) -32800);
}

pollux(constant)
	short           constant;
{
	if (constant != (short) -32800)
		statusFlag++;
	if (--counter)
		castor( (short) 32800);
}
@def_
@def $macro107()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, no return value, illegal 
 */
{
	short           i;

	i = castor( (short) 32769);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	short           i;

	if (constant != (short) 32769)
		statusFlag++;
	if (--counter) {
		i = pollux( (short) -32769);
		if (i == 0)
			i++;
	}
}

pollux(constant)
	short           constant;
{
	short           i;

	if (constant != (short) -32769)
		statusFlag++;
	if (--counter) {
		i = castor( (short) 32769);
		if (i == 0)
			i++;
	}
}
@def_
@def $macro108()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = castor( (short) 32768);
	if (i != (short) 32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = pollux( (short) 32770);
		if (i != (short) 32769)
			statusFlag++;
	}
	return (++constant);
}

pollux(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = castor( (short) 32772);
		if (i != (short) 32773)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro109()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, return value, legal, function declared to return an integer 
 */
{
	short           i = 0, castor();

	i = castor( (short) 32770);
	if (i != (short) 32771)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	short           constant;
{
	short           i, pollux();

	if (--counter) {
		i = pollux( (short) 32770);
		if (i != (short) 32769)
			statusFlag++;
	}
	return (++constant);
}

short 
pollux(constant)
	short           constant;
{
	short           i;

	if (--counter) {
		i = castor( (short) 32770);
		if (i != (short) 32771)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro110()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant, illegal instance  : gemini, return value, function declared to return a pointer to
 * character 
 */
{
	char           *s, *castor();

	s = castor( (short) 65538);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	short           constant;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux( (short) 65542);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + constant);
}

char           *
pollux(constant)
	short           constant;
{
	char           *s;

	if (--counter) {
		s = castor( (short) 65539);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro111()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = castor(increment, (short) 32768);
	if (i != (short) 32769)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = pollux(function, (short) -32769);
		if (i != (short) -32768)
			statusFlag++;
	}
	return (function(constant));
}

pollux(function, constant)
	short           (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = castor(function, (short) 32770);
		if (i != (short) 32771)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro112()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, in conditional expression, no function declaration 
 */
{
	if (!(castor( (short) 32770) == (short) 32771))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	if (--counter)
		if (!(pollux( (short) -32770) == (short) -32769))
			statusFlag++;
	return (++constant);
}

pollux(constant)
	short           constant;
{
	if (--counter)
		if (!(castor( (short) 32770) == (short) 32771))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro113()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, in conditional expression, function declared to return an
 * integer 
 */
{
	short           castor();

	if (!(castor( (short) 32770) == (short) 32771))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	short           constant;
{
	short           pollux();

	if (--counter)
		if (!(pollux( (short) -32770) == (short) -32769))
			statusFlag++;
	return (++constant);
}

short 
pollux(constant)
	short           constant;
{
	if (--counter)
		if (!(castor( (short) 32770) == (short) 32771))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro114()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: integer constant, illegal instance  : gemini, in conditional expression, function declared to return a
 * pointer to character 
 */
{
	char           *castor();

	if (!(*castor( (short) 65538) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	short           constant;
{
	char           *pollux();

	if (--counter)
		if (!(*pollux( (short) 65542) == '6'))
			statusFlag++;
	return (numbers + constant);
}

char           *
pollux(constant)
	short           constant;
{
	if (--counter)
		if (!(*castor( (short) 65539) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro115()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: integer constant, illegal instance  : gemini, in conditional expression, pointer to function returning an
 * integer 
 */
{
	short           increment();

	if (!(castor(increment, (short) 32770) == (short) 32771))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) (), constant;
{
	if (--counter)
		if (!(pollux(function, (short) -32770) == (short) -32769))
			statusFlag++;
	return (function(constant));
}

pollux(function, constant)
	short           (*function) (), constant;
{
	if (--counter)
		if (!(castor(function, (short) 32770) == (short) 32771))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	short           constant;
{
	return (++constant);
}
@def_
@def $macro116()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne(1);
	levelOneNodeTwo(2);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	if (constant != 1)
		statusFlag++;
	levelTwoNodeOne(3);
	levelTwoNodeTwo(4);
}

levelOneNodeTwo(constant)
	unsigned        constant;
{
	if (constant != 2)
		statusFlag++;
	levelTwoNodeThree(5);
	levelTwoNodeFour(6);
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	if (constant != 3)
		statusFlag++;
	levelThreeLeafOne(7);
	levelThreeLeafTwo(8);
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	if (constant != 4)
		statusFlag++;
	levelThreeLeafThree(9);
	levelThreeLeafFour(10);
}

levelTwoNodeThree(constant)
	unsigned        constant;
{
	if (constant != 5)
		statusFlag++;
	levelThreeLeafFive(11);
	levelThreeLeafSix(12);
}

levelTwoNodeFour(constant)
	unsigned        constant;
{
	if (constant != 6)
		statusFlag++;
	levelThreeLeafSeven(13);
	levelThreeLeafEight(14);
}

levelThreeLeafOne(constant)
	unsigned        constant;
{
	if (constant != 7)
		statusFlag++;
}

levelThreeLeafTwo(constant)
	unsigned        constant;
{
	if (constant != 8)
		statusFlag++;
}

levelThreeLeafThree(constant)
	unsigned        constant;
{
	if (constant != 9)
		statusFlag++;
}

levelThreeLeafFour(constant)
	unsigned        constant;
{
	if (constant != 10)
		statusFlag++;
}

levelThreeLeafFive(constant)
	unsigned        constant;
{
	if (constant != 11)
		statusFlag++;
}

levelThreeLeafSix(constant)
	unsigned        constant;
{
	if (constant != 12)
		statusFlag++;
}

levelThreeLeafSeven(constant)
	unsigned        constant;
{
	if (constant != 13)
		statusFlag++;
}

levelThreeLeafEight(constant)
	unsigned        constant;
{
	if (constant != 14)
		statusFlag++;
}
@def_
@def $macro117()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, no return value and illegal 
 */
{
	short           i;

	i = levelOneNodeOne(1);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	short           i;

	if (constant != 1)
		statusFlag++;
	i = levelTwoNodeOne(2);
	i = levelTwoNodeTwo(3);
	if (i == 0)
		i++;
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	short           i;

	if (constant != 2)
		statusFlag++;
	i = levelThreeLeafOne(4);
	i = levelThreeLeafTwo(5);
	if (i == 0)
		i++;
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	short           i;

	if (constant != 3)
		statusFlag++;
	i = levelThreeLeafOne(4);
	i = levelThreeLeafTwo(5);
	if (i == 0)
		i++;
}
levelThreeLeafOne(constant)
	unsigned        constant;
{
	if (constant != 4)
		statusFlag++;
	return;
}

levelThreeLeafTwo(constant)
	unsigned        constant;
{
	if (constant != 5)
		statusFlag++;
	return;
}
@def_
@def $macro118()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	unsigned        i = 0;

	i = levelOneNodeOne(1);
	if (i != 2)
		statusFlag++;
	i = levelOneNodeTwo(2);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelTwoNodeOne(1);
	if (i != 2)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(2);
	if (i != 3)
		statusFlag++;
	return (++constant);
}

levelOneNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelTwoNodeThree(1);
	if (i != 2)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(2);
	if (i != 3)
		statusFlag++;
	return (++constant);
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafOne(1);
	if (i != 2)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(2);
	if (i != 3)
		statusFlag++;
	return (++constant);
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafThree(1);
	if (i != 2)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(2);
	if (i != 3)
		statusFlag++;
	return (++constant);
}

levelTwoNodeThree(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafFive(1);
	if (i != 2)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(2);
	if (i != 3)
		statusFlag++;
	return (++constant);
}

levelTwoNodeFour(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafSeven(1);
	if (i != 2)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(2);
	if (i != 3)
		statusFlag++;
	return (++constant);
}

levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafTwo(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafThree(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafFour(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafFive(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafSix(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafSeven(constant)
	unsigned        constant;
{
	return (++constant);
}

levelThreeLeafEight(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro119()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, return value and legal, unsigned function declaration 
 */
{
	unsigned        i = 0;
	unsigned        levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(1);
	if (i != 1)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo(2);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
levelOneNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelTwoNodeOne(), levelTwoNodeTwo();

	i = levelTwoNodeOne(3);
	if (i != 3)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(4);
	if (i != 4)
		statusFlag++;
	return (constant);
}

unsigned 
levelOneNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelTwoNodeThree(), levelTwoNodeFour();

	i = levelTwoNodeThree(5);
	if (i != 5)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(6);
	if (i != 6)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafOne(), levelThreeLeafTwo();

	i = levelThreeLeafOne(7);
	if (i != 7)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(8);
	if (i != 8)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafThree(), levelThreeLeafFour();

	i = levelThreeLeafThree(9);
	if (i != 9)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(10);
	if (i != 10)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeThree(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafFive(), levelThreeLeafSix();

	i = levelThreeLeafFive(11);
	if (i != 11)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(12);
	if (i != 12)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeFour(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafSeven(), levelThreeLeafEight();

	i = levelThreeLeafSeven(13);
	if (i != 13)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(14);
	if (i != 14)
		statusFlag++;
	return (constant);
}

unsigned 
levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafTwo(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafThree(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafFour(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafFive(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafSix(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafSeven(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafEight(constant)
	unsigned        constant;
{
	return (constant);
}
@def_
@def $macro120()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: unsigned constant instance  : linear tree structure, return value and legal, function declared to return a
 * pointer to character 
 */
{
	char           *s, *levelOne();

	s = levelOne(3);
	if (*s != '3')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(constant)
	unsigned        constant;
{
	char           *s, *levelTwo();
	short           i;

	if (constant != 3)
		statusFlag++;
	s = levelTwo(2);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelTwo(constant)
	unsigned        constant;
{
	char           *s, *levelThree();
	short           i;

	if (constant != 2)
		statusFlag++;
	s = levelThree(1);
	if (*s != '1')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelThree(constant)
	unsigned        constant;
{
	char           *s;
	short           i;

	if (constant != 1)
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}
@def_
@def $macro121()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: unsigned constant instance  : linear tree structure, return value, legal pointer to function returning an
 * unsigned 
 */
{
	unsigned        i, divide4();

	i = dummy1(divide4, 16);
	if (i != 4)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	unsigned        (*func) (), integer;
{
	unsigned        i = integer;

	i = (*func) (16);
	if (i != 4)
		statusFlag++;
	return (i);
}

unsigned 
divide4(integer)
	unsigned        integer;
{
	unsigned        divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	unsigned        (*func) (), integer;
{
	unsigned        i = integer;

	i = (*func) (16);
	if (i != 8)
		statusFlag++;
	return (i);
}

unsigned 
divide2(integer)
	unsigned        integer;
{
	return (integer / 2);
}
@def_
@def $macro122()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, used in conditional expression, no function declaration 
 */
{
	if (!(levelOneNodeOne(1) == 1))
		statusFlag++;
	if (!(levelOneNodeTwo(2) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	if (!(levelTwoNodeOne(3) == 3))
		statusFlag++;
	if (!(levelTwoNodeTwo(4) == 4))
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	unsigned        constant;
{
	if (!(levelTwoNodeThree(5) == 5))
		statusFlag++;
	if (!(levelTwoNodeFour(6) == 6))
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafOne(7) == 7))
		statusFlag++;
	if (!(levelThreeLeafTwo(8) == 8))
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafThree(9) == 9))
		statusFlag++;
	if (!(levelThreeLeafFour(10) == 10))
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafFive(11) == 11))
		statusFlag++;
	if (!(levelThreeLeafSix(12) == 12))
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafSeven(13) == 13))
		statusFlag++;
	if (!(levelThreeLeafEight(14) == 14))
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafTwo(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafThree(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFour(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafFive(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSix(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafSeven(constant)
	short           constant;
{
	return (constant);
}

levelThreeLeafEight(constant)
	short           constant;
{
	return (constant);
}
@def_
@def $macro123()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, used in conditional expression, unsigned function
 * declaration 
 */
{
	unsigned        levelOneNodeOne();

	if (!(levelOneNodeOne(1) == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
levelOneNodeOne(constant)
	unsigned        constant;
{
	unsigned        levelTwoNodeOne();

	if (!(levelTwoNodeOne(2) == 2))
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        levelThreeLeafOne();

	if (!(levelThreeLeafOne(3) == 3))
		statusFlag++;
	return (constant);
}

unsigned 
levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (constant);
}
@def_
@def $macro124()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: unsigned constant instance  : linear tree structure, used in conditional expression, function declared to
 * return a pointer to character 
 */
{
	char           *skip();

	if (compare(skip(4), "andra", 5) == compare(skip(8), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	unsigned        skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro125()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: unsigned constant instance  : linear tree structure, in conditional expression, pointer to function returning
 * an unsigned 
 */
{
	unsigned        divide4();

	if (dummy1(divide4, 16) != 4)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	unsigned        (*func) (), integer;
{
	integer++;
	return ((*func) (16));
}

unsigned 
divide4(integer)
	unsigned        integer;
{
	unsigned        divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	unsigned        (*func) (), integer;
{
	unsigned        i;

	integer++;
	if ((i = (*func) (16)) != 8)
		statusFlag++;
	return (i);
}

unsigned 
divide2(integer)
	unsigned        integer;
{
	return (integer / 2);
}
@def_
@def $macro126()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction(1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	if (constant != 1)
		statusFlag++;
	if (--counter)
		recursiveFunction(1);
}
@def_
@def $macro127()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, no return value, illegal 
 */
{
	unsigned        i;

	i = recursiveFunction(0);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        i;

	if (constant != 0)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(0);
		if (i == 0)
			i++;
	}
	return;
}
@def_
@def $macro128()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, return value, legal, no function declaration 
 */
{
	unsigned        i = 0;

	i = recursiveFunction(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        i;

	if (--counter) {
		i = recursiveFunction(1);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro129()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, return value, legal, unsigned function declaration 
 */
{
	unsigned        i = 0;
	unsigned        recursiveFunction();

	i = recursiveFunction(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        i;
	unsigned        recursiveFunction();

	if (--counter) {
		i = recursiveFunction(1);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro130()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant instance  : recursive call, return value, function declared to return a pointer to
 * character 
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction(2);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	unsigned        constant;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(3);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro131()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, return value, pointer to function returning an unsigned 
 */
{
	unsigned        i = 0, increment();

	i = dummy(increment, 2);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	unsigned        (*function) (), constant;
{
	unsigned        i;

	if (--counter) {
		i = dummy(function, 2);
		if (i != 3)
			statusFlag++;
	}
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro132()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, function in conditional expression, no function declaration 
 */
{
	if (!(recursiveFunction(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(recursiveFunction(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro133()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, function in conditional expression, unsigned function
 * declaration 
 */
{
	unsigned        recursiveFunction();

	if (!(recursiveFunction(1) == 0))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(1) == 0))
			statusFlag++;
	return (--constant);
}
@def_
@def $macro134()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant instance  : recursive call, in conditional expression, function declared to return a
 * pointer to character 
 */
{
	char           *recursiveFunction();

	if (!(*recursiveFunction(2) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(*recursiveFunction(3) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro135()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : recursive call, in conditional expression, pointer to function returning an
 * unsigned 
 */
{
	unsigned        increment();

	if (!(dummy(increment, 2) == 3))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	unsigned        (*function) (), constant;
{
	if (--counter)
		if (!(dummy(function, 0) == 1))
			statusFlag++;
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro136()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, no return value, legal 
 */
{
	castor(1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	if (constant != 1)
		statusFlag++;
	if (--counter)
		pollux(2);
}

pollux(constant)
	unsigned        constant;
{
	if (constant != 2)
		statusFlag++;
	if (--counter)
		castor(1);
}
@def_
@def $macro137()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, no return value, illegal 
 */
{
	unsigned        i;

	i = castor(0);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	short           constant;
{
	unsigned        i;

	if (constant != 0)
		statusFlag++;
	if (--counter) {
		i = pollux(0);
		if (i == 0)
			i++;
	}
}

pollux(constant)
	unsigned        constant;
{
	unsigned        i;

	if (constant != 0)
		statusFlag++;
	if (--counter) {
		i = castor(0);
		if (i == 0)
			i++;
	}
}
@def_
@def $macro138()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, return value, legal, no function declaration 
 */
{
	unsigned        i = 0;

	i = castor(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	unsigned        i;

	if (--counter) {
		i = pollux(3);
		if (i != 2)
			statusFlag++;
	}
	return (++constant);
}

pollux(constant)
	unsigned        constant;
{
	unsigned        i;

	if (--counter) {
		i = castor(2);
		if (i != 3)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro139()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, return value, legal, function declared to return an unsigned 
 */
{
	unsigned        i = 0, castor();

	i = castor(1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
castor(constant)
	unsigned        constant;
{
	unsigned        i, pollux();

	if (--counter) {
		i = pollux(1);
		if (i != 0)
			statusFlag++;
	}
	return (++constant);
}

unsigned 
pollux(constant)
	unsigned        constant;
{
	unsigned        i;

	if (--counter) {
		i = castor(1);
		if (i != 2)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro140()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant instance  : gemini, return value, function declared to return a pointer to character 
 */
{
	char           *s, *castor();

	s = castor(2);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	unsigned        constant;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux(6);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + constant);
}

char           *
pollux(constant)
	unsigned        constant;
{
	char           *s;

	if (--counter) {
		s = castor(3);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro141()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, return value, pointer to function returning an unsigned 
 */
{
	unsigned        i, increment();

	i = castor(increment, 3);
	if (i != 4)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	unsigned        (*function) (), constant;
{
	unsigned        i;

	if (--counter) {
		i = pollux(function, 4);
		if (i != 5)
			statusFlag++;
	}
	return (function(constant));
}

pollux(function, constant)
	unsigned        (*function) (), constant;
{
	unsigned        i;

	if (--counter) {
		i = castor(function, 3);
		if (i != 4)
			statusFlag++;
	}
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro142()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, in conditional expression, no function declaration 
 */
{
	if (!(castor(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(pollux(0) == 1))
			statusFlag++;
	return (++constant);
}

pollux(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(castor(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro143()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, in conditional expression, function declared to return an unsigned 
 */
{
	unsigned        castor();

	if (!(castor(1) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
castor(constant)
	unsigned        constant;
{
	unsigned        pollux();

	if (--counter)
		if (!(pollux(0) == 1))
			statusFlag++;
	return (++constant);
}

unsigned 
pollux(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(castor(1) == 2))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro144()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant instance  : gemini, in conditional expression, function declared to return a pointer to
 * character 
 */
{
	char           *castor();

	if (!(*castor(2) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	unsigned        constant;
{
	char           *pollux();

	if (--counter)
		if (!(*pollux(6) == '6'))
			statusFlag++;
	return (numbers + constant);
}

char           *
pollux(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(*castor(3) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro145()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant instance  : gemini, in conditional expression, pointer to function returning an unsigned 
 */
{
	unsigned        increment();

	if (!(castor(increment, 2) == 3))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	unsigned        (*function) (), constant;
{
	if (--counter)
		if (!(pollux(function, 3) == 4))
			statusFlag++;
	return (function(constant));
}

pollux(function, constant)
	unsigned        (*function) (), constant;
{
	if (--counter)
		if (!(castor(function, 0) == 1))
			statusFlag++;
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro146()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne(-1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -1)
		statusFlag++;
	levelTwoNodeOne(-2);
	levelTwoNodeTwo(-3);
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -2)
		statusFlag++;
	levelThreeLeafOne(-4);
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -3)
		statusFlag++;
	levelThreeLeafThree(-5);
}

levelThreeLeafOne(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -4)
		statusFlag++;
}

levelThreeLeafThree(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -5)
		statusFlag++;
}
@def_
@def $macro147()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, no return value and illegal 
 */
{
	unsigned        i;

	i = levelOneNodeOne(-1);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	unsigned        i;

	if (constant != (unsigned) -1)
		statusFlag++;
	i = levelTwoNodeOne(-2);
	if (i == 0)
		i++;
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        i;

	if (constant != (unsigned) -2)
		statusFlag++;
	i = levelThreeLeafOne(-3);
	i = levelThreeLeafTwo(-4);
	if (i == 0)
		i++;
}

levelThreeLeafOne(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -3)
		statusFlag++;
	return;
}

levelThreeLeafTwo(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -4)
		statusFlag++;
	return;
}
@def_
@def $macro148()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, return value and legal, no function
 * declaration 
 */
{
	unsigned        i = 0;

	i = levelOneNodeOne(-1);
	if (i != (short) -1)
		statusFlag++;
	i = levelOneNodeTwo(-2);
	if (i != (short) -2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	short           i = 0;

	i = levelTwoNodeOne(-3);
	if (i != (unsigned) -3)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(-4);
	if (i != (unsigned) -4)
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelTwoNodeThree(-5);
	if (i != (unsigned) -5)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(-6);
	if (i != (unsigned) -6)
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafOne(-7);
	if (i != (unsigned) -7)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(-8);
	if (i != (unsigned) -8)
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafThree(-9);
	if (i != (unsigned) -9)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(-10);
	if (i != (unsigned) -10)
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafFive(-11);
	if (i != (unsigned) -11)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(-12);
	if (i != (unsigned) -12)
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	unsigned        constant;
{
	unsigned        i = 0;

	i = levelThreeLeafSeven(-13);
	if (i != (unsigned) -13)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(-14);
	if (i != (unsigned) -14)
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafTwo(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafThree(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafFour(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafFive(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafSix(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafSeven(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafEight(constant)
	unsigned        constant;
{
	return (constant);
}
@def_
@def $macro149()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, return value and legal, unsigned function
 * declaration 
 */
{
	unsigned        i = 0;
	unsigned        levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(-1);
	if (i != (unsigned) -1)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo(-2);
	if (i != (unsigned) -2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
levelOneNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelTwoNodeOne(), levelTwoNodeTwo();

	i = levelTwoNodeOne(-3);
	if (i != (unsigned) -3)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo(-4);
	if (i != (unsigned) -4)
		statusFlag++;
	return (constant);
}

unsigned 
levelOneNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelTwoNodeThree(), levelTwoNodeFour();

	i = levelTwoNodeThree(-5);
	if (i != (unsigned) -5)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour(-6);
	if (i != (unsigned) -6)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafOne(), levelThreeLeafTwo();

	i = levelThreeLeafOne(-7);
	if (i != (unsigned) -7)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo(-8);
	if (i != (unsigned) -8)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeTwo(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafThree(), levelThreeLeafFour();

	i = levelThreeLeafThree(-9);
	if (i != (unsigned) -9)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour(-10);
	if (i != (unsigned) -10)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeThree(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafFive(), levelThreeLeafSix();

	i = levelThreeLeafFive(-11);
	if (i != (unsigned) -11)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix(-12);
	if (i != (unsigned) -12)
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeFour(constant)
	unsigned        constant;
{
	unsigned        i = 0;
	unsigned        levelThreeLeafSeven(), levelThreeLeafEight();

	i = levelThreeLeafSeven(-13);
	if (i != (unsigned) -13)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight(-14);
	if (i != (unsigned) -14)
		statusFlag++;
	return (constant);
}

unsigned 
levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafTwo(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafThree(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafFour(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafFive(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafSix(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafSeven(constant)
	unsigned        constant;
{
	return (constant);
}

unsigned 
levelThreeLeafEight(constant)
	unsigned        constant;
{
	return (constant);
}
@def_
@def $macro150()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: unsigned constant, illegal instance  : linear tree structure, return value and legal, function declared to
 * return a pointer to character 
 */
{
	char           *s, *levelOne();

	s = levelOne( (unsigned short) -65533);
	if (*s != '3')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(constant)
	unsigned short  constant;
{
	char           *s, *levelTwo();
	unsigned short  i;

	if (constant != (unsigned short) -65533)
		statusFlag++;
	s = levelTwo( (unsigned short) -65534);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelTwo(constant)
	unsigned short  constant;
{
	char           *s, *levelThree();
	unsigned short  i;

	if (constant != (unsigned short) -65534)
		statusFlag++;
	s = levelThree( (unsigned short) -65535);
	if (*s != '1')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelThree(constant)
	unsigned short  constant;
{
	char           *s;
	unsigned short  i;

	if (constant != (unsigned short) -65535)
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}
@def_
@def $macro151()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: unsigned constant, illegal instance  : linear tree structure, return value, legal pointer to function
 * returning an unsigned 
 */
{
	unsigned short  i, divide4();

/* i=dummy1(divide4,-65500); */
	i = dummy1(divide4, (int) -65500);
	if (i != 9)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	unsigned short  (*func) (), integer;
{
	unsigned short  i = integer;

/* i=(*func)(-65500); */
	i = (*func) ((int) -65500);
	if (i != 9)
		statusFlag++;
	return (i);
}

unsigned short 
divide4(integer)
	unsigned short  integer;
{
	unsigned short  divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	unsigned short  (*func) (), integer;
{
	unsigned short  i = integer;

/* i=(*func)(-65500); */
	i = (*func) ((int) -65500);
	if (i != 18)
		statusFlag++;
	return (i);
}

unsigned short 
divide2(integer)
	unsigned short  integer;
{
	return (integer / 2);
}
@def_
@def $macro152()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, used in conditional expression, no function
 * declaration 
 */
{
	if (!(levelOneNodeOne(-1) == (unsigned) -1))
		statusFlag++;
	if (!(levelOneNodeTwo(-2) == (unsigned) -2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	unsigned        constant;
{
	if (!(levelTwoNodeOne(-3) == (unsigned) -3))
		statusFlag++;
	if (!(levelTwoNodeTwo(-4) == (unsigned) -4))
		statusFlag++;
	return (constant);
}

levelOneNodeTwo(constant)
	unsigned        constant;
{
	if (!(levelTwoNodeThree(-5) == (unsigned) -5))
		statusFlag++;
	if (!(levelTwoNodeFour(-6) == (unsigned) -6))
		statusFlag++;
	return (constant);
}

levelTwoNodeOne(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafOne(-7) == (unsigned) -7))
		statusFlag++;
	if (!(levelThreeLeafTwo(-8) == (unsigned) -8))
		statusFlag++;
	return (constant);
}

levelTwoNodeTwo(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafThree(-9) == (unsigned) -9))
		statusFlag++;
	if (!(levelThreeLeafFour(-10) == (unsigned) -10))
		statusFlag++;
	return (constant);
}

levelTwoNodeThree(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafFive(-11) == (unsigned) -11))
		statusFlag++;
	if (!(levelThreeLeafSix(-12) == (unsigned) -12))
		statusFlag++;
	return (constant);
}

levelTwoNodeFour(constant)
	unsigned        constant;
{
	if (!(levelThreeLeafSeven(-13) == (unsigned) -13))
		statusFlag++;
	if (!(levelThreeLeafEight(-14) == (unsigned) -14))
		statusFlag++;
	return (constant);
}

levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafTwo(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafThree(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafFour(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafFive(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafSix(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafSeven(constant)
	unsigned        constant;
{
	return (constant);
}

levelThreeLeafEight(constant)
	unsigned        constant;
{
	return (constant);
}
@def_
@def $macro153()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, used in conditional expression, unsigned
 * function declaration 
 */
{
	unsigned        levelOneNodeOne();

	if (!(levelOneNodeOne(-1) == (short) -1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
levelOneNodeOne(constant)
	unsigned        constant;
{
	unsigned        levelTwoNodeOne();

	if (!(levelTwoNodeOne(-2) == (short) -2))
		statusFlag++;
	return (constant);
}

unsigned 
levelTwoNodeOne(constant)
	unsigned        constant;
{
	unsigned        levelThreeLeafOne();

	if (!(levelThreeLeafOne(-3) == (short) -3))
		statusFlag++;
	return (constant);
}

unsigned 
levelThreeLeafOne(constant)
	unsigned        constant;
{
	return (constant);
}
@def_
@def $macro154()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: unsigned constant, illegal instance  : linear tree structure, used in conditional expression, function
 * declared to return a pointer to character 
 */
{
	char           *skip();

	if (compare(skip(-65532), "andra", 5) == compare(skip(-65528), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	unsigned short  skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro155()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: unsigned constant, illegal instance  : linear tree structure, in conditional expression, pointer to function
 * returning an unsigned 
 */
{
	unsigned short  divide4();

/* if ( dummy1(divide4,-65500) != 9 ) */
	if (dummy1(divide4, (int) -65500) != 9)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	unsigned short  (*func) (), integer;
{
	integer++;
/* return((*func)(-65500)); */
	return ((*func) ((int) -65500));
}

unsigned short 
divide4(integer)
	unsigned short  integer;
{
	unsigned short  divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	unsigned short  (*func) (), integer;
{
	unsigned short  i;

	integer++;
/* if ( (i=(*func)(-65500)) != 18 ) */
	if ((i = (*func) ((int) -65500)) != 18)
		statusFlag++;
	return (i);
}

unsigned short 
divide2(integer)
	unsigned short  integer;
{
	return (integer / 2);
}
@def_
@def $macro156()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction(-1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -1)
		statusFlag++;
	if (--counter)
		recursiveFunction(-1);
}
@def_
@def $macro157()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, no return value, illegal 
 */
{
	recursiveFunction(-1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        i;

	if (constant != (unsigned) -1)
		statusFlag++;
	if (--counter) {
		i = recursiveFunction(-1);
		if (i == 0)
			i++;
	}
	return;
}
@def_
@def $macro158()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, return value, legal, no function declaration 
 */
{
	unsigned        i = 0;

	i = recursiveFunction(-2);
	if (i != (unsigned) -1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        i;

	if (--counter) {
		i = recursiveFunction(-1);
		if (i != (unsigned) 0)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro159()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, return value, legal, unsigned function declaration 
 */
{
	unsigned        i = 0;
	unsigned        recursiveFunction();

	i = recursiveFunction(-1);
	if (i != (unsigned) 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        i;
	unsigned        recursiveFunction();

	if (--counter) {
		i = recursiveFunction(-2);
		if (i != (unsigned) -1)
			statusFlag++;
	}
	return (++constant);
}
@def_
@def $macro160()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, return value, function declared to return a pointer to
 * character 
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction( (unsigned short) -65534);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	unsigned short  constant;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction( (unsigned short) -65533);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro161()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, return value, pointer to function returning an
 * unsigned 
 */
{
	unsigned        i, increment();

	i = dummy(increment, -1);
	if (i != (unsigned) 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	unsigned        (*function) (), constant;
{
	short           i;
	if (--counter) {
		i = dummy(function, -2);
		if (i != (short) -1)
			statusFlag++;
	}
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro162()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, function in conditional expression, no function
 * declaration 
 */
{
	if (!(recursiveFunction(-1) == (unsigned) 0))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(recursiveFunction(-2) == (unsigned) -1))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro163()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, function in conditional expression, unsigned function
 * declaration 
 */
{
	unsigned        recursiveFunction();

	if (!(recursiveFunction(-1) == (unsigned) -2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
recursiveFunction(constant)
	unsigned        constant;
{
	unsigned        recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(0) == (unsigned) -1))
			statusFlag++;
	return (--constant);
}
@def_
@def $macro164()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, in conditional expression, function declared to return
 * a pointer to character 
 */
{
	char           *recursiveFunction();

	if (!(*recursiveFunction( (unsigned short) -65534) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant)
	unsigned short  constant;
{
	if (--counter)
		if (!(*recursiveFunction( (unsigned short) -65533) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro165()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : recursive call, in conditional expression, pointer to function
 * returning an unsigned 
 */
{
	unsigned        increment();

	if (!(dummy(increment, -2) == (unsigned) -1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	unsigned        (*function) (), constant;
{
	if (--counter)
		if (!(dummy(function, -1) == (unsigned) 0))
			statusFlag++;
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro166()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, no return value, legal 
 */
{
	castor(-1);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -1)
		statusFlag++;
	if (--counter)
		pollux(-2);
}

pollux(constant)
	unsigned        constant;
{
	if (constant != (unsigned) -2)
		statusFlag++;
	if (--counter)
		castor(-1);
}
@def_
@def $macro167()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, no return value, illegal 
 */
{
	unsigned        i;

	i = castor(-1);
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	unsigned        i;

	if (constant != (unsigned) -1)
		statusFlag++;
	if (--counter) {
		i = pollux(-2);
		if (i == 0)
			i++;
	}
}

pollux(constant)
	short           constant;
{
	unsigned        i;

	if (constant != (unsigned) -2)
		statusFlag++;
	if (--counter) {
		i = castor(-1);
		if (i == 0)
			i++;
	}
}
@def_
@def $macro168()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, return value, legal, no function declaration 
 */
{
	unsigned        i = 0;

	i = castor(-1);
	if (i != (unsigned) 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	short           i;

	if (--counter) {
		i = pollux(0);
		if (i != (unsigned) -1)
			statusFlag++;
	}
	return (++constant);
}

pollux(constant)
	unsigned        constant;
{
	short           i;

	if (--counter) {
		i = castor(-1);
		if (i != (unsigned) 0)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro169()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, return value, legal, function declared to return an unsigned 
 */
{
	unsigned        i = 0, castor();

	i = castor(-1);
	if (i != (unsigned) 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
castor(constant)
	unsigned        constant;
{
	unsigned        i, pollux();

	if (--counter) {
		i = pollux(0);
		if (i != (unsigned) -1)
			statusFlag++;
	}
	return (++constant);
}

unsigned 
pollux(constant)
	unsigned        constant;
{
	short           i;

	if (--counter) {
		i = castor(-1);
		if (i != (unsigned) 0)
			statusFlag++;
	}
	return (--constant);
}
@def_
@def $macro170()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, return value, function declared to return a pointer to
 * character 
 */
{
	char           *s, *castor();

	s = castor( (unsigned short) -65534);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	unsigned short  constant;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux( (unsigned short) -65530);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + constant);
}

char           *
pollux(constant)
	unsigned short  constant;
{
	char           *s;

	if (--counter) {
		s = castor( (unsigned short) -65533);
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro171()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, return value, pointer to function returning an unsigned 
 */
{
	unsigned        i, increment();

	i = castor(increment, -1);
	if (i != (unsigned) 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	unsigned        (*function) (), constant;
{
	unsigned        i;

	if (--counter) {
		i = pollux(function, -2);
		if (i != (unsigned) -1)
			statusFlag++;
	}
	return (function(constant));
}

pollux(function, constant)
	unsigned        (*function) (), constant;
{
	unsigned        i;

	if (--counter) {
		i = castor(function, -1);
		if (i != (unsigned) 0)
			statusFlag++;
	}
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro172()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, in conditional expression, no function declaration 
 */
{
	if (!(castor(-1) == (unsigned) 0))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(pollux(-2) == (unsigned) -1))
			statusFlag++;
	return (++constant);
}

pollux(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(castor(-1) == (unsigned) 0))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro173()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, in conditional expression, function declared to return an
 * unsigned 
 */
{
	unsigned        castor();

	if (!(castor(-1) == (unsigned) 0))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

unsigned 
castor(constant)
	unsigned        constant;
{
	unsigned        pollux();

	if (--counter)
		if (!(pollux(-2) == (unsigned) -1))
			statusFlag++;
	return (++constant);
}

unsigned 
pollux(constant)
	unsigned        constant;
{
	if (--counter)
		if (!(castor(-1) == (unsigned) 0))
			statusFlag++;
	return (++constant);
}
@def_
@def $macro174()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, in conditional expression, function declared to return a
 * pointer to character 
 */
{
	char           *castor();

	if (!(*castor( (unsigned short) -65534) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant)
	unsigned short  constant;
{
	char           *pollux();

	if (--counter)
		if (!(*pollux( (unsigned short) -65530) == '6'))
			statusFlag++;
	return (numbers + constant);
}

char           *
pollux(constant)
	unsigned short  constant;
{
	if (--counter)
		if (!(*castor( (unsigned short) -65533) == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro175()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: unsigned constant, illegal instance  : gemini, in conditional expression, pointer to function returning an
 * unsigned 
 */
{
	unsigned        increment();

	if (!(castor(increment, -1) == (unsigned) 0))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	unsigned        (*function) (), constant;
{
	if (--counter)
		if (!(pollux(function, -2) == (unsigned) -1))
			statusFlag++;
	return (function(constant));
}

pollux(function, constant)
	unsigned        (*function) (), constant;
{
	if (--counter)
		if (!(castor(function, -1) == (unsigned) 0))
			statusFlag++;
	return (function(constant));
}

unsigned 
increment(constant)
	unsigned        constant;
{
	return (++constant);
}
@def_
@def $macro176()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne("A", 1);
	levelOneNodeTwo("AB", 2);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
	levelTwoNodeOne("ABC", 3);
	levelTwoNodeTwo("ABCD", 4);
}

levelOneNodeTwo(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
	levelTwoNodeThree("ABCDE", 5);
	levelTwoNodeFour("ABCDEF", 6);
}

levelTwoNodeOne(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
	levelThreeLeafOne("ABCDEFG", 7);
	levelThreeLeafTwo("ABCDEFGH", 8);
}

levelTwoNodeTwo(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
	levelThreeLeafThree("ABCDEFGHI", 9);
	levelThreeLeafFour("ABCDEFGHIJ", 10);
}

levelTwoNodeThree(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
	levelThreeLeafFive("ABCDEFGHIJK", 11);
	levelThreeLeafSix("ABCDEFGHIJKL", 12);
}

levelTwoNodeFour(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
	levelThreeLeafSeven("ABCDEFGHIJKLM", 13);
	levelThreeLeafEight("ABCDEFGHIJKLMN", 14);
}

levelThreeLeafOne(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafTwo(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafThree(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafFour(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafFive(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafSix(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafSeven(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}

levelThreeLeafEight(string, constant)
	char           *string;
	short           constant;
{
	short           i;
	for (i = 0; i < constant; i++, string++)
		if (*string != 'A' + i)
			statusFlag++;
}
@def_
@def $macro177()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, no return value and illegal 
 */
{
	short           i;

	i = levelOneNodeOne("A");
	i = levelOneNodeTwo("AB");
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	i = levelTwoNodeOne("ABC");
	i = levelTwoNodeTwo("ABCD");
	if (i == 0)
		i++;
}

levelOneNodeTwo(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	i = levelTwoNodeThree("ABCDE");
	i = levelTwoNodeFour("ABCDEF");
	if (i == 0)
		i++;
}

levelTwoNodeOne(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	i = levelThreeLeafOne("ABCDEFG");
	i = levelThreeLeafTwo("ABCDEFGH");
	if (i == 0)
		i++;
}

levelTwoNodeTwo(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	i = levelThreeLeafThree("ABCDEFGHI");
	i = levelThreeLeafFour("ABCDEFGHIJ");
	if (i == 0)
		i++;
}

levelTwoNodeThree(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	i = levelThreeLeafFive("ABCDEFGHIJK");
	i = levelThreeLeafSix("ABCDEFGHIJKL");
	if (i == 0)
		i++;
}

levelTwoNodeFour(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	i = levelThreeLeafSeven("ABCDEFGHIJKLM");
	i = levelThreeLeafEight("ABCDEFGHIJKLMN");
	if (i == 0)
		i++;
}

levelThreeLeafOne(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafTwo(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafThree(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafFour(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafFive(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafSix(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafSeven(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}

levelThreeLeafEight(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
}
@def_
@def $macro178()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	short           i = 0;

	i = levelOneNodeOne("A");
	if (i != 1)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char           *constant;
{
	short           i = 0;

	i = levelTwoNodeOne("ABC");
	if (i != 3)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo("ABCD");
	if (i != 4)
		statusFlag++;
	return (mystrlen(constant));
}

levelOneNodeTwo(constant)
	char           *constant;
{
	short           i = 0;

	i = levelTwoNodeThree("ABCDE");
	if (i != 5)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour("ABCDEF");
	if (i != 6)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeOne(constant)
	char           *constant;
{
	short           i = 0;

	i = levelThreeLeafOne("ABCDEFG");
	if (i != 7)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo("ABCDEFGH");
	if (i != 8)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeTwo(constant)
	char           *constant;
{
	short           i = 0;

	i = levelThreeLeafThree("ABCDEFGHI");
	if (i != 9)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour("ABCDEFGHIJ");
	if (i != 10)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeThree(constant)
	char           *constant;
{
	short           i = 0;

	i = levelThreeLeafFive("ABCDEFGHIJK");
	if (i != 11)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix("ABCDEFGHIJKL");
	if (i != 12)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeFour(constant)
	char           *constant;
{
	short           i = 0;

	i = levelThreeLeafSeven("ABCDEFGHIKJLM");
	if (i != 13)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight("ABCDEFGHIKJLMN");
	if (i != 14)
		statusFlag++;
	return (mystrlen(constant));
}

levelThreeLeafOne(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafTwo(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafThree(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafFour(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafFive(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafSix(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafSeven(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafEight(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro179()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, return value and legal, integer function declaration 
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne("A");
	if (i != 1)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	char           *constant;
{
	short           i = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	i = levelTwoNodeOne("ABC");
	if (i != 3)
		statusFlag++;
	i = 0;
	i = levelTwoNodeTwo("ABCD");
	if (i != 4)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelOneNodeTwo(constant)
	char           *constant;
{
	short           i = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	i = levelTwoNodeThree("ABCDE");
	if (i != 5)
		statusFlag++;
	i = 0;
	i = levelTwoNodeFour("ABCDEF");
	if (i != 6)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeOne(constant)
	char           *constant;
{
	short           i = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	i = levelThreeLeafOne("ABCDEFG");
	if (i != 7)
		statusFlag++;
	i = 0;
	i = levelThreeLeafTwo("ABCDEFGH");
	if (i != 8)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeTwo(constant)
	char           *constant;
{
	short           i = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	i = levelThreeLeafThree("ABCDEFGHI");
	if (i != 9)
		statusFlag++;
	i = 0;
	i = levelThreeLeafFour("ABCDEFGHIJ");
	if (i != 10)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeThree(constant)
	char           *constant;
{
	short           i = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	i = levelThreeLeafFive("ABCDEFGHIJK");
	if (i != 11)
		statusFlag++;
	i = 0;
	i = levelThreeLeafSix("ABCDEFGHIJKL");
	if (i != 12)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeFour(constant)
	char           *constant;
{
	short           i = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	i = levelThreeLeafSeven("ABCDEFGHIKJLM");
	if (i != 13)
		statusFlag++;
	i = 0;
	i = levelThreeLeafEight("ABCDEFGHIKJLMN");
	if (i != 14)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelThreeLeafOne(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafTwo(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafThree(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafFour(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafFive(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafSix(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafSeven(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

short 
levelThreeLeafEight(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro180()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: literal string instance  : linear tree structure, return value and legal, function declared to return a
 * pointer to character 
 */
{
	char           *s, *levelOne();

	s = levelOne("0123456789", 1);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(numbers, constant)
	char           *numbers;
	short           constant;
{
	char           *s, *levelTwo();
	short           i;

	if (constant != 1)
		statusFlag++;
	s = levelTwo("0123456789", 2);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelTwo(numbers, constant)
	char           *numbers;
	short           constant;
{
	char           *s, *levelThree();
	short           i;

	if (constant != 2)
		statusFlag++;
	s = levelThree("0123456789", 3);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelThree(numbers, constant)
	char           *numbers;
	short           constant;
{
	char           *s;
	short           i;

	if (constant != 3)
		statusFlag++;
	for (s = numbers, i = 0; i < constant; i++, s++);
	return (s);
}
@def_
@def $macro181()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: literal string instance  : linear tree structure, return value, legal pointer to function returning an
 * integer 
 */
{
	short           i, divide4();

	i = dummy1(divide4, "ABCDEFGHIJKL");
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, string)
	short           (*func) ();
char           *string;
{
	short           i;

	string++;
	i = (*func) ("ABCDEFGHIJKL");
	if (i != 3)
		statusFlag++;
	return (i);
}

short 
divide4(string)
	char           *string;
{
	short           divide2();

	return (dummy2(divide2, string) / 2);
}

dummy2(func, string)
	short           (*func) ();
char           *string;
{
	short           i;

	string++;
	i = (*func) ("ABCDEFGHIJKL");
	if (i != 6)
		statusFlag++;
	return (i);
}

short 
divide2(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i / 2);
}
@def_
@def $macro182()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	if (!(levelOneNodeOne("A") == 1))
		statusFlag++;
	if (!(levelOneNodeTwo("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char           *constant;
{
	if (!(levelTwoNodeOne("ABC") == 3))
		statusFlag++;
	if (!(levelTwoNodeTwo("ABCD") == 4))
		statusFlag++;
	return (mystrlen(constant));
}

levelOneNodeTwo(constant)
	char           *constant;
{
	if (!(levelTwoNodeThree("ABCDE") == 5))
		statusFlag++;
	if (!(levelTwoNodeFour("ABCDEF") == 6))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeOne(constant)
	char           *constant;
{
	if (!(levelThreeLeafOne("ABCDEFG") == 7))
		statusFlag++;
	if (!(levelThreeLeafTwo("ABCDEFGH") == 8))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeTwo(constant)
	char           *constant;
{
	if (!(levelThreeLeafThree("ABCDEFGHI") == 9))
		statusFlag++;
	if (!(levelThreeLeafFour("ABCDEFGHIJ") == 10))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeThree(constant)
	char           *constant;
{
	if (!(levelThreeLeafFive("ABCDEFGHIJK") == 11))
		statusFlag++;
	if (!(levelThreeLeafSix("ABCDEFGHIJKL") == 12))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeFour(constant)
	char           *constant;
{
	if (!(levelThreeLeafSeven("ABCDEFGHIKJLM") == 13))
		statusFlag++;
	if (!(levelThreeLeafEight("ABCDEFGHIKJLMN") == 14))
		statusFlag++;
	return (mystrlen(constant));
}

levelThreeLeafOne(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafTwo(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafThree(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafFour(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafFive(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafSix(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafSeven(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

levelThreeLeafEight(constant)
	char           *constant;
{
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro183()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, used in conditional expression, integer function
 * declaration 
 */
{
	short           levelOneNodeOne();

	if (!levelOneNodeOne("A"))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	char           *constant;
{
	short           levelTwoNodeOne();

	if (!levelTwoNodeOne("ABC"))
		statusFlag++;
	return (mystrlen(constant) == 1 ? 1 : 0);
}

short 
levelTwoNodeOne(constant)
	char           *constant;
{
	short           levelThreeLeafOne();

	if (!levelThreeLeafOne("ABCDEFG"))
		statusFlag++;
	return (mystrlen(constant) == 3 ? 1 : 0);
}

short 
levelThreeLeafOne(constant)
	char           *constant;
{
	return (mystrlen(constant) == 7 ? 1 : 0);
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro184()
$LICENSE()
$HEAD()

main()				/* alias root */
/*
 *  test class: literal string instance  : linear tree structure, used in conditional expression, function declared to
 * return a pointer to character 
 */
{
	char           *skip();

	if (compare(skip(4, "cassandracross"), "andra", 5) == compare(skip(8, "cassandracross"), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper, string)
	short           skipper;
	char           *string;
{
	short           i;

	for (i = 0; i < skipper; i++)
		string++;
	return (string);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro185()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: literal string instance  : linear tree structure, in conditional expression, pointer to function returning an
 * integer 
 */
{
	short           divide4();

	if (dummy1(divide4, "ABCDEFGHIJKL") != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, string)
	short           (*func) ();
char           *string;
{
	short           i;

	string++;
	if ((i = (*func) ("ABCDEFGHIJKL")) != 3)
		statusFlag++;
	return (i);
}

short 
divide4(string)
	char           *string;
{
	short           divide2();

	return (dummy2(divide2, string) / 2);
}

dummy2(func, string)
	short           (*func) ();
char           *string;
{
	short           i;

	string++;
	if ((i = (*func) ("ABCDEFGHIJKL")) != 6)
		statusFlag++;
	return (i);
}

short 
divide2(string)
	char           *string;
{
	return (mystrlen(string) / 2);
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro186()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction("A");
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char           *constant;
{

	short           i;
	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	if (--counter)
		recursiveFunction("ABC");
}
@def_
@def $macro187()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, no return value, illegal 
 */
{
	short           i;

	i = recursiveFunction("ABC");
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	if (--counter) {
		i = recursiveFunction("ABC");
		if (i == 0)
			i++;
	}
	return;
}
@def_
@def $macro188()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = recursiveFunction("ABC");
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char           *constant;
{
	short           i;

	if (--counter) {
		i = recursiveFunction("ABC");
		if (i != 3)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro189()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, return value, legal, integer function declaration 
 */
{
	short           i = 0;
	short           recursiveFunction();

	i = recursiveFunction("ABC");
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	char           *constant;
{
	short           i;
	short           recursiveFunction();

	if (--counter) {
		i = recursiveFunction("ABC");
		if (i != 3)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro190()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, return value, function declared to return a pointer to character 
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction(2, "0123456789");
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant, numbers)
	short           constant;
	char           *numbers;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(3, "0123456789");
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro191()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, return value, pointer to function returning an integer 
 */
{
	char           *i, *dummy(), *increment();

	i = dummy(increment, 6, "0123456789");
	if (*i != '6')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
dummy(function, constant, string)
	char           *(*function) ();
short           constant;
char           *string;
{
	char           *i;
	if (--counter) {
		i = dummy(function, 1, "0123456789");
		if (*i != '1')
			statusFlag++;
	}
	return (function(constant, string));
}

char           *
increment(constant, string)
	char            constant;
	char           *string;
{
	return (string + constant);
}
@def_
@def $macro192()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, function in conditional expression, no function declaration 
 */
{
	if (!(recursiveFunction("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char           *constant;
{
	if (--counter)
		if (!(recursiveFunction("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro193()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, function in conditional expression, integer function declaration 
 */
{
	short           recursiveFunction();

	if (!(recursiveFunction("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	char           *constant;
{
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro194()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, in conditional expression, function declared to return a pointer
 * to character 
 */
{
	char           *recursiveFunction();

	if (!(*recursiveFunction(2, "0123456789") == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant, numbers)
	short           constant;
	char           *numbers;
{
	if (--counter)
		if (!(*recursiveFunction(3, "0123456789") == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro195()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : recursive call, in conditional expression, pointer to function returning a
 * character pointer 
 */
{
	char           *dummy(), *increment();

	if (!(*dummy(increment, 1, "0123456789") == '1'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
dummy(function, constant, string)
	char           *(*function) ();
short           constant;
char           *string;
{
	if (--counter)
		if (!(*dummy(function, 1, "0123456789") == '1'))
			statusFlag++;
	return (function(constant, string));
}

char           *
increment(constant, string)
	short           constant;
	char           *string;
{
	return (string + constant);
}
@def_
@def $macro196()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, no return value, legal 
 */
{
	castor("A");
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char           *constant;
{
	short           i;
	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	if (--counter)
		pollux("ABCDE");
}

pollux(constant)
	char           *constant;
{
	short           i;
	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	if (--counter)
		castor("ABC");
}
@def_
@def $macro197()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, no return value, illegal 
 */
{
	short           i;

	i = castor("A");
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	if (--counter) {
		i = pollux("AB");
		if (i == 0)
			i++;
	}
}

pollux(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++)
		if (*constant != 'A' + i)
			statusFlag++;
	if (--counter) {
		i = castor("ABC");
		if (i == 0)
			i++;
	}
}
@def_
@def $macro198()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = castor("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char           *constant;
{
	short           i;

	if (--counter) {
		i = pollux("ABCDE");
		if (i != 5)
			statusFlag++;
	}
	return (mystrlen(constant));
}

pollux(constant)
	char           *constant;
{
	short           i;

	if (--counter) {
		i = castor("AB");
		if (i != 2)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro199()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, return value, legal, function declared to return an integer 
 */
{
	short           i = 0, castor();

	i = castor("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	char           *constant;
{
	short           i, pollux();

	if (--counter) {
		i = pollux("ABCDE");
		if (i != 5)
			statusFlag++;
	}
	return (mystrlen(constant));
}

short 
pollux(constant)
	char           *constant;
{
	short           i;

	if (--counter) {
		i = castor("AB");
		if (i != 2)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro200()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, return value, function declared to return a pointer to character 
 */
{
	char           *s, *castor();

	s = castor(2, "0123456789");
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant, numbers)
	short           constant;
	char           *numbers;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux(6, "0123456789");
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + constant);
}

char           *
pollux(constant, numbers)
	short           constant;
	char           *numbers;
{
	char           *s;

	if (--counter) {
		s = castor(3, "0123456789");
		if (*s != '3')
			statusFlag++;
	}
	return (numbers + constant);
}
@def_
@def $macro201()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = castor(increment, "A");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) ();
char           *constant;
{
	short           i;
	if (--counter) {
		i = pollux(function, "ABCDEFGHI");
		if (i != 10)
			statusFlag++;
	}
	return (function(constant));
}

pollux(function, constant)
	short           (*function) ();
char           *constant;
{
	short           i;
	if (--counter) {
		i = castor(function, "ABC");
		if (i != 4)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	char           *constant;
{
	short           i;
	for (i = 0; *constant; i++, constant++);
	return (++i);
}
@def_
@def $macro202()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, in conditional expression, no function declaration 
 */
{
	if (!(castor("A") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char           *constant;
{
	short           i;
	if (--counter)
		if (!(pollux("ABCD") == 5))
			statusFlag++;
	for (i = 0; *constant; i++, constant++);
	return (++i);
}

pollux(constant)
	char           *constant;
{
	short           i;
	if (--counter)
		if (!(castor("A") == 2))
			statusFlag++;
	for (i = 0; *constant; i++, constant++);
	return (++i);
}
@def_
@def $macro203()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, in conditional expression, function declared to return an integer 
 */
{
	short           castor();

	if (!(castor("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	char           *constant;
{
	short           pollux();

	if (--counter)
		if (!(pollux("ABCDE") == 5))
			statusFlag++;
	return (mystrlen(constant));
}

short 
pollux(constant)
	char           *constant;
{
	if (--counter)
		if (!(castor("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro204()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, in conditional expression, function declared to return a pointer to
 * character 
 */
{
	char           *castor();

	if (!(*castor(2, "0123456789") == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant, numbers)
	short           constant;
	char           *numbers;
{
	char           *pollux();

	if (--counter)
		if (!(*pollux(6, "0123456789") == '6'))
			statusFlag++;
	return (numbers + constant);
}

char           *
pollux(constant, numbers)
	short           constant;
	char           *numbers;
{
	if (--counter)
		if (!(*castor(3, "0123456789") == '3'))
			statusFlag++;
	return (numbers + constant);
}
@def_
@def $macro205()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string instance  : gemini, in conditional expression, pointer to function returning an integer 
 */
{
	short           increment();

	if (!(castor(increment, "A") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) ();
char           *constant;
{
	if (--counter)
		if (!(pollux(function, "012345678") == 10))
			statusFlag++;
	return (function(constant));
}

pollux(function, constant)
	short           (*function) ();
char           *constant;
{
	if (--counter)
		if (!(castor(function, "ABC") == 4))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++);
	return (++i);
}
@def_
@def $macro206()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, no return value and legal 
 */
{
	levelOneNodeOne("A");
	levelOneNodeTwo("AB");
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	levelTwoNodeOne("ABC");
	levelTwoNodeTwo("ABCD");
}

levelOneNodeTwo(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	levelTwoNodeThree("ABCDE");
	levelTwoNodeFour("ABCDEF");
}

levelTwoNodeOne(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	levelThreeLeafOne("ABCDEFG");
	levelThreeLeafTwo("ABCDEFGH");
}

levelTwoNodeTwo(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	levelThreeLeafThree("ABCDEFGHI");
	levelThreeLeafFour("ABCDEFGHIJ");
}

levelTwoNodeThree(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	levelThreeLeafFive("ABCDEFGHIJK");
	levelThreeLeafSix("ABCDEFGHIJKL");
}

levelTwoNodeFour(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	levelThreeLeafSeven("ABCDEFGHIJKLM");
	levelThreeLeafEight("ABCDEFGHIJKLMN");
}

levelThreeLeafOne(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafTwo(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafThree(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafFour(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafFive(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafSix(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafSeven(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}

levelThreeLeafEight(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
}
@def_
@def $macro207()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, no return value and illegal 
 */
{
	short           i;

	i = levelOneNodeOne("A");
	i = levelOneNodeTwo("AB");
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	i = levelTwoNodeOne("ABC");
	i = levelTwoNodeTwo("ABCD");
}

levelOneNodeTwo(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	i = levelTwoNodeThree("ABCDE");
	i = levelTwoNodeFour("ABCDEF");
	if (i == 0)
		i++;
}

levelTwoNodeOne(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	i = levelThreeLeafOne("ABCDEFG");
	i = levelThreeLeafTwo("ABCDEFGH");
	if (i == 0)
		i++;
}

levelTwoNodeTwo(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	i = levelThreeLeafThree("ABCDEFGHI");
	i = levelThreeLeafFour("ABCDEFGHIJ");
	if (i == 0)
		i++;
}

levelTwoNodeThree(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	i = levelThreeLeafFive("ABCDEFGHIJK");
	i = levelThreeLeafSix("ABCDEFGHIJKL");
	if (i == 0)
		i++;
}

levelTwoNodeFour(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	i = levelThreeLeafSeven("ABCDEFGHIJKLM");
	i = levelThreeLeafEight("ABCDEFGHIJKLMN");
	if (i == 0)
		i++;
}

levelThreeLeafOne(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafTwo(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafThree(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafFour(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafFive(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafSix(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafSeven(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
}

levelThreeLeafEight(constant)
	char            constant[][3];
{
	short           i = 0, j = 0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	return;
}
@def_
@def $macro208()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	short           i = 0;

	i = levelOneNodeOne("A");
	if (i != 1)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char            constant[][3];
{
	short           i;

	i = levelTwoNodeOne("ABC");
	if (i != 3)
		statusFlag++;
	i = levelTwoNodeTwo("ABCD");
	if (i != 4)
		statusFlag++;
	return (mystrlen(constant));
}

levelOneNodeTwo(constant)
	char            constant[][3];
{
	short           i;

	i = levelTwoNodeThree("ABCDE");
	if (i != 5)
		statusFlag++;
	i = levelTwoNodeFour("ABCDEF");
	if (i != 6)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeOne(constant)
	char            constant[][3];
{
	short           i = 0;

	i = levelThreeLeafOne("ABCDEFG");
	if (i != 7)
		statusFlag++;
	i = levelThreeLeafTwo("ABCDEFGH");
	if (i != 8)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeTwo(constant)
	char            constant[][3];
{
	short           i;

	i = levelThreeLeafThree("ABCDEFGHI");
	if (i != 9)
		statusFlag++;
	i = levelThreeLeafFour("ABCDEFGHIJ");
	if (i != 10)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeThree(constant)
	char            constant[][3];
{
	short           i;

	i = levelThreeLeafFive("ABCDEFGHIJK");
	if (i != 11)
		statusFlag++;
	i = levelThreeLeafSix("ABCDEFGHIJKL");
	if (i != 12)
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeFour(constant)
	char            constant[][3];
{
	short           i;

	i = levelThreeLeafSeven("ABCDEFGHIJKLM");
	if (i != 13)
		statusFlag++;
	i = levelThreeLeafEight("ABCDEFGHIJKLMN");
	if (i != 14)
		statusFlag++;
	return (mystrlen(constant));
}

levelThreeLeafOne(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafTwo(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafThree(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafFour(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafFive(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafSix(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafSeven(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafEight(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro209()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, return value and legal, no function declaration 
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne("A");
	if (i != 1)
		statusFlag++;
	i = 0;
	i = levelOneNodeTwo("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	char            constant[][3];
{
	short           i;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	i = levelTwoNodeOne("ABC");
	if (i != 3)
		statusFlag++;
	i = levelTwoNodeTwo("ABCD");
	if (i != 4)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelOneNodeTwo(constant)
	char            constant[][3];
{
	short           i;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	i = levelTwoNodeThree("ABCDE");
	if (i != 5)
		statusFlag++;
	i = levelTwoNodeFour("ABCDEF");
	if (i != 6)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeOne(constant)
	char            constant[][3];
{
	short           i = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	i = levelThreeLeafOne("ABCDEFG");
	if (i != 7)
		statusFlag++;
	i = levelThreeLeafTwo("ABCDEFGH");
	if (i != 8)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeTwo(constant)
	char            constant[][3];
{
	short           i;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	i = levelThreeLeafThree("ABCDEFGHI");
	if (i != 9)
		statusFlag++;
	i = levelThreeLeafFour("ABCDEFGHIJ");
	if (i != 10)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeThree(constant)
	char            constant[][3];
{
	short           i;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	i = levelThreeLeafFive("ABCDEFGHIJK");
	if (i != 11)
		statusFlag++;
	i = levelThreeLeafSix("ABCDEFGHIJKL");
	if (i != 12)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelTwoNodeFour(constant)
	char            constant[][3];
{
	short           i;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	i = levelThreeLeafSeven("ABCDEFGHIJKLM");
	if (i != 13)
		statusFlag++;
	i = levelThreeLeafEight("ABCDEFGHIJKLMN");
	if (i != 14)
		statusFlag++;
	return (mystrlen(constant));
}

short 
levelThreeLeafOne(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafTwo(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafThree(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafFour(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafFive(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafSix(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafSeven(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

short 
levelThreeLeafEight(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro210()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: literal string, illegal instance  : linear tree structure, return value and legal, function declared to
 * return a pointer to character 
 */
{
	char           *s, *levelOne();

	s = levelOne(1, "0123456789");
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *s, *levelTwo();
	short           i;

	s = levelTwo(2, "0123456789");
	if (*s != '2')
		statusFlag++;
	for (s = (char *) numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelTwo(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *s, *levelThree();
	short           i;

	s = levelThree(3, "0123456789");
	if (*s != '3')
		statusFlag++;
	for (s = (char *) numbers, i = 0; i < constant; i++, s++);
	return (s);
}

char           *
levelThree(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *s;
	short           i;

	for (s = (char *) numbers, i = 0; i < constant; i++, s++);
	return (s);
}
@def_
@def $macro211()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: literal string, illegal instance  : linear tree structure, return value, legal pointer to function returning
 * an integer 
 */
{
	short           i, divide4();

	i = dummy1(divide4, "ABCDEFGHIJKL");
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, string)
	short           (*func) ();
char            string[][3];
{
	short           i;

	if (string[0][0] == 'A');
	i = (*func) ("ABCDEFGHIJKL");
	if (i != 3)
		statusFlag++;
	return (i);
}

short 
divide4(string)
	char            string[][3];
{
	short           divide2();

	return (dummy2(divide2, string) / 2);
}

dummy2(func, string)
	short           (*func) ();
char            string[][3];
{
	short           i;

	if (string[0][0] == 'A');
	i = (*func) ("ABCDEFGHIJKL");
	if (i != 6)
		statusFlag++;
	return (i);
}

short 
divide2(string)
	char            string[][3];
{
	short           i, j;
	for (i = j = 0; string[j][i];)
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	return ((j * 3 + i) / 2);
}
@def_
@def $macro212()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, in conditional expression, no function
 * declaration 
 */
{
	if (!(levelOneNodeOne("A") == 1))
		statusFlag++;
	if (!(levelOneNodeTwo("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(constant)
	char            constant[][3];
{
	if (!(levelTwoNodeOne("ABC") == 3))
		statusFlag++;
	if (!(levelTwoNodeTwo("ABCD") == 4))
		statusFlag++;
	return (mystrlen(constant));
}

levelOneNodeTwo(constant)
	char            constant[][3];
{
	if (!(levelTwoNodeThree("ABCDE") == 5))
		statusFlag++;
	if (!(levelTwoNodeFour("ABCDEF") == 6))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeOne(constant)
	char            constant[][3];
{
	if (!(levelThreeLeafOne("ABCDEFG") == 7))
		statusFlag++;
	if (!(levelThreeLeafTwo("ABCDEFGH") == 8))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeTwo(constant)
	char            constant[][3];
{
	if (!(levelThreeLeafThree("ABCDEFGHI") == 9))
		statusFlag++;
	if (!(levelThreeLeafFour("ABCDEFGHIJ") == 10))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeThree(constant)
	char            constant[][3];
{
	if (!(levelThreeLeafFive("ABCDEFGHIJK") == 11))
		statusFlag++;
	if (!(levelThreeLeafSix("ABCDEFGHIJKL") == 12))
		statusFlag++;
	return (mystrlen(constant));
}

levelTwoNodeFour(constant)
	char            constant[][3];
{
	if (!(levelThreeLeafSeven("ABCDEFGHIJKLM") == 13))
		statusFlag++;
	if (!(levelThreeLeafEight("ABCDEFGHIJKLMN") == 14))
		statusFlag++;
	return (mystrlen(constant));
}

levelThreeLeafOne(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafTwo(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafThree(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafFour(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafFive(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafSix(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafSeven(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

levelThreeLeafEight(constant)
	char            constant[][3];
{
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro213()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, used in conditional expression, integer function
 * declaration 
 */
{
	short           levelOneNodeOne();

	if (!levelOneNodeOne("AB"))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
levelOneNodeOne(constant)
	char            constant[][3];
{
	short           levelTwoNodeOne();

	if (!levelTwoNodeOne("ABC"))
		statusFlag++;
	return (mystrlen(constant) == 2 ? 1 : 0);
}

short 
levelTwoNodeOne(constant)
	char            constant[][3];
{
	short           levelThreeLeafOne();

	if (!levelThreeLeafOne("ABCDEFG"))
		statusFlag++;
	return (mystrlen(constant) == 3 ? 1 : 0);
}

short 
levelThreeLeafOne(constant)
	char            constant[][3];
{
	return (mystrlen(constant) == 7 ? 1 : 0);
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro214()
$LICENSE()
$HEAD()

main()				/* alias root */
/*
 *  test class: literal string, illegal instance  : linear tree structure, used in conditional expression, function declared
 * to return a pointer to character 
 */
{
	char           *skip();

	if (compare(skip(4, "cassandracross"), "andra", 5) == compare(skip(8, "cassandracross"), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper, protean)
	short           skipper;
	char            protean[][3];
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = (char *) protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro215()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: literal string, illegal instance  : linear tree structure, in conditional expression, pointer to function
 * returning an integer 
 */
{
	short           divide4();

	if (dummy1(divide4, "ABCDEFGHIJKL") != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) ();
char            integer[][3];
{
	short           i;
	char           *c = (char *) integer;

	if (*c == 'A');
	if ((i = (*func) ("ABCDEFGHIJKL")) != 3)
		statusFlag++;
	return (i);
}

short 
divide4(integer)
	char            integer[][3];
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) ();
char            integer[][3];
{
	short           i;
	char           *c = (char *) integer;

	if (*c == 'A');
	if ((i = (*func) ("ABCDEFGHIJKL")) != 6)
		statusFlag++;
	return (i);
}

short 
divide2(integer)
	char            integer[][3];
{
	return (mystrlen(integer) / 2);
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro216()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, no return value, legal 
 */
{
	recursiveFunction("A");
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	if (--counter)
		recursiveFunction("AB");
}
@def_
@def $macro217()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, no return value, illegal 
 */
{
	short           i;
	i = recursiveFunction("ABCDEFG");
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char            constant[][3];
{
	short           i=0, j=0;

	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	if (--counter) {
		i = recursiveFunction("ABCDEFG");
		if (i == 0)
			i++;
	}
	return;
}
@def_
@def $macro218()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, return value, legal, no function declaration 
 */
{
	short           i = 0;

	i = recursiveFunction("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char            constant[][3];
{
	short           i;

	if (--counter) {
		i = recursiveFunction("AB");
		if (i != 2)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro219()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, return value, legal, integer function declaration 
 */
{
	short           i = 0;
	short           recursiveFunction();

	i = recursiveFunction("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	char            constant[][3];
{
	short           i;
	short           recursiveFunction();

	if (--counter) {
		i = recursiveFunction("AB");
		if (i != 2)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro220()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, return value, function declared to return a pointer to
 * character 
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction(2, "0123456789");
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(3, "0123456789");
		if (*s != '3')
			statusFlag++;
	}
	return ((char *) numbers + constant);
}
@def_
@def $macro221()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = dummy(increment, "A");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	short           (*function) ();
char            constant[][3];
{
	short           i;
	if (--counter) {
		i = dummy(function, "A");
		if (i != 2)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	char           *constant;
{
	short           i;
	for (i = 0; *constant; i++, constant++);
	return (++i);
}
@def_
@def $macro222()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, function in conditional expression, no function
 * declaration 
 */
{
	if (!(recursiveFunction("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(constant)
	char            constant[][3];
{
	if (--counter)
		if (!(recursiveFunction("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro223()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, function in conditional expression, integer function
 * declaration 
 */
{
	short           recursiveFunction();

	if (!(recursiveFunction("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
recursiveFunction(constant)
	char            constant[][3];
{
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro224()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, in conditional expression, function declared to return a
 * pointer to character 
 */
{
	char           *recursiveFunction();

	if (!(*recursiveFunction(2, "0123456789") == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	if (--counter)
		if (!(*recursiveFunction(3, "0123456789") == '3'))
			statusFlag++;
	return ((char *) numbers + constant);
}
@def_
@def $macro225()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : recursive call, in conditional expression, pointer to function returning
 * an integer 
 */
{
	short           increment();

	if (!(dummy(increment, "A") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, constant)
	short           (*function) ();
char            constant[][3];
{
	if (--counter)
		if (!(dummy(function, "A") == 2))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	char           *constant;
{
	short           i;
	i = mystrlen(constant);
	return (++i);
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro226()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, no return value, legal 
 */
{
	castor("AB");
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	if (--counter)
		pollux("ABCD");
}

pollux(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	if (--counter)
		castor("ABCDEF");
}
@def_
@def $macro227()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, no return value, illegal 
 */
{
	short           i;

	i = castor("A");
	if (i == 0)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char            constant[][3];
{
	short           i, j;

	i = j = 0;
	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	if (--counter) {
		i = pollux("AB");
		if (i == 0)
			i++;
	}
}

pollux(constant)
	char            constant[][3];
{
	short           i, j;

	i = j = 0;
	while (constant[j][i]) {
		if (constant[j][i] != 'A' + 3 * j + i)
			statusFlag++;
		if (i >= 3 && ++j)
			i = 0;
		else
			i++;
	}
	if (--counter) {
		i = castor("ABCD");
		if (i == 0)
			i++;
	}
}
@def_
@def $macro228()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, return value, legal, no function declaration 
 */
{
	short           i;

	i = castor("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char            constant[][3];
{
	short           i;

	if (--counter) {
		i = pollux("ABCDE");
		if (i != 5)
			statusFlag++;
	}
	return (mystrlen(constant));
}

pollux(constant)
	char            constant[][3];
{
	short           i;

	if (--counter) {
		i = castor("AB");
		if (i != 2)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro229()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, return value, legal, function declared to return an integer 
 */
{
	short           i = 0, castor();

	i = castor("AB");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	char            constant[][3];
{
	short           i, pollux();

	if (--counter) {
		i = pollux("ABCDE");
		if (i != 5)
			statusFlag++;
	}
	return (mystrlen(constant));
}

short 
pollux(constant)
	char            constant[][3];
{
	short           i;

	if (--counter) {
		i = castor("AB");
		if (i != 2)
			statusFlag++;
	}
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro230()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, return value, function declared to return a pointer to character 
 */
{
	char           *s, *castor();

	s = castor(2, "0123456789");
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux(6, "0123456789");
		if (*s != '6')
			statusFlag++;
	}
	return ((char *) numbers + constant);
}

char           *
pollux(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *s;

	if (--counter) {
		s = castor(3, "0123456789");
		if (*s != '3')
			statusFlag++;
	}
	return ((char *) numbers + constant);
}
@def_
@def $macro231()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, return value, pointer to function returning an integer 
 */
{
	short           i, increment();

	i = castor(increment, "A");
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) ();
char            constant[][3];
{
	short           i;
	if (--counter) {
		i = pollux(function, "ABCDEFGHI");
		if (i != 10)
			statusFlag++;
	}
	return (function(constant));
}

pollux(function, constant)
	short           (*function) ();
char            constant[][3];
{
	short           i;
	if (--counter) {
		i = castor(function, "ABC");
		if (i != 4)
			statusFlag++;
	}
	return (function(constant));
}

short 
increment(constant)
	char            constant[][3];
{
	short           i, j;
	for (i = j = 0; constant[j][i];) {
		if (i >= 3) {
			j++;
			i = 0;
		} else
			i++;
	}
	return (3 * j + i + 1);
}
@def_
@def $macro232()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, in conditional expression, no function declaration 
 */
{
	if (!(castor("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(constant)
	char            constant[][3];
{
	if (--counter)
		if (!(pollux("ABCDE") == 5))
			statusFlag++;
	return (mystrlen(constant));
}

pollux(constant)
	char            constant[][3];
{
	if (--counter)
		if (!(castor("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro233()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, in conditional expression, function declared to return an integer 
 */
{
	short           castor();

	if (!(castor("AB") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short 
castor(constant)
	char            constant[][3];
{
	short           pollux();

	if (--counter)
		if (!(pollux("ABCDE") == 5))
			statusFlag++;
	return (mystrlen(constant));
}

short 
pollux(constant)
	char            constant[][3];
{
	if (--counter)
		if (!(castor("AB") == 2))
			statusFlag++;
	return (mystrlen(constant));
}

mystrlen(string)
	char           *string;
{
	short           i = 0;
	while (*string++)
		i++;
	return (i);
}
@def_
@def $macro234()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, in conditional expression, function declared to return a pointer
 * to character 
 */
{
	char           *castor();

	if (!(*castor(2, "0123456789") == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	char           *pollux();

	if (--counter)
		if (!(*pollux(6, "0123456789") == '6'))
			statusFlag++;
	return ((char *) numbers + constant);
}

char           *
pollux(constant, numbers)
	short           constant;
	char            numbers[][3];
{
	if (--counter)
		if (!(*castor(3, "0123456789") == '3'))
			statusFlag++;
	return ((char *) numbers + constant);
}
@def_
@def $macro235()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: literal string, illegal instance  : gemini, in conditional expression, pointer to function returning an
 * integer 
 */
{
	short           increment();

	if (!(castor(increment, "A") == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, constant)
	short           (*function) ();
char            constant[][3];
{
	if (--counter)
		if (!(pollux(function, "ABCDEFGHI") == 10))
			statusFlag++;
	return (function(constant));
}

pollux(function, constant)
	short           (*function) ();
char            constant[][3];
{
	if (--counter)
		if (!(castor(function, "ABC") == 4))
			statusFlag++;
	return (function(constant));
}

short 
increment(constant)
	char           *constant;
{
	short           i;

	for (i = 0; *constant; i++, constant++);
	return (++i);
}
@def_

@def $testout()
#ifdef unix
#include<stdio.h>
#include<float.h>
#define printok() printf("@OK@\n")
#define printno() printf("@NG@\n")
#define ABS(a) ((a > 0)? (a) : (-(a)))
#define MAX(a, b) ((a > b)? (a) : (b))
#define TGEN_FLT_EQ(a, b) ( ((a)==(b)) || ABS(((a) - (b))) / MAX( ABS(a), ABS(b) ) <= FLT_EPSILON )
#endif
@def_

@dir ckr.4-2-01
@file >>def.h $macro0() @file_
@file >>fdef.h $macro1() @file_
@file >>ft0101.c $macro2() @file_
@file >>ft0102.c $macro3() @file_
@file >>ft0104.c $macro4() @file_
@file >>ft0106.c $macro5() @file_
@file >>ft0108.c $macro6() @file_
@file >>ft0110.c $macro7() @file_
@file >>ft0111.c $macro8() @file_
@file >>ft0112.c $macro9() @file_
@file >>ft0114.c $macro10() @file_
@file >>ft0116.c $macro11() @file_
@file >>ft0118.c $macro12() @file_
@file >>ft0120.c $macro13() @file_
@file >>ft0121.c $macro14() @file_
@file >>ft0122.c $macro15() @file_
@file >>ft0124.c $macro16() @file_
@file >>ft0126.c $macro17() @file_
@file >>ft0128.c $macro18() @file_
@file >>ft0130.c $macro19() @file_
@file >>lt0101.c $macro20() @file_
@file >>lt0102.c $macro21() @file_
@file >>lt0104.c $macro22() @file_
@file >>lt0106.c $macro23() @file_
@file >>lt0108.c $macro24() @file_
@file >>lt0110.c $macro25() @file_
@file >>lt0111.c $macro26() @file_
@file >>lt0112.c $macro27() @file_
@file >>lt0114.c $macro28() @file_
@file >>lt0116.c $macro29() @file_
@file >>lt0118.c $macro30() @file_
@file >>lt0120.c $macro31() @file_
@file >>lt0121.c $macro32() @file_
@file >>lt0122.c $macro33() @file_
@file >>lt0124.c $macro34() @file_
@file >>lt0126.c $macro35() @file_
@file >>lt0128.c $macro36() @file_
@file >>lt0130.c $macro37() @file_
@file >>lt0201.c $macro38() @file_
@file >>lt0202.c $macro39() @file_
@file >>lt0204.c $macro40() @file_
@file >>lt0206.c $macro41() @file_
@file >>lt0208.c $macro42() @file_
@file >>lt0210.c $macro43() @file_
@file >>lt0211.c $macro44() @file_
@file >>lt0212.c $macro45() @file_
@file >>lt0214.c $macro46() @file_
@file >>lt0216.c $macro47() @file_
@file >>lt0218.c $macro48() @file_
@file >>lt0220.c $macro49() @file_
@file >>lt0221.c $macro50() @file_
@file >>lt0222.c $macro51() @file_
@file >>lt0224.c $macro52() @file_
@file >>lt0226.c $macro53() @file_
@file >>lt0228.c $macro54() @file_
@file >>lt0230.c $macro55() @file_
@file >>t0101.c $macro56() @file_
@file >>t0102.c $macro57() @file_
@file >>t0103.c $macro58() @file_
@file >>t0104.c $macro59() @file_
@file >>t0105.c $macro60() @file_
@file >>t0106.c $macro61() @file_
@file >>t0107.c $macro62() @file_
@file >>t0108.c $macro63() @file_
@file >>t0109.c $macro64() @file_
@file >>t0110.c $macro65() @file_
@file >>t0111.c $macro66() @file_
@file >>t0112.c $macro67() @file_
@file >>t0113.c $macro68() @file_
@file >>t0114.c $macro69() @file_
@file >>t0115.c $macro70() @file_
@file >>t0116.c $macro71() @file_
@file >>t0117.c $macro72() @file_
@file >>t0118.c $macro73() @file_
@file >>t0119.c $macro74() @file_
@file >>t0120.c $macro75() @file_
@file >>t0121.c $macro76() @file_
@file >>t0122.c $macro77() @file_
@file >>t0123.c $macro78() @file_
@file >>t0124.c $macro79() @file_
@file >>t0125.c $macro80() @file_
@file >>t0126.c $macro81() @file_
@file >>t0127.c $macro82() @file_
@file >>t0128.c $macro83() @file_
@file >>t0129.c $macro84() @file_
@file >>t0130.c $macro85() @file_
@file >>t0201.c $macro86() @file_
@file >>t0202.c $macro87() @file_
@file >>t0203.c $macro88() @file_
@file >>t0204.c $macro89() @file_
@file >>t0205.c $macro90() @file_
@file >>t0206.c $macro91() @file_
@file >>t0207.c $macro92() @file_
@file >>t0208.c $macro93() @file_
@file >>t0209.c $macro94() @file_
@file >>t0210.c $macro95() @file_
@file >>t0211.c $macro96() @file_
@file >>t0212.c $macro97() @file_
@file >>t0213.c $macro98() @file_
@file >>t0214.c $macro99() @file_
@file >>t0215.c $macro100() @file_
@file >>t0216.c $macro101() @file_
@file >>t0217.c $macro102() @file_
@file >>t0218.c $macro103() @file_
@file >>t0219.c $macro104() @file_
@file >>t0220.c $macro105() @file_
@file >>t0221.c $macro106() @file_
@file >>t0222.c $macro107() @file_
@file >>t0223.c $macro108() @file_
@file >>t0224.c $macro109() @file_
@file >>t0225.c $macro110() @file_
@file >>t0226.c $macro111() @file_
@file >>t0227.c $macro112() @file_
@file >>t0228.c $macro113() @file_
@file >>t0229.c $macro114() @file_
@file >>t0230.c $macro115() @file_
@file >>t0301.c $macro116() @file_
@file >>t0302.c $macro117() @file_
@file >>t0303.c $macro118() @file_
@file >>t0304.c $macro119() @file_
@file >>t0305.c $macro120() @file_
@file >>t0306.c $macro121() @file_
@file >>t0307.c $macro122() @file_
@file >>t0308.c $macro123() @file_
@file >>t0309.c $macro124() @file_
@file >>t0310.c $macro125() @file_
@file >>t0311.c $macro126() @file_
@file >>t0312.c $macro127() @file_
@file >>t0313.c $macro128() @file_
@file >>t0314.c $macro129() @file_
@file >>t0315.c $macro130() @file_
@file >>t0316.c $macro131() @file_
@file >>t0317.c $macro132() @file_
@file >>t0318.c $macro133() @file_
@file >>t0319.c $macro134() @file_
@file >>t0320.c $macro135() @file_
@file >>t0321.c $macro136() @file_
@file >>t0322.c $macro137() @file_
@file >>t0323.c $macro138() @file_
@file >>t0324.c $macro139() @file_
@file >>t0325.c $macro140() @file_
@file >>t0326.c $macro141() @file_
@file >>t0327.c $macro142() @file_
@file >>t0328.c $macro143() @file_
@file >>t0329.c $macro144() @file_
@file >>t0330.c $macro145() @file_
@file >>t0401.c $macro146() @file_
@file >>t0402.c $macro147() @file_
@file >>t0403.c $macro148() @file_
@file >>t0404.c $macro149() @file_
@file >>t0405.c $macro150() @file_
@file >>t0406.c $macro151() @file_
@file >>t0407.c $macro152() @file_
@file >>t0408.c $macro153() @file_
@file >>t0409.c $macro154() @file_
@file >>t0410.c $macro155() @file_
@file >>t0411.c $macro156() @file_
@file >>t0412.c $macro157() @file_
@file >>t0413.c $macro158() @file_
@file >>t0414.c $macro159() @file_
@file >>t0415.c $macro160() @file_
@file >>t0416.c $macro161() @file_
@file >>t0417.c $macro162() @file_
@file >>t0418.c $macro163() @file_
@file >>t0419.c $macro164() @file_
@file >>t0420.c $macro165() @file_
@file >>t0421.c $macro166() @file_
@file >>t0422.c $macro167() @file_
@file >>t0423.c $macro168() @file_
@file >>t0424.c $macro169() @file_
@file >>t0425.c $macro170() @file_
@file >>t0426.c $macro171() @file_
@file >>t0427.c $macro172() @file_
@file >>t0428.c $macro173() @file_
@file >>t0429.c $macro174() @file_
@file >>t0430.c $macro175() @file_
@file >>t0501.c $macro176() @file_
@file >>t0502.c $macro177() @file_
@file >>t0503.c $macro178() @file_
@file >>t0504.c $macro179() @file_
@file >>t0505.c $macro180() @file_
@file >>t0506.c $macro181() @file_
@file >>t0507.c $macro182() @file_
@file >>t0508.c $macro183() @file_
@file >>t0509.c $macro184() @file_
@file >>t0510.c $macro185() @file_
@file >>t0511.c $macro186() @file_
@file >>t0512.c $macro187() @file_
@file >>t0513.c $macro188() @file_
@file >>t0514.c $macro189() @file_
@file >>t0515.c $macro190() @file_
@file >>t0516.c $macro191() @file_
@file >>t0517.c $macro192() @file_
@file >>t0518.c $macro193() @file_
@file >>t0519.c $macro194() @file_
@file >>t0520.c $macro195() @file_
@file >>t0521.c $macro196() @file_
@file >>t0522.c $macro197() @file_
@file >>t0523.c $macro198() @file_
@file >>t0524.c $macro199() @file_
@file >>t0525.c $macro200() @file_
@file >>t0526.c $macro201() @file_
@file >>t0527.c $macro202() @file_
@file >>t0528.c $macro203() @file_
@file >>t0529.c $macro204() @file_
@file >>t0530.c $macro205() @file_
@file >>t0601.c $macro206() @file_
@file >>t0602.c $macro207() @file_
@file >>t0603.c $macro208() @file_
@file >>t0604.c $macro209() @file_
@file >>t0605.c $macro210() @file_
@file >>t0606.c $macro211() @file_
@file >>t0607.c $macro212() @file_
@file >>t0608.c $macro213() @file_
@file >>t0609.c $macro214() @file_
@file >>t0610.c $macro215() @file_
@file >>t0611.c $macro216() @file_
@file >>t0612.c $macro217() @file_
@file >>t0613.c $macro218() @file_
@file >>t0614.c $macro219() @file_
@file >>t0615.c $macro220() @file_
@file >>t0616.c $macro221() @file_
@file >>t0617.c $macro222() @file_
@file >>t0618.c $macro223() @file_
@file >>t0619.c $macro224() @file_
@file >>t0620.c $macro225() @file_
@file >>t0621.c $macro226() @file_
@file >>t0622.c $macro227() @file_
@file >>t0623.c $macro228() @file_
@file >>t0624.c $macro229() @file_
@file >>t0625.c $macro230() @file_
@file >>t0626.c $macro231() @file_
@file >>t0627.c $macro232() @file_
@file >>t0628.c $macro233() @file_
@file >>t0629.c $macro234() @file_
@file >>t0630.c $macro235() @file_
@file >>testout.h $testout() @file_
@dir_
