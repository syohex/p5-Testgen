@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@def $LICENSE()
/*
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
hikichi@sra.co.jp(Nobuyuki Hikichi)

This file was written by several people in Software Research Associates,
Inc. Japan in several years.
*/
@def_

@comment
ネストした構造体と共用体の代入のテスト
@comment_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd3.01.h"
@def_

@def $FHEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd3.01.h"
@def_

@def $test1($VAR9)
	itest = NO;
	$VAR9 = OK;
	itest = $VAR9;

	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ftest1($VAR9)
	ftest = NO;
	$VAR9 = 1.0;
	ftest = $VAR9;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
@def_
@def $ctest1($VAR9)
	ctest = NCHAR;
	$VAR9 = YCHAR;
	ctest = $VAR9;

	if (ctest == YCHAR)
		printok();
	else
		printno();
@def_

@def $macro0($MODIFIER)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER struct.struct.float型変数への代入
	  --END--*/
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		float           Float;
		struct BStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			float           Float;
			struct CStruct {
				int             Int;
				long            Long;
				short           Short;
				unsigned        Unsigned;
				char            Char;
				float           Float;
			}               CStruct;
		}               BStruct;
	}               Struct;

$ftest1(Struct.BStruct.Float)

	return 0;
}
@def_

@def $macro1()
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern struct.struct.float型変数への代入
	  --END--*/
	extern struct Struct Struct;

$ftest1(Struct.BStruct.Float)

	return 0;
}
@def_
@def $macro2($MODIFIER, $VAR1, $TYPE1)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER struct.struct.$TYPE1型変数への代入
	  --END--*/
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		float           Float;
		struct BStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			float           Float;
			struct CStruct {
				int             Int;
				long            Long;
				short           Short;
				unsigned        Unsigned;
				char            Char;
				float           Float;
			}               CStruct;
		}               BStruct;
	}               Struct;

	itest = NO;
	Struct.BStruct.$VAR1 = OK;
	itest = Struct.BStruct.$VAR1;

	if (itest == OK)
		printok();
	else
		printno();


	return 0;
}
@def_

@def $macro3($VAR1, $TYPE1)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern struct.struct.$TYPE1型変数への代入
	  --END--*/
	extern struct Struct Struct;

	itest = NO;
	Struct.BStruct.$VAR1 = OK;
	itest = Struct.BStruct.$VAR1;

	if (itest == OK)
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro5()
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern struct.struct.short型変数への代入
	  --End--*/
	extern struct Struct Struct;

	itest = NO;
	Struct.BStruct.Short = OK;
	itest = Struct.BStruct.Short;

	if (itest == OK)
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro8($MODIFIER)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER struct.struct.char型変数への代入
	  --END--*/
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		float           Float;
		struct BStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			float           Float;
			struct CStruct {
				int             Int;
				long            Long;
				short           Short;
				unsigned        Unsigned;
				char            Char;
				float           Float;
			}               CStruct;
		}               BStruct;
	}               Struct;

$ctest1(Struct.BStruct.Char)

	return 0;
}
@def_

@def $macro9()
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern struct.struct.char型変数への代入
	  --END--*/
	extern struct Struct Struct;

$ctest1(Struct.BStruct.Char)

	return 0;
}
@def_
@def $macro10($MODIFIER)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER struct.struct.struct.int型変数への代入
	  --END--*/
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		float           Float;
		struct BStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			float           Float;
			struct CStruct {
				int             Int;
				long            Long;
				short           Short;
				unsigned        Unsigned;
				char            Char;
				float           Float;
			}               CStruct;
		}               BStruct;
	}               Struct;

$test1(Struct.BStruct.CStruct.Int)

$test1(Struct.BStruct.CStruct.Long)

$test1(Struct.BStruct.CStruct.Short)

$test1(Struct.BStruct.CStruct.Unsigned)

$ctest1(Struct.BStruct.CStruct.Char)

$ftest1(Struct.BStruct.CStruct.Float)

	return 0;
}
@def_

@def $macro11()
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern struct.struct.structのメンバ変数への代入
	  --END--*/
	extern struct Struct Struct;

$test1(Struct.BStruct.CStruct.Int)

$test1(Struct.BStruct.CStruct.Long)

$test1(Struct.BStruct.CStruct.Short)

$test1(Struct.BStruct.CStruct.Unsigned)

$ctest1(Struct.BStruct.CStruct.Char)

$ftest1(Struct.BStruct.CStruct.Float)

	return 0;
}
@def_
@def $macro12($MODIFIER)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER union.union.unionのメンバ変数への代入
	  --END--*/
	$MODIFIER union Union {
		int             Int;
		long            Long;
		char            Char;
		float           Float;
		union BUnion {
			int             Int;
			long            Long;
			char            Char;
			float           Float;
			union CUnion {
				int             Int;
				long            Long;
				char            Char;
				float           Float;
			}               CUnion;
		}               BUnion;
	}               Union;

$test1(Union.BUnion.CUnion.Int)

$test1(Union.BUnion.CUnion.Long)

$ctest1(Union.BUnion.CUnion.Char)

$ftest1(Union.BUnion.CUnion.Float)

	return 0;
}
@def_

@def $macro13()
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern union.union.unionのメンバ変数への代入
	  --END--*/
	extern union Union Union;

$test1(Union.BUnion.CUnion.Int)

$test1(Union.BUnion.CUnion.Long)

$ctest1(Union.BUnion.CUnion.Char)

$ftest1(Union.BUnion.CUnion.Float)

	return 0;
}
@def_
@def $macro14($MODIFIER)
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER typedefで定義された型で宣言された
	  構造体のメンバ変数への代入
	  --END--*/
	$MODIFIER INTDEF          Intdef;
	$MODIFIER LONGDEF         Longdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER FLOATDEF        Floatdef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

$test1(Strdef.BdefStruct.Int)

$test1(Strdef.BdefStruct.Long)

$test1(Strdef.BdefStruct.Short)

$test1(Strdef.BdefStruct.Unsigned)

$ctest1(Strdef.BdefStruct.Char)

$ftest1(Strdef.BdefStruct.Float)

$test1(Strdef.BdefStruct.CdefStruct.Int)

$test1(Strdef.BdefStruct.CdefStruct.Long)

$test1(Strdef.BdefStruct.CdefStruct.Short)

$test1(Strdef.BdefStruct.CdefStruct.Unsigned)

$ctest1(Strdef.BdefStruct.CdefStruct.Char)

$ftest1(Strdef.BdefStruct.CdefStruct.Float)

$test1(Unidef.BdefUnion.CdefUnion.Int)

$test1(Unidef.BdefUnion.CdefUnion.Long)

$ctest1(Unidef.BdefUnion.CdefUnion.Char)

$ftest1(Unidef.BdefUnion.CdefUnion.Float)

	return 0;
}
@def_

@def $macro15()
$LICENSE()
$FHEAD()
int main(void)
{
	/*--TEST--
	  extern typedefで定義された型で宣言された構造体への代入
	 --END--*/
	INTDEF          Intdef;
	LONGDEF         Longdef;
	SHORTDEF        Shortdef;
	UNSIGNDEF       Unsigndef;
	CHARDEF         Chardef;
	FLOATDEF        Floatdef;
	STRDEF          Strdef;
	UNIDEF          Unidef;

$test1(Strdef.BdefStruct.Int)

$test1(Strdef.BdefStruct.Long)

$test1(Strdef.BdefStruct.Short)

$test1(Strdef.BdefStruct.Unsigned)

$ctest1(Strdef.BdefStruct.Char)

$ftest1(Strdef.BdefStruct.Float)

$test1(Strdef.BdefStruct.CdefStruct.Int)

$test1(Strdef.BdefStruct.CdefStruct.Long)

$test1(Strdef.BdefStruct.CdefStruct.Short)

$test1(Strdef.BdefStruct.CdefStruct.Unsigned)

$ctest1(Strdef.BdefStruct.CdefStruct.Char)

$ftest1(Strdef.BdefStruct.CdefStruct.Float)

$test1(Unidef.BdefUnion.CdefUnion.Int)

$test1(Unidef.BdefUnion.CdefUnion.Long)

$ctest1(Unidef.BdefUnion.CdefUnion.Char)

$ftest1(Unidef.BdefUnion.CdefUnion.Float)

	return 0;
}
@def_

@def $macro16($MODIFIER)
$LICENSE()
$HEAD()
int main(void)
{
	/*--TEST--
	  $MODIFIER struct.struct.int型への代入
	  --END--*/
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		struct BStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			struct CStruct {
				int             Int;
				long            Long;
				short           Short;
				unsigned        Unsigned;
				char            Char;
			}               CStruct;
		}               BStruct;
	}               Struct;

$test1(Struct.BStruct.Int)

	return 0;
}
@def_


@def $macro17()
$LICENSE()
$HEAD()
int main(void)
{
	/*--TEST--
	  extern struct.struct.int型への代入
	 --END--*/
	extern struct Struct Struct;

$test1(Struct.BStruct.Int)

	return 0;
}
@def_

@def $macro18()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	struct BStruct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		struct CStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
		}               CStruct;
	}               BStruct;
}               Struct;
union Union {
	int             Int;
	long            Long;
	char            Char;
	union BUnion {
		int             Int;
		long            Long;
		char            Char;
		union CUnion {
			int             Int;
			long            Long;
			char            Char;
		}               CUnion;
	}               BUnion;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	struct BdefStruct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		struct CdefStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
		}               CdefStruct;
	}               BdefStruct;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	char            Char;
	union BdefUnion {
		int             Int;
		long            Long;
		char            Char;
		union CdefUnion {
			int             Int;
			long            Long;
			char            Char;
		}               CdefUnion;
	}               BdefUnion;
}               UNIDEF;
@def_

@def $macro19()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
float           ftest;
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
float           Float;
struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
	struct BStruct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		float           Float;
		struct CStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			float           Float;
		}               CStruct;
	}               BStruct;
}               Struct;
union Union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
	union BUnion {
		int             Int;
		long            Long;
		char            Char;
		float           Float;
		union CUnion {
			int             Int;
			long            Long;
			char            Char;
			float           Float;
		}               CUnion;
	}               BUnion;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef float   FLOATDEF;
typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
	float           Float;
	struct BdefStruct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
		float           Float;
		struct CdefStruct {
			int             Int;
			long            Long;
			short           Short;
			unsigned        Unsigned;
			char            Char;
			float           Float;
		}               CdefStruct;
	}               BdefStruct;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	char            Char;
	float           Float;
	union BdefUnion {
		int             Int;
		long            Long;
		char            Char;
		float           Float;
		union CdefUnion {
			int             Int;
			long            Long;
			char            Char;
			float           Float;
		}               CdefUnion;
	}               BdefUnion;
}               UNIDEF;
@def_

@def $testout()
#ifdef unix
#include<stdio.h>
#define printok() printf("@OK@\n")
#define printno() printf("@NG@\n")
#define ABS(a) ((a > 0)? (a) : (-(a)))
#define MAX(a, b) ((a > b)? (a) : (b))
#define TGEN_FLT_EQ(a, b) ( ((a)==(b)) || ABS(((a) - (b))) / MAX( ABS(a), ABS(b) ) <= __FLT_EPSILON__ )
#endif
@def_

@dir c89.1-3
@file >>fn???.c $macro0([,static]) @file_
@file >>fn???_extern.c $macro1() @file_
@file >>ft???.c $macro2([,static,register], Long, long) @file_
@file >>ft???_extern.c $macro3(Long, long) @file_
@file >>ft???.c $macro2([,static,register], Short, short) @file_
@file >>ft???_extern.c $macro5() @file_
@file >>ft???.c $macro2([,static,register], Unsigned, unsigned) @file_
@file >>ft???_extern.c $macro3(Unsigned, unsigned) @file_
@file >>ft???.c $macro8([,static,register]) @file_
@file >>ft???_extern.c $macro9() @file_
@file >>ft???.c $macro10([,static,register]) @file_
@file >>ft???_extern.c $macro11() @file_
@file >>ft???.c $macro12([,static,register]) @file_
@file >>ft???_extern.c $macro13() @file_
@file >>ft???.c $macro14([,static,register]) @file_
@file >>ft???_extern.c $macro15() @file_
@file >>lt???.c $macro16([,static]) @file_
@file >>lt???_extern.c $macro17() @file_
@file >>stnd3.01.h $macro18() @file_
@file >>fstnd3.01.h $macro19() @file_
@file >>testout.h $testout() @file_
@dir_
