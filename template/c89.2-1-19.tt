@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.19.h"
@def_

@def $FHEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd2.19.h"
@def_

@def $test1($VAR9)
	itest = NO;
	$VAR9 = INUM;

	$VAR9 /= $VAR9;
	$VAR9 *= $VAR9;
	$VAR9 += $VAR9;
	$VAR9 -= $VAR9;
	itest = OK + $VAR9;

	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ctest1($VAR9)
	itest = NO;
	$VAR9 = YCHAR - 1;

	$VAR9 /= $VAR9;
	$VAR9 *= $VAR9;
	$VAR9 += $VAR9;
	$VAR9 -= $VAR9;
	itest = OK + $VAR9;


	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ftest1($VAR9)
	ftest = NO_f;
	$VAR9 = INUM_f;

	$VAR9 /= $VAR9;
	$VAR9 *= $VAR9;
	$VAR9 += $VAR9;
	$VAR9 -= $VAR9;
	ftest = OK_f + $VAR9;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();
@def_

@def $test2($VAR9)
	itest = NO;
	$VAR9 = INUM;

	$VAR9 /= $VAR9;
	$VAR9 *= $VAR9;
	$VAR9 += $VAR9;
	$VAR9 -= $VAR9;
	itest = OK + $VAR9;


	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ftest2($VAR9)
	ftest = NO_f;
	$VAR9 = INUM_f;

	$VAR9 /= $VAR9;
	$VAR9 *= $VAR9;
	$VAR9 += $VAR9;
	$VAR9 -= $VAR9;
	ftest = OK_f + $VAR9;


 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();
@def_

@def $macro0($MODIFIER)
$LICENSE()
$FHEADER()
int main(void)
{

	$MODIFIER float           Float;

	ftest = NO_f;
	Float = INUM_f;

	Float /= Float;
 	Float *= Float;
	Float += Float;
	Float -= Float;
	ftest = OK_f + Float;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return 0;
}
@def_


@def $macro1($MODIFIER)
$LICENSE()
$FHEADER()
int main(void)
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		float           Float;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

	itest = NO;
	Struct.Int = INUM;

	Struct.Int /= Struct.Int;
 	Struct.Int *= Struct.Int;
	Struct.Int += Struct.Int;
	Struct.Int -= Struct.Int;
	itest = OK + Struct.Int;


	if (itest == OK)
		printok();
	else
		printno();


$test1(Struct.Long)

$ftest1(Struct.Float)
$test1(Struct.Short)

$test2(Struct.Unsigned)

$ctest1(Struct.Char)

	return 0;
}
@def_

@def $macro2()
$LICENSE()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd2.19.h"

int main(void)
{
	static union Union {
		int             Int;
		long            Long;
		float           Float;
		char            Char;
	}               Union;

$test2(Union.Int)

$test2(Union.Long)

$ftest2(Union.Float)
$ctest1(Union.Char)

	return 0;
}
@def_
@def $macro3()
$LICENSE()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd2.19.h"

int main(void)
{
	static INTDEF   Intdef;
	static LONGDEF  Longdef;
	static FLOATDEF Floatdef;
	static SHORTDEF Shortdef;
	static UNSIGNDEF Unsigndef;
	static CHARDEF  Chardef;
	static STRDEF   Strdef;
	static UNIDEF   Unidef;

	itest = NO;
	Intdef = INUM;

	Intdef /= Intdef;
	Intdef *= Intdef;
	Intdef += Intdef;
	Intdef -= Intdef;
	itest = OK + Intdef;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Longdef = INUM;

	Longdef /= Longdef;
	Longdef *= Longdef;
	Longdef += Longdef;
	Longdef -= Longdef;
	itest = OK + Longdef;

	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Floatdef = INUM_f;

	Floatdef /= Floatdef;
	Floatdef *= Floatdef;
	Floatdef += Floatdef;
	Floatdef -= Floatdef;
	ftest = OK_f + Floatdef;


 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	itest = NO;
	Shortdef = INUM;

	Shortdef /= Shortdef;
	Shortdef *= Shortdef;
	Shortdef += Shortdef;
	Shortdef -= Shortdef;
	itest = OK + Shortdef;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unsigndef = INUM;

	Unsigndef /= Unsigndef;
	Unsigndef *= Unsigndef;
	Unsigndef += Unsigndef;
	Unsigndef -= Unsigndef;
	itest = OK + Unsigndef;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Chardef = YCHAR - 1;

	Chardef /= Chardef;
	Chardef *= Chardef;
	Chardef += Chardef;
	Chardef -= Chardef;
	itest = OK + Chardef;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Int = INUM;

	Strdef.Int /= Strdef.Int;
	Strdef.Int *= Strdef.Int;
	Strdef.Int += Strdef.Int;
	Strdef.Int -= Strdef.Int;
	itest = OK + Strdef.Int;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Long = INUM;

	Strdef.Long /= Strdef.Long;
	Strdef.Long *= Strdef.Long;
	Strdef.Long += Strdef.Long;
	Strdef.Long -= Strdef.Long;
	itest = OK + Strdef.Long;


	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Strdef.Float = INUM_f;

	Strdef.Float /= Strdef.Float;
	Strdef.Float *= Strdef.Float;
	Strdef.Float += Strdef.Float;
	Strdef.Float -= Strdef.Float;
	ftest = OK_f + Strdef.Float;


 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	itest = NO;
	Strdef.Short = INUM;

	Strdef.Short /= Strdef.Short;
	Strdef.Short *= Strdef.Short;
	Strdef.Short += Strdef.Short;
	Strdef.Short -= Strdef.Short;
	itest = OK + Strdef.Short;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Unsigned = INUM;

	Strdef.Unsigned /= Strdef.Unsigned;
	Strdef.Unsigned *= Strdef.Unsigned;
	Strdef.Unsigned += Strdef.Unsigned;
	Strdef.Unsigned -= Strdef.Unsigned;
	itest = OK + Strdef.Unsigned;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Char = YCHAR - 1;

	Strdef.Char /= Strdef.Char;
	Strdef.Char *= Strdef.Char;
	Strdef.Char += Strdef.Char;
	Strdef.Char -= Strdef.Char;
	itest = OK + Strdef.Char;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Int = INUM;

	Unidef.Int /= Unidef.Int;
	Unidef.Int *= Unidef.Int;
	Unidef.Int += Unidef.Int;
	Unidef.Int -= Unidef.Int;
	itest = OK + Unidef.Int;


	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Long = INUM;


	Unidef.Long /= Unidef.Long;
	Unidef.Long *= Unidef.Long;
	Unidef.Long += Unidef.Long;
	Unidef.Long -= Unidef.Long;
	itest = OK + Unidef.Long;


	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Unidef.Float = INUM_f;

	Unidef.Float /= Unidef.Float;
	Unidef.Float *= Unidef.Float;
	Unidef.Float += Unidef.Float;
	Unidef.Float -= Unidef.Float;
	ftest = OK_f + Unidef.Float;


 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	itest = NO;
	Unidef.Char = YCHAR - 1;

	Unidef.Char /= Unidef.Char;
	Unidef.Char *= Unidef.Char;
	Unidef.Char += Unidef.Char;
	Unidef.Char -= Unidef.Char;
	itest = OK + Unidef.Char;


	if (itest == OK)
		printok();
	else
		printno();


	return 0;
}
@def_

@def $macro4($MODIFIER)
$LICENSE()
$HEADER()
int main(void)
{
	$MODIFIER long            Long;

$test2(Long)

	return 0;
}
@def_


@def $macro5($MODIFIER)
$LICENSE()
$HEADER()
int main(void)
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test2(Struct.Long)

$test2(Struct.Short)

$test2(Struct.Unsigned)

$ctest1(Struct.Char)

	return 0;
}
@def_

@def $macro6()
$LICENSE()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.19.h"

int main(void)
{
	static union Union {
		int             Int;
		long            Long;
		char            Char;
	}               Union;

	itest = NO;
	Union.Int = INUM;

	Union.Int /= Union.Int;
	Union.Int *= Union.Int;
	Union.Int += Union.Int;
	Union.Int -= Union.Int;
	itest = OK + Union.Int;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Union.Long = INUM;

	Union.Long /= Union.Long;
	Union.Long *= Union.Long;
	Union.Long += Union.Long;
	Union.Long -= Union.Long;
	itest = OK + Union.Long;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Union.Char = YCHAR - 1;

	Union.Char /= Union.Char;
	Union.Char *= Union.Char;
	Union.Char += Union.Char;
	Union.Char -= Union.Char;
	itest = OK + Union.Char;


	if (itest == OK)
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro7()
$LICENSE()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.19.h"

int main(void)
{
	static INTDEF   Intdef;
	static LONGDEF  Longdef;
	static SHORTDEF Shortdef;
	static UNSIGNDEF Unsigndef;
	static CHARDEF  Chardef;
	static STRDEF   Strdef;
	static UNIDEF   Unidef;

$test1(Intdef)

$test1(Longdef)

$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Long)

$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$test1(Unidef.Long)

$ctest1(Unidef.Char)

	return 0;
}
@def_

@def $macro8()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
#define INUM 2
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;
union Union {
	int             Int;
	long            Long;
	char            Char;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	char            Char;
}               UNIDEF;
@def_

@def $macro9()
$LICENSE()
#include "testout.h"
float           ftest;
long            itest;
char            ctest;
#define INUM 2
#define INUM_f 2.0
#define OK_f 1.0
#define NO_f 0.0
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
float           Float;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	float           Float;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;
union Union {
	int             Int;
	long            Long;
	float           Float;
	char            Char;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef float   FLOATDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	float           Float;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	float           Float;
	char            Char;
}               UNIDEF;
@def_

@def $macro10($MODIFIER,$VAR1,$TYPE1)
$LICENSE()
$HEADER()
int main(void)
{
	$MODIFIER $TYPE1 $VAR1;

	itest = NO;
	$VAR1 = INUM;

	$VAR1 /= $VAR1;
	$VAR1 *= $VAR1;
	$VAR1 += $VAR1;
	$VAR1 -= $VAR1;
	itest = OK + $VAR1;

	if (itest == OK)
		printok();
	else
		printno();


	return 0;
}
@def_

@def $macro15($MODIFIER)
$LICENSE()
$HEADER()
int main(void)
{
	$MODIFIER struct Struct {
		int             Int;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test1(Struct.Short)

$test1(Struct.Unsigned)

$ctest1(Struct.Char)

	return 0;
}
@def_


@def $macro16()
$LICENSE()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.19.h"

int main(void)
{
	static union Union {
		int             Int;
		char            Char;
	}               Union;

$test1(Union.Int)

$ctest1(Union.Char)

	return 0;
}
@def_
@def $macro17()
$LICENSE()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.19.h"

int main(void)
{
	static INTDEF   Intdef;
	static SHORTDEF Shortdef;
	static UNSIGNDEF Unsigndef;
	static CHARDEF  Chardef;
	static STRDEF   Strdef;
	static UNIDEF   Unidef;

$test1(Intdef)

$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$ctest1(Unidef.Char)

	return 0;
}
@def_

@dir c89.2-1-19
@file >>ft???.c $macro0([,extern,static]) @file_
@file >>ft???.c $macro1([,static]) @file_
@file >>ft022.c $macro2() @file_
@file >>ft026.c $macro3() @file_
@file >>lt???.c $macro4([,extern,static]) @file_
@file >>lt???.c $macro5([,static]) @file_
@file >>lt022.c $macro6() @file_
@file >>lt026.c $macro7() @file_
@file >>stnd2.19.h $macro8() @file_
@file >>fstnd2.19.h $macro9() @file_
@file >>t???_.c $macro10([,static,register],Variable,[int,short,unsigned,char]) @file_
@file >>t???_extern_int.c $macro10(extern,Int,int) @file_
@file >>t???_extern_short.c $macro10(extern,Short,short) @file_
@file >>t???_extern_unsigned.c $macro10(extern,Unsigned,unsigned) @file_
@file >>t???_extern_char.c $macro10(extern,Char,char) @file_
@file >>t???.c $macro15([,static,register]) @file_
@file >>t022.c $macro16() @file_
@file >>t029.c $macro17() @file_

@dir_
