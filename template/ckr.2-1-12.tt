@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.12.h"
@def_

@def $FHEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd2.12.h"
@def_

@def $test1($VAR9)
	itest = NO;
	$VAR9 = OK;
	itest = $VAR9 != $VAR9 != $VAR9 == $VAR9;

	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ctest1($VAR9)
	itest = NO;
	$VAR9 = YCHAR;
	itest = $VAR9 == $VAR9 != $VAR9;

	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ftest1($VAR9)
	ftest = NO_f;
	$VAR9 = OK_f;
	ftest = $VAR9 != $VAR9 != $VAR9 == $VAR9;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();
@def_

@def $macro0($TYPE1,$TYPE2)
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	short           Short;

	ftest = NO_f;
	Float = OK_f;
	Short = OK;
	ftest = $TYPE1 != $TYPE2 != $TYPE1 == $TYPE2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_

@def $macro2($TYPE1,$TYPE2)
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	unsigned        Unsigned;

	ftest = NO_f;
	Float = OK_f;
	Unsigned = OK;
	ftest = $TYPE1 != $TYPE2 != $TYPE1 == $TYPE2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_

@def $macro4($TYPE1,$TYPE2)
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	long            Long;

	ftest = NO_f;
	Float = OK_f;
	Long = OK;
	ftest = $TYPE1 != $TYPE2 != $TYPE1 == $TYPE2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_

@def $macro6($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER float           Float;

$ftest1(Float)
	return (0);
}
@def_


@def $macro7($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		float           Float;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test1(Struct.Long)

$ftest1(Struct.Float)
$test1(Struct.Short)

$test1(Struct.Unsigned)

$ctest1(Struct.Char)

	return (0);
}
@def_


@def $macro8($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		long            Long;
		float           Float;
		char            Char;
	}               Union;

$test1(Union.Int)

$test1(Union.Long)

$ftest1(Union.Float)
$ctest1(Union.Char)

	return (0);
}
@def_


@def $macro9($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER LONGDEF         Longdef;
	$MODIFIER FLOATDEF        Floatdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

$test1(Intdef)

$test1(Longdef)

$ftest1(Floatdef)
$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Long)

$ftest1(Strdef.Float)
$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$test1(Unidef.Long)

$ftest1(Unidef.Float)
$ctest1(Unidef.Char)

	return (0);
}
@def_


@def $macro10($TYPE1,$TYPE2)
$LICENSE()
$HEADER()
main()
{
	long            Long;
	short           Short;

	itest = NO;
	Long = OK;
	Short = OK;
	itest = $TYPE1 != $TYPE2 != $TYPE1 == $TYPE2;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_

@def $macro12($TYPE1,$TYPE2)
$LICENSE()
$HEADER()
main()
{
	long            Long;
	unsigned        Unsigned;

	itest = NO;
	Long = OK;
	Unsigned = OK;
	itest = $TYPE1 != $TYPE2 != $TYPE1 == $TYPE2;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_

@def $macro14($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER long            Long;

$test1(Long)

	return (0);
}
@def_


@def $macro15($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test1(Struct.Long)

$test1(Struct.Short)

$test1(Struct.Unsigned)

$ctest1(Struct.Char)

	return (0);
}
@def_


@def $macro16($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		long            Long;
		char            Char;
	}               Union;

$test1(Union.Int)

$test1(Union.Long)

$ctest1(Union.Char)

	return (0);
}
@def_


@def $macro17($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER LONGDEF         Longdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

$test1(Intdef)

$test1(Longdef)

$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Long)

$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$test1(Unidef.Long)

$ctest1(Unidef.Char)

	return (0);
}
@def_


@def $macro18()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;
union Union {
	int             Int;
	long            Long;
	char            Char;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	char            Char;
}               UNIDEF;
@def_

@def $macro19()
$LICENSE()
#include "testout.h"
float           ftest;
long            itest;
char            ctest;
#define OK_f 1.0
#define NO_f 0.0
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
float           Float;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	float           Float;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;
union Union {
	int             Int;
	long            Long;
	float           Float;
	char            Char;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef float   FLOATDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	float           Float;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	float           Float;
	char            Char;
}               UNIDEF;
@def_

@def $macro20($MODIFIER,$TYPE1,$TYPE2)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER $TYPE2 $TYPE1;

	itest = NO;
	$TYPE1 = OK;
	itest = $TYPE1 != $TYPE1 != $TYPE1 == $TYPE1;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_

@def $macro25($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

$test1(Struct.Int)

$test1(Struct.Short)

$test1(Struct.Unsigned)

$ctest1(Struct.Char)

	return (0);
}
@def_


@def $macro26($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		char            Char;
	}               Union;

$test1(Union.Int)

$ctest1(Union.Char)

	return (0);
}
@def_


@def $macro27($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

$test1(Intdef)

$test1(Shortdef)

$test1(Unsigndef)

$ctest1(Chardef)

$test1(Strdef.Int)

$test1(Strdef.Short)

$test1(Strdef.Unsigned)

$ctest1(Strdef.Char)

$test1(Unidef.Int)

$ctest1(Unidef.Char)

	return (0);
}
@def_

@include
testout.h.inc
@include_

@dir ckr.2-1-12
@file >>fn???.c $macro0(Float,Short) @file_
@file >>fn???.c $macro0(Short,Float) @file_
@file >>fn???.c $macro2(Float,Unsigned) @file_
@file >>fn???.c $macro2(Unsigned,Float) @file_
@file >>fn???.c $macro4(Float,Long) @file_
@file >>fn???.c $macro4(Long,Float) @file_
@file >>ft???.c $macro6([,extern,static]) @file_
@file >>ft???.c $macro7([,static]) @file_
@file >>ft???.c $macro8([,static]) @file_
@file >>ft???.c $macro9([,static]) @file_
@file >>ln000.c $macro10(Long,Short) @file_
@file >>ln001.c $macro10(Short,Long) @file_
@file >>ln002.c $macro12(Long,Unsigned) @file_
@file >>ln003.c $macro12(Unsigned,Long) @file_
@file >>lt???.c $macro14([,extern,static]) @file_
@file >>lt???.c $macro15([,static]) @file_
@file >>lt???.c $macro16([,static]) @file_
@file >>lt???.c $macro17([,static]) @file_
@file >>stnd2.12.h $macro18() @file_
@file >>fstnd2.12.h $macro19() @file_
@file >>t???_.c $macro20([,static,register],Variable,[int,short,unsigned,char]) @file_
@file >>t???_extern_int.c $macro20(extern,Int,int) @file_
@file >>t???_extern_shortn.c $macro20(extern,Short,short) @file_
@file >>t???_extern_unsigned.c $macro20(extern,Unsigned,unsigned) @file_
@file >>t???_extern_char.c $macro20(extern,Char,char) @file_
@file >>t???.c $macro25([,static,register]) @file_
@file >>t???.c $macro26([,static,register]) @file_
@file >>t???.c $macro27([,static,register]) @file_
@file >>testout.h $testout() @file_
@dir_
