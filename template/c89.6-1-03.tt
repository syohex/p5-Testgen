@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@def $LICENSE()
/*
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
hikichi@sra.co.jp(Nobuyuki Hikichi)

This file was written by several people in Software Research Associates,
Inc. Japan in several years.
*/
@def_

@comment
複数フィイルのテスト
@comment_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
@def_

@def $macro0()
$LICENSE()
#include "testout.h"
#define NO 0
#define OK 1
#define YCHAR	'y'
#define NCHAR	'n'
#define NoMistake 00
@def_

@def $macro1()
$LICENSE()
$HEAD()
#include    "fstnd.h"
#include    "ftdef.h"
INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];
FLOATDEF        Floatdef[1];

extern void function(void);

int main(void)
{
	function();
	return 0;
}
@def_
@def $macro2()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];
extern FLOATDEF Floatdef[1];

void refer(void);

void function(void)
{
	itest = NO;
	*Intdef = OK;
	itest = *Intdef;
	refer();


	itest = NO;
	*Shortdef = OK;
	itest = *Shortdef;
	refer();


	ltest = NO;
	*Longdef = OK;
	ltest = *Longdef;

	if (ltest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Unsigndef = OK;
	itest = *Unsigndef;
	refer();


	ctest = NCHAR;
	*Chardef = YCHAR;
	ctest = *Chardef;

	if (ctest == YCHAR)
		printok();
	else
		printno();


	ftest = NO;
	*Floatdef = OK;
	ftest = *Floatdef;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}

void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro3()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern float    ftest;
	extern float    Float;

	ftest = NO;
	Float = 1.0;
	ftest = Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_
@def $macro4()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"


int             itest;
long            ltest;
char            ctest;
float           ftest;

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];
FLOATDEF        Floatdef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	itest = NO;
	*Intdef = OK;
	function_I();


	itest = NO;
	*Shortdef = OK;
	function_S();


	ltest = NO;
	*Longdef = OK;
	function_L();


	itest = NO;
	*Unsigndef = OK;
	function_U();


	ctest = NCHAR;
	*Chardef = YCHAR;
	function_C();



	ftest = NO;
	*Floatdef = 1.0;
	function_F();


	return 0;
}
@def_
@def $macro5()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;


extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];
extern FLOATDEF Floatdef[1];

void refer(void);

void function_I(void)
{
	itest = *Intdef;
	refer();
}


void function_S(void)
{
	itest = *Shortdef;
	refer();
}


void function_L(void)
{
	ltest = *Longdef;

	if (ltest == OK)
		printok();
	else
		printno();
}

void function_U(void)
{
	itest = *Unsigndef;
	refer();
}

void function_C(void)
{
	ctest = *Chardef;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}

void function_F(void)
{
	ftest = *Floatdef;

 if ( (TGEN_FLT_EQ(ftest, OK)) )
		printok();
	else
		printno();
}

void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro6()
$LICENSE()
$HEAD()

#include    "fstnd.h"

extern void function(void);

int main(void)
{
	ftest = NO;
	*Float = 1.0;
	function();
	return 0;
}
@def_
@def $macro7()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern float    ftest;
	extern float    Float[];

	ftest = *Float;
 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_
@def $macro8()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "ftdef.h"

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];
FLOATDEF        Floatdef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	function_I();
	if (itest == OK)
		printok();
	else
		printno();


	function_S();
	if (itest == OK)
		printok();
	else
		printno();


	function_L();
	if (ltest == OK)
		printok();
	else
		printno();


	function_U();
	if (itest == OK)
		printok();
	else
		printno();


	function_C();
	if (ctest == YCHAR)
		printok();
	else
		printno();


	function_F();
 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro9()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];
extern FLOATDEF Floatdef[1];


void function_I(void)
{
	itest = NO;
	*Intdef = OK;
	itest = *Intdef;
}


void function_S(void)
{
	itest = NO;
	*Shortdef = OK;
	itest = *Shortdef;
}


void function_L(void)
{
	ltest = NO;
	*Longdef = OK;
	ltest = *Longdef;
}


void function_U(void)
{
	itest = NO;
	*Unsigndef = OK;
	itest = *Unsigndef;
}


void function_C(void)
{
	ctest = NCHAR;
	*Chardef = YCHAR;
	ctest = *Chardef;
}


void function_F(void)
{
	ftest = NO;
	*Floatdef = 1.0;
	ftest = *Floatdef;
}
@def_
@def $macro10()
$LICENSE()
$HEAD()

#include    "fstnd.h"

extern void function(void);

int main(void)
{
	function();
 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro11()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern float    ftest;
	extern float    Float[];

	ftest = NO;
	*Float = 1.0;
	ftest = *Float;
}
@def_
@def $macro12()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "ftdef.h"

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];
FLOATDEF        Floatdef[1];

extern void function_I(int*);
extern void function_S(short*);
extern void function_L(long*);
extern void function_U(unsigned*);
extern void function_C(char*);
extern void function_F(float*);

int main(void)
{
	itest = NO;
	*Intdef = OK;
	function_I(Intdef);


	itest = NO;
	*Shortdef = OK;
	function_S(Shortdef);


	ltest = NO;
	*Longdef = OK;
	function_L(Longdef);


	itest = NO;
	*Unsigndef = OK;
	function_U(Unsigndef);


	ctest = NCHAR;
	*Chardef = YCHAR;
	function_C(Chardef);


	ftest = NO;
	*Floatdef = 1.0;
	function_F(Floatdef);

	return 0;
}
@def_
@def $macro13()
$LICENSE()
$HEAD()

#include    "def.h"
#include   "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];
extern FLOATDEF Floatdef[1];

void refer(void);

void function_I(int *argument)
{
	if (*argument == 1)
		itest = *Intdef;
	refer();
}


void function_S(short *argument)
{
	if (*argument == 1)
		itest = *Shortdef;
	refer();
}


void function_L(long *argument)
{
	if (*argument == 1)
		ltest = *Longdef;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(unsigned *argument)
{
	if (*argument == 1)
		itest = *Unsigndef;
	refer();
}


void function_C(char *argument)
{
	if (*argument == 'y')
		ctest = *Chardef;


	if (ctest == YCHAR)
		printok();
	else
		printno();
}



void function_F(float *argument)
{
	if ( TGEN_FLT_EQ(*argument, 1.0) )
		ftest = *Floatdef;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro14()
$LICENSE()
$HEAD()

#include    "fstnd.h"

extern void function(float*);

int main(void)
{
	ftest = NO;
	*Float = 1.0;
	function(Float);
	return 0;
}
@def_
@def $macro15()
$LICENSE()
$HEAD()

#include    "def.h"

void function(float *argument)
{
	extern float    ftest;
	extern float    Float[];


	if (TGEN_FLT_EQ(*argument, 1.0) )
		ftest = *Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_
@def $macro16()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"
#include    "ftdef.h"

struct Str      Struct[1];
STRDEF          Strdef[1];

extern void function(void);

int main(void)
{
	function();
	return 0;
}
@def_
@def $macro17()
$LICENSE()
$HEAD()

#include     "def.h"
#include    "fstrc.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;
	extern float    ftest;

	extern struct Str Struct[];


	itest = NO;
	*Struct->Int = OK;
	itest = *Struct->Int;

	if (itest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Struct->Short = OK;
	itest = *Struct->Short;

	if (itest == OK)
		printok();
	else
		printno();



	ltest = NO;
	*Struct->Long = OK;
	ltest = *Struct->Long;

	if (ltest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Struct->Unsigned = OK;
	itest = *Struct->Unsigned;

	if (itest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Struct->Char = YCHAR;
	ctest = *Struct->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();


	ftest = NO;
	*Struct->Float = 1.0;
	ftest = *Struct->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();



}
@def_
@def $macro18()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;
	extern float    ftest;

	extern STRDEF   Strdef[];


	itest = NO;
	*Strdef->Int = OK;
	itest = *Strdef->Int;

	if (itest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Strdef->Short = OK;
	itest = *Strdef->Short;

	if (itest == OK)
		printok();
	else
		printno();



	ltest = NO;
	*Strdef->Long = OK;
	ltest = *Strdef->Long;

	if (ltest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Strdef->Unsigned = OK;
	itest = *Strdef->Unsigned;

	if (itest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	ctest = *Strdef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();



	ftest = NO;
	*Strdef->Float = 1.0;
	ftest = *Strdef->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();



}
@def_
@def $macro19()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"
#include    "ftdef.h"

union Uni       Union[1];
UNIDEF          Unidef[1];

extern void function(void);

int main(void)
{
	function();
	return 0;
}
@def_
@def $macro20()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "fstrc.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;
	extern float    ftest;

	extern union Uni Union[];


	itest = NO;
	*Union->Int = OK;
	itest = *Union->Int;

	if (itest == OK)
		printok();
	else
		printno();



	ltest = NO;
	*Union->Long = OK;
	ltest = *Union->Long;

	if (ltest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Union->Char = YCHAR;
	ctest = *Union->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();


	ftest = NO;
	*Union->Float = 1.0;
	ftest = *Union->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();



}
@def_
@def $macro21()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;
	extern float    ftest;

	extern UNIDEF   Unidef[];


	itest = NO;
	*Unidef->Int = OK;
	itest = *Unidef->Int;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	*Unidef->Long = OK;
	itest = *Unidef->Long;

	if (itest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	ctest = *Unidef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();



	ftest = NO;
	*Unidef->Float = 1.0;
	ftest = *Unidef->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();



}
@def_
@def $macro22()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"

struct Str      Struct[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	itest = NO;
	*Struct->Int = OK;
	function_I();


	itest = NO;
	*Struct->Short = OK;
	function_S();


	ltest = NO;
	*Struct->Long = OK;
	function_L();


	itest = NO;
	*Struct->Unsigned = OK;
	function_U();


	ctest = NCHAR;
	*Struct->Char = YCHAR;
	function_C();



	ftest = NO;
	*Struct->Float = 1.0;
	function_F();


	return 0;
}
@def_
@def $macro23()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "fstrc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern struct Str Struct[];

void refer(void);

void function_I(void)
{
	itest = *Struct->Int;
	refer();
}


void function_S(void)
{
	itest = *Struct->Short;
	refer();
}


void function_L(void)
{
	ltest = *Struct->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(void)
{
	itest = *Struct->Unsigned;
	refer();
}


void function_C(void)
{
	ctest = *Struct->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(void)
{
	ftest = *Struct->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro24()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"

union Uni       Union[1];

extern void function_I(void);
extern void function_L(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	itest = NO;
	*Union->Int = OK;
	function_I();


	ltest = NO;
	*Union->Long = OK;
	function_L();


	ctest = NCHAR;
	*Union->Char = YCHAR;
	function_C();


	ftest = NO;
	*Union->Float = 1.0;
	function_F();


	return 0;
}
@def_
@def $macro25()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "fstrc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern union Uni Union[];


void function_I(void)
{
	itest = *Union->Int;

	if (itest == OK)
		printok();
	else
		printno();
}



void function_L(void)
{
	ltest = *Union->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}



void function_C(void)
{
	ctest = *Union->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(void)
{
	ftest = *Union->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_
@def $macro26()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"


int             itest;
long            ltest;
char            ctest;
float           ftest;

STRDEF          Strdef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	itest = NO;
	*Strdef->Int = OK;
	function_I();


	itest = NO;
	*Strdef->Short = OK;
	function_S();


	ltest = NO;
	*Strdef->Long = OK;
	function_L();


	itest = NO;
	*Strdef->Unsigned = OK;
	function_U();


	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	function_C();


	ftest = NO;
	*Strdef->Float = 1.0;
	function_F();


	return 0;
}
@def_
@def $macro27()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern STRDEF   Strdef[];

void refer(void);

void function_I(void)
{
	itest = *Strdef->Int;
	refer();
}


void function_S(void)
{
	itest = *Strdef->Short;
	refer();
}


void function_L(void)
{
	ltest = *Strdef->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(void)
{
	itest = *Strdef->Unsigned;
	refer();
}


void function_C(void)
{
	ctest = *Strdef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(void)
{
	ftest = *Strdef->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro28()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"


int             itest;
long            ltest;
char            ctest;
float           ftest;

UNIDEF          Unidef[1];

extern void function_I(void);
extern void function_L(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	itest = NO;
	*Unidef->Int = OK;
	function_I();


	ltest = NO;
	*Unidef->Long = OK;
	function_L();


	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	function_C();


	ftest = NO;
	*Unidef->Float = 1.0;
	function_F();


	return 0;
}
@def_
@def $macro29()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern UNIDEF   Unidef[];

void function_I(void)
{
	itest = *Unidef->Int;

	if (itest == OK)
		printok();
	else
		printno();
}


void function_L(void)
{
	ltest = *Unidef->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_C(void)
{
	ctest = *Unidef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(void)
{
	ftest = *Unidef->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_
@def $macro30()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"
#include    "ftdef.h"

struct Str      Struct[1];
STRDEF          Strdef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);

int main(void)
{
	function_I();
	if (itest == OK)
		printok();
	else
		printno();


	function_S();
	if (itest == OK)
		printok();
	else
		printno();


	function_L();
	if (ltest == OK)
		printok();
	else
		printno();


	function_U();
	if (itest == OK)
		printok();
	else
		printno();


	function_C();
	if (ctest == YCHAR)
		printok();
	else
		printno();


	function_F();
 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro31()
$LICENSE()
$HEAD()

#include     "def.h"
#include    "fstrc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern struct Str Struct[];

void function_I(void)
{
	itest = NO;
	*Struct->Int = OK;
	itest = *Struct->Int;
}


void function_S(void)
{
	itest = NO;
	*Struct->Short = OK;
	itest = *Struct->Short;
}


void function_L(void)
{
	ltest = NO;
	*Struct->Long = OK;
	ltest = *Struct->Long;
}


void function_U(void)
{
	itest = NO;
	*Struct->Unsigned = OK;
	itest = *Struct->Unsigned;
}


void function_C(void)
{
	ctest = NCHAR;
	*Struct->Char = YCHAR;
	ctest = *Struct->Char;
}


void function_F(void)
{
	ftest = NO;
	*Struct->Float = 1.0;
	ftest = *Struct->Float;
}
@def_
@def $macro32()
$LICENSE()
$HEAD()

#include     "def.h"
#include     "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern STRDEF   Strdef[];

void function_I(void)
{
	itest = NO;
	*Strdef->Int = OK;
	itest = *Strdef->Int;
}


void function_S(void)
{
	itest = NO;
	*Strdef->Short = OK;
	itest = *Strdef->Short;
}


void function_L(void)
{
	ltest = NO;
	*Strdef->Long = OK;
	ltest = *Strdef->Long;
}


void function_U(void)
{
	itest = NO;
	*Strdef->Unsigned = OK;
	itest = *Strdef->Unsigned;
}


void function_C(void)
{
	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	ctest = *Strdef->Char;
}


void function_F(void)
{
	ftest = NO;
	*Strdef->Float = 1.0;
	ftest = *Strdef->Float;
}
@def_
@def $macro33()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"
#include    "ftdef.h"

union Uni       Union[1];
UNIDEF          Unidef[1];

extern void function_I(void);
extern void function_L(void);
extern void function_C(void);
extern void function_F(void);

int main(void)
{
	function_I();
	if (itest == OK)
		printok();
	else
		printno();


	function_L();
	if (ltest == OK)
		printok();
	else
		printno();


	function_C();
	if (ctest == YCHAR)
		printok();
	else
		printno();


	function_F();
 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro34()
$LICENSE()
$HEAD()

#include     "def.h"
#include    "fstrc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern union Uni Union[];

void function_I(void)
{
	itest = NO;
	*Union->Int = OK;
	itest = *Union->Int;
}


void function_L(void)
{
	ltest = NO;
	*Union->Long = OK;
	ltest = *Union->Long;
}


void function_C(void)
{
	ctest = NCHAR;
	*Union->Char = YCHAR;
	ctest = *Union->Char;
}


void function_F(void)
{
	ftest = NO;
	*Union->Float = 1.0;
	ftest = *Union->Float;
}
@def_
@def $macro35()
$LICENSE()
$HEAD()

#include     "def.h"
#include     "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

extern UNIDEF   Unidef[];

void function_I(void)
{
	itest = NO;
	*Unidef->Int = OK;
	itest = *Unidef->Int;
}


void function_L(void)
{
	ltest = NO;
	*Unidef->Long = OK;
	ltest = *Unidef->Long;
}


void function_C(void)
{
	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	ctest = *Unidef->Char;
}


void function_F(void)
{
	ftest = NO;
	*Unidef->Float = 1.0;
	ftest = *Unidef->Float;
}
@def_
@def $macro36()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"

struct Str      Struct[1];

extern void function_I(struct Str*);
extern void function_S(struct Str*);
extern void function_L(struct Str*);
extern void function_U(struct Str*);
extern void function_C(struct Str*);
extern void function_F(struct Str*);

int main(void)
{
	itest = NO;
	*Struct->Int = OK;
	function_I(Struct);


	itest = NO;
	*Struct->Short = OK;
	function_S(Struct);


	ltest = NO;
	*Struct->Long = OK;
	function_L(Struct);


	itest = NO;
	*Struct->Unsigned = OK;
	function_U(Struct);


	ctest = NCHAR;
	*Struct->Char = YCHAR;
	function_C(Struct);


	ftest = NO;
	*Struct->Float = 1.0;
	function_F(Struct);


	return 0;
}
@def_
@def $macro37()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "fstrc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

void refer(void);

void function_I(struct Str *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;
	refer();
}


void function_S(struct Str *argument)
{
	if (*argument->Short == 1)
		itest = *argument->Short;
	refer();
}


void function_L(struct Str *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(struct Str *argument)
{
	if (*argument->Unsigned == 1)
		itest = *argument->Unsigned;
	refer();
}


void function_C(struct Str *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(struct Str *argument)
{
	if ( TGEN_FLT_EQ(*argument->Float, 1.0) )
		ftest = *argument->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro38()
$LICENSE()
$HEAD()

#include    "fstnd.h"
#include    "fstrc.h"

union Uni       Union[1];

extern void function_I(union Uni*);
extern void function_L(union Uni*);
extern void function_C(union Uni*);
extern void function_I(union Uni*);

int main(void)
{
	itest = NO;
	*Union->Int = OK;
	function_I(Union);


	ltest = NO;
	*Union->Long = OK;
	function_L(Union);


	ctest = NCHAR;
	*Union->Char = YCHAR;
	function_C(Union);


	ftest = NO;
	*Union->Float = 1.0;
	function_I(Union);


	return 0;
}
@def_
@def $macro39()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "fstrc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;



void function_I(union Uni *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;

	if (itest == OK)
		printok();
	else
		printno();
}


void function_L(union Uni *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_C(union Uni *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}




void function_F(union Uni *argument)
{
	if ( TGEN_FLT_EQ(*argument->Float, 1.0) )
		ftest = *argument->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_
@def $macro40()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

int             itest;
long            ltest;
char            ctest;
float           ftest;

STRDEF          Strdef[1];

extern void function_I(STRDEF*);
extern void function_S(STRDEF*);
extern void function_L(STRDEF*);
extern void function_U(STRDEF*);
extern void function_C(STRDEF*);
extern void function_I(STRDEF*);

int main(void)
{

	itest = NO;
	*Strdef->Int = OK;
	function_I(Strdef);


	itest = NO;
	*Strdef->Short = OK;
	function_S(Strdef);


	ltest = NO;
	*Strdef->Long = OK;
	function_L(Strdef);


	itest = NO;
	*Strdef->Unsigned = OK;
	function_U(Strdef);


	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	function_C(Strdef);


	ftest = NO;
	*Strdef->Float = 1.0;
	function_I(Strdef);


	return 0;
}
@def_
@def $macro41()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;

void refer(void);

void function_I(STRDEF *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;
	refer();
}


void function_S(STRDEF *argument)
{
	if (*argument->Short == 1)
		itest = *argument->Short;
	refer();
}


void function_L(STRDEF *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(STRDEF *argument)
{
	if (*argument->Unsigned == 1)
		itest = *argument->Unsigned;
	refer();
}


void function_C(STRDEF *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(STRDEF *argument)
{
	if (TGEN_FLT_EQ(*argument->Float, 1.0) )
		ftest = *argument->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro42()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

UNIDEF          Unidef[1];


int             itest;
long            ltest;
char            ctest;
float           ftest;

extern void function_I(UNIDEF*);
extern void function_L(UNIDEF*);
extern void function_C(UNIDEF*);
extern void function_I(UNIDEF*);

int main(void)
{
	itest = NO;
	*Unidef->Int = OK;
	function_I(Unidef);


	ltest = NO;
	*Unidef->Long = OK;
	function_L(Unidef);


	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	function_C(Unidef);


	ftest = NO;
	*Unidef->Float = 1.0;
	function_I(Unidef);


	return 0;
}
@def_
@def $macro43()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "ftdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;
extern float    ftest;


void function_I(UNIDEF *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;

	if (itest == OK)
		printok();
	else
		printno();
}


void function_L(UNIDEF *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_C(UNIDEF *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void function_F(UNIDEF *argument)
{
	if ( TGEN_FLT_EQ(*argument->Float, 1.0) )
		ftest = *argument->Float;

 if ( (TGEN_FLT_EQ(ftest, 1.0)) )
		printok();
	else
		printno();
}
@def_

@def $macro44()
$LICENSE()
#include "testout.h"
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             itest;
long            ltest;
char            ctest;
int             Int[1];
short           Short[1];
long            Long[1];
unsigned        Unsigned[1];
char            Char[1];
@def_

@def $macro45()
$LICENSE()
#include "testout.h"
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             itest;
long            ltest;
char            ctest;
float           ftest;
int             Int[1];
short           Short[1];
long            Long[1];
unsigned        Unsigned[1];
char            Char[1];
float           Float[1];
@def_

@def $macro46()
$LICENSE()
struct Str {
	int             Int[1];
	short           Short[1];
	long            Long[1];
	unsigned        Unsigned[1];
	char            Char[1];
};

union Uni {
	int             Int[1];
	long            Long[1];
	char            Char[1];
};
@def_

@def $macro47()
$LICENSE()
struct Str {
	int             Int[1];
	short           Short[1];
	long            Long[1];
	unsigned        Unsigned[1];
	char            Char[1];
	float           Float[1];
};

union Uni {
	int             Int[1];
	long            Long[1];
	char            Char[1];
	float           Float[1];
};
@def_

@def $macro48()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "tdef.h"

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];

extern void function(void);

int main(void)
{
	function();
	return 0;
}
@def_
@def $macro49()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern int      Int[];

	itest = NO;
	*Int = OK;
	itest = *Int;

	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro50()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern short    Short[];

	itest = NO;
	*Short = OK;
	itest = *Short;

	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro51()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern long     ltest;
	extern long     Long[];

	ltest = NO;
	*Long = OK;
	ltest = *Long;

	if (ltest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro52()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern unsigned Unsigned[];

	itest = NO;
	*Unsigned = OK;
	itest = *Unsigned;

	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro53()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern char     ctest;
	extern char     Char[];

	ctest = NCHAR;
	*Char = YCHAR;
	ctest = *Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_
@def $macro54()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];

void refer(void);

void function(void)
{
	itest = NO;
	*Intdef = OK;
	itest = *Intdef;
	refer();


	itest = NO;
	*Shortdef = OK;
	itest = *Shortdef;
	refer();


	ltest = NO;
	*Longdef = OK;
	ltest = *Longdef;

	if (ltest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Unsigndef = OK;
	itest = *Unsigndef;
	refer();


	ctest = NCHAR;
	*Chardef = YCHAR;
	ctest = *Chardef;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro55()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(void);

int main(void)
{
	itest = NO;
	*Int = OK;
	function();
	return 0;
}
@def_
@def $macro56()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern int      Int[];

	itest = *Int;
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro57()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(void);

int main(void)
{
	itest = NO;
	*Short = OK;
	function();
	return 0;
}
@def_
@def $macro58()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern short    Short[];

	itest = *Short;
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro59()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(void);

int main(void)
{
	ltest = NO;
	*Long = OK;
	function();
	return 0;
}
@def_
@def $macro60()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern long     ltest;
	extern long     Long[];

	ltest = *Long;
	if (ltest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro61()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(void);

int main(void)
{
	itest = NO;
	*Unsigned = OK;
	function();
	return 0;
}
@def_
@def $macro62()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern unsigned Unsigned[];

	itest = *Unsigned;
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro63()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(void);

int main(void)
{
	ctest = NCHAR;
	*Char = YCHAR;
	function();
	return 0;
}
@def_
@def $macro64()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern char     ctest;
	extern char     Char[];

	ctest = *Char;
	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_
@def $macro65()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"


int             itest;
long            ltest;
char            ctest;

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);

int main(void)
{
	itest = NO;
	*Intdef = OK;
	function_I();


	itest = NO;
	*Shortdef = OK;
	function_S();


	ltest = NO;
	*Longdef = OK;
	function_L();


	itest = NO;
	*Unsigndef = OK;
	function_U();


	ctest = NCHAR;
	*Chardef = YCHAR;
	function_C();
	return 0;
}
@def_
@def $macro66()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];

void refer(void);

void function_I(void)
{
	itest = *Intdef;
	refer();
}


void function_S(void)
{
	itest = *Shortdef;
	refer();
}


void function_L(void)
{
	ltest = *Longdef;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(void)
{
	itest = *Unsigndef;
	refer();
}


void function_C(void)
{
	ctest = *Chardef;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}



void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro67()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(void);

int main(void)
{
	function();
	if (itest == OK)
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro68()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern int      Int[];

	itest = NO;
	*Int = OK;
	itest = *Int;
}
@def_
@def $macro69()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern short    Short[];

	itest = NO;
	*Short = OK;
	itest = *Short;
}
@def_
@def $macro70()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern int      itest;
	extern unsigned Unsigned[];

	itest = NO;
	*Unsigned = OK;
	itest = *Unsigned;
}
@def_
@def $macro71()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void funciton(void);

int main(void)
{
	function();
	if (ltest == OK)
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro72()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern long     ltest;
	extern long     Long[];

	ltest = NO;
	*Long = OK;
	ltest = *Long;
}
@def_
@def $macro73()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void funciton(void);

int main(void)
{
	function();
	if (ctest == OK)
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro74()
$LICENSE()
$HEAD()

#include    "def.h"

void function(void)
{
	extern char     ctest;
	extern char     Char[];

	ctest = NO;
	*Char = OK;
	ctest = *Char;
}
@def_
@def $macro75()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "tdef.h"

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);

int main(void)
{
	function_I();
	if (itest == OK)
		printok();
	else
		printno();


	function_S();
	if (itest == OK)
		printok();
	else
		printno();


	function_L();
	if (ltest == OK)
		printok();
	else
		printno();


	function_U();
	if (itest == OK)
		printok();
	else
		printno();


	function_C();
	if (ctest == YCHAR)
		printok();
	else
		printno();
	return 0;
}
@def_
@def $macro76()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];


void function_I(void)
{
	itest = NO;
	*Intdef = OK;
	itest = *Intdef;
}


void function_S(void)
{
	itest = NO;
	*Shortdef = OK;
	itest = *Shortdef;
}


void function_L(void)
{
	ltest = NO;
	*Longdef = OK;
	ltest = *Longdef;
}


void function_U(void)
{
	itest = NO;
	*Unsigndef = OK;
	itest = *Unsigndef;
}


void function_C(void)
{
	ctest = NCHAR;
	*Chardef = YCHAR;
	ctest = *Chardef;
}
@def_
@def $macro77()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(int*);

int main(void)
{
	itest = NO;
	*Int = OK;
	function(Int);
	return 0;
}
@def_
@def $macro78()
$LICENSE()
$HEAD()

#include    "def.h"

void function(int *argument)
{
	extern int      itest;
	extern int      Int[];


	if (*argument == 1)
		itest = *Int;

	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro79()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(short*);

int main(void)
{
	itest = NO;
	*Short = OK;
	function(Short);
	return 0;
}
@def_
@def $macro80()
$LICENSE()
$HEAD()

#include    "def.h"

void function(short *argument)
{
	extern int      itest;
	extern short    Short[];


	if (*argument == 1)
		itest = *Short;

	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro81()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(long*);

int main(void)
{
	ltest = NO;
	*Long = OK;
	function(Long);
	return 0;
}
@def_
@def $macro82()
$LICENSE()
$HEAD()

#include    "def.h"

void function(long *argument)
{
	extern long     ltest;
	extern long     Long[];


	if (*argument == 1)
		ltest = *Long;

	if (ltest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro83()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(unsigned*);

int main(void)
{
	itest = NO;
	*Unsigned = OK;
	function(Unsigned);
	return 0;
}
@def_
@def $macro84()
$LICENSE()
$HEAD()

#include    "def.h"

void function(unsigned *argument)
{
	extern int      itest;
	extern unsigned Unsigned[];


	if (*argument == 1)
		itest = *Unsigned;

	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro85()
$LICENSE()
$HEAD()

#include    "stnd.h"

extern void function(char*);

int main(void)
{
	ctest = NCHAR;
	*Char = YCHAR;
	function(Char);
	return 0;
}
@def_
@def $macro86()
$LICENSE()
$HEAD()

#include    "def.h"

void function(char *argument)
{
	extern char     ctest;
	extern char     Char[];


	if (*argument == 'y')
		ctest = *Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_
@def $macro87()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "tdef.h"

INTDEF          Intdef[1];
SHORTDEF        Shortdef[1];
LONGDEF         Longdef[1];
UNSIGNDEF       Unsigndef[1];
CHARDEF         Chardef[1];

extern void function_I(int*);
extern void function_S(short*);
extern void function_L(long*);
extern void function_U(unsigned*);
extern void function_C(char*);

int main(void)
{
	itest = NO;
	*Intdef = OK;
	function_I(Intdef);


	itest = NO;
	*Shortdef = OK;
	function_S(Shortdef);


	ltest = NO;
	*Longdef = OK;
	function_L(Longdef);


	itest = NO;
	*Unsigndef = OK;
	function_U(Unsigndef);


	ctest = NCHAR;
	*Chardef = YCHAR;
	function_C(Chardef);
	return 0;
}
@def_
@def $macro88()
$LICENSE()
$HEAD()

#include    "def.h"
#include   "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern INTDEF   Intdef[1];
extern SHORTDEF Shortdef[1];
extern LONGDEF  Longdef[1];
extern UNSIGNDEF Unsigndef[1];
extern CHARDEF  Chardef[1];

void refer(void);

void function_I(int *argument)
{
	if (*argument == 1)
		itest = *Intdef;
	refer();
}


void function_S(short *argument)
{
	if (*argument == 1)
		itest = *Shortdef;
	refer();
}


void function_L(long *argument)
{
	if (*argument == 1)
		ltest = *Longdef;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(unsigned *argument)
{
	if (*argument == 1)
		itest = *Unsigndef;
	refer();
}


void function_C(char *argument)
{
	if (*argument == 'y')
		ctest = *Chardef;


	if (ctest == YCHAR)
		printok();
	else
		printno();
}



void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro89()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"
#include    "tdef.h"

struct Str      Struct[1];
STRDEF          Strdef[1];

extern void function(void);

int main(void)
{
	function();
	return 0;
}
@def_
@def $macro90()
$LICENSE()
$HEAD()

#include     "def.h"
#include    "strc.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;

	extern struct Str Struct[];


	itest = NO;
	*Struct->Int = OK;
	itest = *Struct->Int;

	if (itest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Struct->Short = OK;
	itest = *Struct->Short;

	if (itest == OK)
		printok();
	else
		printno();



	ltest = NO;
	*Struct->Long = OK;
	ltest = *Struct->Long;

	if (ltest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Struct->Unsigned = OK;
	itest = *Struct->Unsigned;

	if (itest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Struct->Char = YCHAR;
	ctest = *Struct->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();


}
@def_
@def $macro91()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;

	extern STRDEF   Strdef[];


	itest = NO;
	*Strdef->Int = OK;
	itest = *Strdef->Int;

	if (itest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Strdef->Short = OK;
	itest = *Strdef->Short;

	if (itest == OK)
		printok();
	else
		printno();



	ltest = NO;
	*Strdef->Long = OK;
	ltest = *Strdef->Long;

	if (ltest == OK)
		printok();
	else
		printno();



	itest = NO;
	*Strdef->Unsigned = OK;
	itest = *Strdef->Unsigned;

	if (itest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	ctest = *Strdef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();

}
@def_
@def $macro92()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"
#include    "tdef.h"

union Uni       Union[1];
UNIDEF          Unidef[1];

extern void function(void);

int main(void)
{
	function();
	return 0;
}
@def_
@def $macro93()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "strc.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;

	extern union Uni Union[];


	itest = NO;
	*Union->Int = OK;
	itest = *Union->Int;

	if (itest == OK)
		printok();
	else
		printno();



	ltest = NO;
	*Union->Long = OK;
	ltest = *Union->Long;

	if (ltest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Union->Char = YCHAR;
	ctest = *Union->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();


}
@def_
@def $macro94()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

void function(void)
{
	extern int      itest;
	extern long     ltest;
	extern char     ctest;

	extern UNIDEF   Unidef[];


	itest = NO;
	*Unidef->Int = OK;
	itest = *Unidef->Int;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	*Unidef->Long = OK;
	itest = *Unidef->Long;

	if (itest == OK)
		printok();
	else
		printno();



	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	ctest = *Unidef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();



}
@def_
@def $macro95()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"

struct Str      Struct[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);

int main(void)
{
	itest = NO;
	*Struct->Int = OK;
	function_I();


	itest = NO;
	*Struct->Short = OK;
	function_S();


	ltest = NO;
	*Struct->Long = OK;
	function_L();


	itest = NO;
	*Struct->Unsigned = OK;
	function_U();


	ctest = NCHAR;
	*Struct->Char = YCHAR;
	function_C();

	return 0;
}
@def_
@def $macro96()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "strc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern struct Str Struct[];

void refer(void);

void function_I(void)
{
	itest = *Struct->Int;
	refer();
}


void function_S(void)
{
	itest = *Struct->Short;
	refer();
}


void function_L(void)
{
	ltest = *Struct->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(void)
{
	itest = *Struct->Unsigned;
	refer();
}


void function_C(void)
{
	ctest = *Struct->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro97()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"

union Uni       Union[1];

extern void function_I(void);
extern void function_L(void);
extern void function_C(void);

int main(void)
{
	itest = NO;
	*Union->Int = OK;
	function_I();


	ltest = NO;
	*Union->Long = OK;
	function_L();


	ctest = NCHAR;
	*Union->Char = YCHAR;
	function_C();


	return 0;
}
@def_
@def $macro98()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "strc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern union Uni Union[];


void function_I(void)
{
	itest = *Union->Int;

	if (itest == OK)
		printok();
	else
		printno();
}



void function_L(void)
{
	ltest = *Union->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}



void function_C(void)
{
	ctest = *Union->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_
@def $macro99()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"


int             itest;
long            ltest;
char            ctest;

STRDEF          Strdef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);

int main(void)
{
	itest = NO;
	*Strdef->Int = OK;
	function_I();


	itest = NO;
	*Strdef->Short = OK;
	function_S();


	ltest = NO;
	*Strdef->Long = OK;
	function_L();


	itest = NO;
	*Strdef->Unsigned = OK;
	function_U();


	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	function_C();


	return 0;
}
@def_
@def $macro100()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern STRDEF   Strdef[];

void refer(void);

void function_I(void)
{
	itest = *Strdef->Int;
	refer();
}


void function_S(void)
{
	itest = *Strdef->Short;
	refer();
}


void function_L(void)
{
	ltest = *Strdef->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(void)
{
	itest = *Strdef->Unsigned;
	refer();
}


void function_C(void)
{
	ctest = *Strdef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro101()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"


int             itest;
long            ltest;
char            ctest;

UNIDEF          Unidef[1];

extern void function_I(void);
extern void function_L(void);
extern void function_C(void);

int main(void)
{
	itest = NO;
	*Unidef->Int = OK;
	function_I();


	ltest = NO;
	*Unidef->Long = OK;
	function_L();


	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	function_C();


	return 0;
}
@def_
@def $macro102()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern UNIDEF   Unidef[];

void function_I(void)
{
	itest = *Unidef->Int;

	if (itest == OK)
		printok();
	else
		printno();
}


void function_L(void)
{
	ltest = *Unidef->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_C(void)
{
	ctest = *Unidef->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_
@def $macro103()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"
#include    "tdef.h"

struct Str      Struct[1];
STRDEF          Strdef[1];

extern void function_I(void);
extern void function_S(void);
extern void function_L(void);
extern void function_U(void);
extern void function_C(void);

int main(void)
{
	function_I();
	if (itest == OK)
		printok();
	else
		printno();


	function_S();
	if (itest == OK)
		printok();
	else
		printno();


	function_L();
	if (ltest == OK)
		printok();
	else
		printno();


	function_U();
	if (itest == OK)
		printok();
	else
		printno();


	function_C();
	if (ctest == YCHAR)
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro104()
$LICENSE()
$HEAD()

#include     "def.h"
#include    "strc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern struct Str Struct[];

void function_I(void)
{
	itest = NO;
	*Struct->Int = OK;
	itest = *Struct->Int;
}


void function_S(void)
{
	itest = NO;
	*Struct->Short = OK;
	itest = *Struct->Short;
}


void function_L(void)
{
	ltest = NO;
	*Struct->Long = OK;
	ltest = *Struct->Long;
}


void function_U(void)
{
	itest = NO;
	*Struct->Unsigned = OK;
	itest = *Struct->Unsigned;
}


void function_C(void)
{
	ctest = NCHAR;
	*Struct->Char = YCHAR;
	ctest = *Struct->Char;
}
@def_
@def $macro105()
$LICENSE()
$HEAD()

#include     "def.h"
#include     "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern STRDEF   Strdef[];

void function_I(void)
{
	itest = NO;
	*Strdef->Int = OK;
	itest = *Strdef->Int;
}


void function_S(void)
{
	itest = NO;
	*Strdef->Short = OK;
	itest = *Strdef->Short;
}


void function_L(void)
{
	ltest = NO;
	*Strdef->Long = OK;
	ltest = *Strdef->Long;
}


void function_U(void)
{
	itest = NO;
	*Strdef->Unsigned = OK;
	itest = *Strdef->Unsigned;
}


void function_C(void)
{
	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	ctest = *Strdef->Char;
}
@def_
@def $macro106()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"
#include    "tdef.h"

union Uni       Union[1];
UNIDEF          Unidef[1];

extern void function_I(void);
extern void function_L(void);
extern void function_C(void);

int main(void)
{
	function_I();
	if (itest == OK)
		printok();
	else
		printno();


	function_L();
	if (ltest == OK)
		printok();
	else
		printno();


	function_C();
	if (ctest == YCHAR)
		printok();
	else
		printno();


	return 0;
}
@def_
@def $macro107()
$LICENSE()
$HEAD()

#include     "def.h"
#include    "strc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern union Uni Union[];

void function_I(void)
{
	itest = NO;
	*Union->Int = OK;
	itest = *Union->Int;
}


void function_L(void)
{
	ltest = NO;
	*Union->Long = OK;
	ltest = *Union->Long;
}


void function_C(void)
{
	ctest = NCHAR;
	*Union->Char = YCHAR;
	ctest = *Union->Char;
}
@def_
@def $macro108()
$LICENSE()
$HEAD()

#include     "def.h"
#include     "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

extern UNIDEF   Unidef[];

void function_I(void)
{
	itest = NO;
	*Unidef->Int = OK;
	itest = *Unidef->Int;
}


void function_L(void)
{
	ltest = NO;
	*Unidef->Long = OK;
	ltest = *Unidef->Long;
}


void function_C(void)
{
	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	ctest = *Unidef->Char;
}
@def_
@def $macro109()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"

struct Str      Struct[1];

extern void function_I(struct Str*);
extern void function_S(struct Str*);
extern void function_L(struct Str*);
extern void function_U(struct Str*);
extern void function_C(struct Str*);

int main(void)
{
	itest = NO;
	*Struct->Int = OK;
	function_I(Struct);


	itest = NO;
	*Struct->Short = OK;
	function_S(Struct);


	ltest = NO;
	*Struct->Long = OK;
	function_L(Struct);


	itest = NO;
	*Struct->Unsigned = OK;
	function_U(Struct);


	ctest = NCHAR;
	*Struct->Char = YCHAR;
	function_C(Struct);


	return 0;
}
@def_
@def $macro110()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "strc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

void refer(void);

void function_I(struct Str *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;
	refer();
}


void function_S(struct Str *argument)
{
	if (*argument->Short == 1)
		itest = *argument->Short;
	refer();
}


void function_L(struct Str *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(struct Str *argument)
{
	if (*argument->Unsigned == 1)
		itest = *argument->Unsigned;
	refer();
}


void function_C(struct Str *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro111()
$LICENSE()
$HEAD()

#include    "stnd.h"
#include    "strc.h"

union Uni       Union[1];

extern void function_I(union Uni*);
extern void function_L(union Uni*);
extern void function_C(union Uni*);

int main(void)
{
	itest = NO;
	*Union->Int = OK;
	function_I(Union);


	ltest = NO;
	*Union->Long = OK;
	function_L(Union);


	ctest = NCHAR;
	*Union->Char = YCHAR;
	function_C(Union);


	return 0;
}
@def_
@def $macro112()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "strc.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

void function_I(union Uni *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;

	if (itest == OK)
		printok();
	else
		printno();
}


void function_L(union Uni *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_C(union Uni *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_
@def $macro113()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

int             itest;
long            ltest;
char            ctest;

STRDEF          Strdef[1];

extern void function_I(STRDEF*);
extern void function_S(STRDEF*);
extern void function_L(STRDEF*);
extern void function_U(STRDEF*);
extern void function_C(STRDEF*);

int main(void)
{

	itest = NO;
	*Strdef->Int = OK;
	function_I(Strdef);


	itest = NO;
	*Strdef->Short = OK;
	function_S(Strdef);


	ltest = NO;
	*Strdef->Long = OK;
	function_L(Strdef);


	itest = NO;
	*Strdef->Unsigned = OK;
	function_U(Strdef);


	ctest = NCHAR;
	*Strdef->Char = YCHAR;
	function_C(Strdef);


	return 0;
}
@def_
@def $macro114()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;

void refer(void);

void function_I(STRDEF *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;
	refer();
}


void function_S(STRDEF *argument)
{
	if (*argument->Short == 1)
		itest = *argument->Short;
	refer();
}


void function_L(STRDEF *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_U(STRDEF *argument)
{
	if (*argument->Unsigned == 1)
		itest = *argument->Unsigned;
	refer();
}


void function_C(STRDEF *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}


void refer(void)
{
	if (itest == OK)
		printok();
	else
		printno();
}
@def_
@def $macro115()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

UNIDEF          Unidef[1];


int             itest;
long            ltest;
char            ctest;

extern void function_I(UNIDEF*);
extern void function_L(UNIDEF*);
extern void function_C(UNIDEF*);

int main(void)
{
	itest = NO;
	*Unidef->Int = OK;
	function_I(Unidef);


	ltest = NO;
	*Unidef->Long = OK;
	function_L(Unidef);


	ctest = NCHAR;
	*Unidef->Char = YCHAR;
	function_C(Unidef);


	return 0;
}
@def_
@def $macro116()
$LICENSE()
$HEAD()

#include    "def.h"
#include    "tdef.h"

extern int      itest;
extern long     ltest;
extern char     ctest;


void function_I(UNIDEF *argument)
{
	if (*argument->Int == 1)
		itest = *argument->Int;

	if (itest == OK)
		printok();
	else
		printno();
}


void function_L(UNIDEF *argument)
{
	if (*argument->Long == 1)
		ltest = *argument->Long;

	if (ltest == OK)
		printok();
	else
		printno();
}


void function_C(UNIDEF *argument)
{
	if (*argument->Char == 'y')
		ctest = *argument->Char;

	if (ctest == YCHAR)
		printok();
	else
		printno();
}
@def_

@def $macro117()
$LICENSE()
typedef int     INTDEF;
typedef short   SHORTDEF;
typedef long    LONGDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;

typedef struct {
	int             Int[1];
	short           Short[1];
	long            Long[1];
	unsigned        Unsigned[1];
	char            Char[1];
}               STRDEF;

typedef union {
	int             Int[1];
	long            Long[1];
	char            Char[1];
}               UNIDEF;
@def_

@def $macro118()
$LICENSE()
typedef int     INTDEF;
typedef short   SHORTDEF;
typedef long    LONGDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef float   FLOATDEF;

typedef struct {
	int             Int[1];
	short           Short[1];
	long            Long[1];
	unsigned        Unsigned[1];
	char            Char[1];
	float           Float[1];
}               STRDEF;

typedef union {
	int             Int[1];
	long            Long[1];
	char            Char[1];
	float           Float[1];
}               UNIDEF;
@def_

@def $macro119()
ft000.c ft006.c: 6
ft000.c ft007.c: 1
ft111.c ft112.c: 6
ft113.c ft114.c: 1
ft208.c ft209.c
ft210.c ft211.c
ft311.c ft312.c: 6
ft313.c ft314.c: 1
ft400.c ft401.c: 6
ft400.c ft402.c: 6
ft410.c ft411.c: 4
ft410.c ft412.c: 4
ft501.c ft502.c: 6
ft503.c ft504.c: 4
ft505.c ft506.c: 6
ft507.c ft508.c: 4
ft600.c ft601.c
ft600.c ft602.c
ft610.c ft611.c
ft610.c ft612.c
ft701.c ft702.c: 6
ft703.c ft704.c: 4
ft705.c ft706.c: 6
ft707.c ft708.c: 4
t000.c t001.c: 1
t000.c t002.c: 1
t000.c t003.c: 1
t000.c t004.c: 1
t000.c t005.c: 1
t000.c t006.c: 5
t101.c t102.c: 1
t103.c t104.c: 1
t105.c t106.c: 1
t107.c t108.c: 1
t109.c t110.c: 1
t111.c t112.c: 5
t200.c t201.c
t200.c t202.c
t200.c t203.c
t204.c t205.c
t206.c t207.c
t208.c t209.c
t301.c t302.c: 1
t303.c t304.c: 1
t305.c t306.c: 1
t307.c t308.c: 1
t309.c t310.c: 1
t311.c t312.c: 5
t400.c t401.c: 5
t400.c t402.c: 5
t410.c t411.c: 3
t410.c t412.c: 3
t501.c t502.c: 5
t503.c t504.c: 3
t505.c t506.c: 5
t507.c t508.c: 3
t600.c t601.c
t600.c t602.c
t610.c t611.c
t610.c t612.c
t701.c t702.c: 5
t703.c t704.c: 3
t705.c t706.c: 5
t707.c t708.c: 3
@def_

@def $testout()
#ifdef unix
#include<stdio.h>
#include<float.h>
#define printok() printf("@OK@\n")
#define printno() printf("@NG@\n")
#define ABS(a) ((a > 0)? (a) : (-(a)))
#define MAX(a, b) ((a > b)? (a) : (b))
#define TGEN_FLT_EQ(a, b) ( ((a)==(b)) || ABS(((a) - (b))) / MAX( ABS(a), ABS(b) ) <= FLT_EPSILON )
#endif
@def_

@dir c89.6-1-03
@file >>def.h $macro0() @file_
@file >>ft000.c $macro1() @file_
@file >>ft006.c $macro2() @file_
@file >>ft007.c $macro3() @file_
@file >>ft111.c $macro4() @file_
@file >>ft112.c $macro5() @file_
@file >>ft113.c $macro6() @file_
@file >>ft114.c $macro7() @file_
@file >>ft208.c $macro8() @file_
@file >>ft209.c $macro9() @file_
@file >>ft210.c $macro10() @file_
@file >>ft211.c $macro11() @file_
@file >>ft311.c $macro12() @file_
@file >>ft312.c $macro13() @file_
@file >>ft313.c $macro14() @file_
@file >>ft314.c $macro15() @file_
@file >>ft400.c $macro16() @file_
@file >>ft401.c $macro17() @file_
@file >>ft402.c $macro18() @file_
@file >>ft410.c $macro19() @file_
@file >>ft411.c $macro20() @file_
@file >>ft412.c $macro21() @file_
@file >>ft501.c $macro22() @file_
@file >>ft502.c $macro23() @file_
@file >>ft503.c $macro24() @file_
@file >>ft504.c $macro25() @file_
@file >>ft505.c $macro26() @file_
@file >>ft506.c $macro27() @file_
@file >>ft507.c $macro28() @file_
@file >>ft508.c $macro29() @file_
@file >>ft600.c $macro30() @file_
@file >>ft601.c $macro31() @file_
@file >>ft602.c $macro32() @file_
@file >>ft610.c $macro33() @file_
@file >>ft611.c $macro34() @file_
@file >>ft612.c $macro35() @file_
@file >>ft701.c $macro36() @file_
@file >>ft702.c $macro37() @file_
@file >>ft703.c $macro38() @file_
@file >>ft704.c $macro39() @file_
@file >>ft705.c $macro40() @file_
@file >>ft706.c $macro41() @file_
@file >>ft707.c $macro42() @file_
@file >>ft708.c $macro43() @file_
@file >>stnd.h $macro44() @file_
@file >>fstnd.h $macro45() @file_
@file >>strc.h $macro46() @file_
@file >>fstrc.h $macro47() @file_
@file >>t000.c $macro48() @file_
@file >>t001.c $macro49() @file_
@file >>t002.c $macro50() @file_
@file >>t003.c $macro51() @file_
@file >>t004.c $macro52() @file_
@file >>t005.c $macro53() @file_
@file >>t006.c $macro54() @file_
@file >>t101.c $macro55() @file_
@file >>t102.c $macro56() @file_
@file >>t103.c $macro57() @file_
@file >>t104.c $macro58() @file_
@file >>t105.c $macro59() @file_
@file >>t106.c $macro60() @file_
@file >>t107.c $macro61() @file_
@file >>t108.c $macro62() @file_
@file >>t109.c $macro63() @file_
@file >>t110.c $macro64() @file_
@file >>t111.c $macro65() @file_
@file >>t112.c $macro66() @file_
@file >>t200.c $macro67() @file_
@file >>t201.c $macro68() @file_
@file >>t202.c $macro69() @file_
@file >>t203.c $macro70() @file_
@file >>t204.c $macro71() @file_
@file >>t205.c $macro72() @file_
@file >>t206.c $macro73() @file_
@file >>t207.c $macro74() @file_
@file >>t208.c $macro75() @file_
@file >>t209.c $macro76() @file_
@file >>t301.c $macro77() @file_
@file >>t302.c $macro78() @file_
@file >>t303.c $macro79() @file_
@file >>t304.c $macro80() @file_
@file >>t305.c $macro81() @file_
@file >>t306.c $macro82() @file_
@file >>t307.c $macro83() @file_
@file >>t308.c $macro84() @file_
@file >>t309.c $macro85() @file_
@file >>t310.c $macro86() @file_
@file >>t311.c $macro87() @file_
@file >>t312.c $macro88() @file_
@file >>t400.c $macro89() @file_
@file >>t401.c $macro90() @file_
@file >>t402.c $macro91() @file_
@file >>t410.c $macro92() @file_
@file >>t411.c $macro93() @file_
@file >>t412.c $macro94() @file_
@file >>t501.c $macro95() @file_
@file >>t502.c $macro96() @file_
@file >>t503.c $macro97() @file_
@file >>t504.c $macro98() @file_
@file >>t505.c $macro99() @file_
@file >>t506.c $macro100() @file_
@file >>t507.c $macro101() @file_
@file >>t508.c $macro102() @file_
@file >>t600.c $macro103() @file_
@file >>t601.c $macro104() @file_
@file >>t602.c $macro105() @file_
@file >>t610.c $macro106() @file_
@file >>t611.c $macro107() @file_
@file >>t612.c $macro108() @file_
@file >>t701.c $macro109() @file_
@file >>t702.c $macro110() @file_
@file >>t703.c $macro111() @file_
@file >>t704.c $macro112() @file_
@file >>t705.c $macro113() @file_
@file >>t706.c $macro114() @file_
@file >>t707.c $macro115() @file_
@file >>t708.c $macro116() @file_
@file >>tdef.h $macro117() @file_
@file >>ftdef.h $macro118() @file_
@file >>FILESET $macro119() @file_
@file >>testout.h $testout() @file_
@dir_
