@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "def.h"
@def_

@def $FHEAD()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fdef.h"
@def_

@def $macro0()
$LICENSE()
#include "testout.h"
long            NO = 0;
long            OK = 1;
#define NoMistake 00
@def_

@def $macro1()
$LICENSE()
#include "testout.h"
long            NO = 0;
long            OK = 1;
float           OK_f = 1.0;
float           NO_f = 0.0;
#define NoMistake 00
@def_

@def $macro2()
$LICENSE()
$FHEAD()
short           statusFlag = NoMistake;
float           i, i11, i12, i21, i22, i23, i24;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, no return value and legal
 */
{
	extern float    i;

	i = 1.0;
	levelOneNodeOne(&i);
	i = 2.0;
	levelOneNodeTwo(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	float          *argument;
{
	extern float    i11;

	if ( !(TGEN_FLT_EQ(*argument, 1.0)) )
		statusFlag++;
	i11 = 3.0;
	levelTwoNodeOne(&i11);
	i11 = 4.0;
	levelTwoNodeTwo(&i11);
}

levelOneNodeTwo(argument)
	float          *argument;
{
	extern float    i12;

	if ( !(TGEN_FLT_EQ(*argument, 2.0)) )
		statusFlag++;
	i12 = 5.0;
	levelTwoNodeThree(&i12);
	i12 = 6.0;
	levelTwoNodeFour(&i12);
}

levelTwoNodeOne(argument)
	float          *argument;
{
	extern float    i21;

	if ( !(TGEN_FLT_EQ(*argument, 3.0)) )
		statusFlag++;
	i21 = 7.0;
	levelThreeLeafOne(&i21);
	i21 = 8.0;
	levelThreeLeafTwo(&i21);
}

levelTwoNodeTwo(argument)
	float          *argument;
{
	extern float    i22;

	if ( !(TGEN_FLT_EQ(*argument, 4.0)) )
		statusFlag++;
	i22 = 9.0;
	levelThreeLeafThree(&i22);
	i22 = 10.0;
	levelThreeLeafFour(&i22);
}

levelTwoNodeThree(argument)
	float          *argument;
{
	extern float    i23;

	if ( !(TGEN_FLT_EQ(*argument, 5.0)) )
		statusFlag++;
	i23 = 11.0;
	levelThreeLeafFive(&i23);
	i23 = 12.0;
	levelThreeLeafSix(&i23);
}

levelTwoNodeFour(argument)
	float          *argument;
{
	extern float    i24;

	if ( !(TGEN_FLT_EQ(*argument, 6.0)) )
		statusFlag++;
	i24 = 13.0;
	levelThreeLeafSeven(&i24);
	i24 = 14.0;
	levelThreeLeafEight(&i24);
}

levelThreeLeafOne(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 7.0)) )
		statusFlag++;
}

levelThreeLeafTwo(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 8.0)) )
		statusFlag++;
}

levelThreeLeafThree(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 9.0)) )
		statusFlag++;
}

levelThreeLeafFour(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 10.0)) )
		statusFlag++;
}

levelThreeLeafFive(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 11.0)) )
		statusFlag++;
}

levelThreeLeafSix(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 12.0)) )
		statusFlag++;
}

levelThreeLeafSeven(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 13.0)) )
		statusFlag++;
}

levelThreeLeafEight(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 14.0)) )
		statusFlag++;
}
@def_
@def $macro3()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
float           i, i11, i12, i21, i22, i23, i24;
float           result;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, no return value and illegal
 */
{
	extern float    i;

	i = 1.0;
	result = levelOneNodeOne(&i);
	i = 2.0;
	result = levelOneNodeTwo(&i);
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	float          *argument;
{
	extern float    i11;

	if ( !(TGEN_FLT_EQ(*argument, 1.0)) )
		statusFlag++;
	i11 = 3.0;
	result = levelTwoNodeOne(&i11);
	i11 = 4.0;
	result = levelTwoNodeTwo(&i11);
}

levelOneNodeTwo(argument)
	float          *argument;
{
	extern float    i12;

	if ( !(TGEN_FLT_EQ(*argument, 2.0)) )
		statusFlag++;
	i12 = 5.0;
	result = levelTwoNodeThree(&i12);
	i12 = 6.0;
	result = levelTwoNodeFour(&i12);

}

levelTwoNodeOne(argument)
	float          *argument;
{
	extern float    i21;

	if ( !(TGEN_FLT_EQ(*argument, 3.0)) )
		statusFlag++;
	i21 = 7.0;
	result = levelThreeLeafOne(&i21);
	i21 = 8.0;
	result = levelThreeLeafTwo(&i21);
}

levelTwoNodeTwo(argument)
	float          *argument;
{
	extern float    i22;

	if ( !(TGEN_FLT_EQ(*argument, 4.0)) )
		statusFlag++;
	i22 = 9.0;
	result = levelThreeLeafThree(&i22);
	i22 = 10.0;
	result = levelThreeLeafFour(&i22);
}

levelTwoNodeThree(argument)
	float          *argument;
{
	extern float    i23;

	if ( !(TGEN_FLT_EQ(*argument, 5.0)) )
		statusFlag++;
	i23 = 11.0;
	result = levelThreeLeafFive(&i23);
	i23 = 12.0;
	result = levelThreeLeafSix(&i23);
}

levelTwoNodeFour(argument)
	float          *argument;
{
	extern float    i24;

	if ( !(TGEN_FLT_EQ(*argument, 6.0)) )
		statusFlag++;
	i24 = 13.0;
	result = levelThreeLeafSeven(&i24);
	i24 = 14.0;
	result = levelThreeLeafEight(&i24);
}

levelThreeLeafOne(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 7.0)) )
		statusFlag++;
	return;
}

levelThreeLeafTwo(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 8.0)) )
		statusFlag++;
	return;
}

levelThreeLeafThree(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 9.0)) )
		statusFlag++;
	return;
}

levelThreeLeafFour(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 10.0)) )
		statusFlag++;
	return;
}

levelThreeLeafFive(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 11.0)) )
		statusFlag++;
	return;
}

levelThreeLeafSix(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 12.0)) )
		statusFlag++;
	return;
}

levelThreeLeafSeven(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 13.0)) )
		statusFlag++;
	return;
}

levelThreeLeafEight(argument)
	float          *argument;
{
	if ( !(TGEN_FLT_EQ(*argument, 14.0)) )
		statusFlag++;
	return;
}
@def_
@def $macro4()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
float           i, i11, i12, i21, i22, i23, i24;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, return value and legal, Float function
 * declaration
 */
{
	extern float    i;
	float           result = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = 1.0;
	result = levelOneNodeOne(&i);
	if ( !(TGEN_FLT_EQ(result, 1.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(&i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(argument)
	float          *argument;
{
	float           result = 0.0;
	extern float    i11;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

	i11 = 3.0;
	result = levelTwoNodeOne(&i11);
	if ( !(TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	i11 = 4.0;
	result = levelTwoNodeTwo(&i11);
	if ( !(TGEN_FLT_EQ(result, 4.0)) )
		statusFlag++;
	return (*argument);
}

float
levelOneNodeTwo(argument)
	float          *argument;
{
	float           result = 0.0;
	extern float    i12;
	float           levelTwoNodeThree(), levelTwoNodeFour();

	i12 = 5.0;
	result = levelTwoNodeThree(&i12);
	if ( !(TGEN_FLT_EQ(result, 5.0)) )
		statusFlag++;
	i12 = 6.0;
	result = levelTwoNodeFour(&i12);
	if ( !(TGEN_FLT_EQ(result, 6.0)) )
		statusFlag++;
	return (*argument);
}

float
levelTwoNodeOne(argument)
	float          *argument;
{
	float           result = 0.0;
	extern float    i21;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

	i21 = 7.0;
	result = levelThreeLeafOne(&i21);
	if ( !(TGEN_FLT_EQ(result, 7.0)) )
		statusFlag++;
	i21 = 8.0;
	result = levelThreeLeafTwo(&i21);
	if ( !(TGEN_FLT_EQ(result, 8.0)) )
		statusFlag++;
	return (*argument);
}

float
levelTwoNodeTwo(argument)
	float          *argument;
{
	float           result = 0.0;
	extern float    i22;
	float           levelThreeLeafThree(), levelThreeLeafFour();

	i22 = 9.0;
	result = levelThreeLeafThree(&i22);
	if ( !(TGEN_FLT_EQ(result, 9.0)) )
		statusFlag++;
	i22 = 10.0;
	result = levelThreeLeafFour(&i22);
	if ( !(TGEN_FLT_EQ(result, 10.0)) )
		statusFlag++;
	return (*argument);
}

float
levelTwoNodeThree(argument)
	float          *argument;
{
	float           result = 0.0;
	extern float    i23;
	float           levelThreeLeafFive(), levelThreeLeafSix();

	i23 = 11.0;
	result = levelThreeLeafFive(&i23);
	if ( !(TGEN_FLT_EQ(result, 11.0)) )
		statusFlag++;
	i23 = 12.0;
	result = levelThreeLeafSix(&i23);
	if ( !(TGEN_FLT_EQ(result, 12.0)) )
		statusFlag++;
	return (*argument);
}

float
levelTwoNodeFour(argument)
	float          *argument;
{
	float           result = 0.0;
	extern float    i24;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

	i24 = 13.0;
	result = levelThreeLeafSeven(&i24);
	if ( !(TGEN_FLT_EQ(result, 13.0)) )
		statusFlag++;
	i24 = 14.0;
	result = levelThreeLeafEight(&i24);
	if ( !(TGEN_FLT_EQ(result, 14.0)) )
		statusFlag++;
	return (*argument);
}

float
levelThreeLeafOne(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafTwo(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafThree(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafFour(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafFive(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafSix(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafSeven(argument)
	float          *argument;
{
	return (*argument);
}

float
levelThreeLeafEight(argument)
	float          *argument;
{
	return (*argument);
}
@def_
@def $macro5()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
float           i = 12.0;

main()
/*
 * test class: extern variable address instance  : linear tree structure, return value, legal pointer to function returning
 * an Float
 */
{
	extern float    i;
	float           result = 0.0, divide4(), dummy1();

	result = dummy1(divide4, &i);
	if ( !(TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), *Float;
{
	float           i;

	i = (*func) (Float);
	if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float          *Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2);
}

float
dummy2(func, Float)
	float           (*func) (), *Float;
{
	float           i;

	i = (*func) (Float);
	if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float          *Float;
{
	return (*Float / 2);
}
@def_
@def $macro6()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
float           i = 1.0, ii, iii;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, used in conditional expression, Float function
 * declaration
 */
{
	extern float    i;
	float           levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(&i);
	arg_b = 32.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float          *variable;
{
	extern float    ii;
	float           levelTwoNodeOne();

	ii = 2.0 * (*variable);
	return (2 * levelTwoNodeOne(&ii));
}

float
levelTwoNodeOne(variable)
	float          *variable;
{
	extern float    iii;
	float           levelThreeLeafOne();

	iii = 2.0 * (*variable);
	return (2 * levelThreeLeafOne(&iii));
}

float
levelThreeLeafOne(variable)
	float          *variable;
{
	return (2 * (*variable));
}
@def_
@def $macro7()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
float           i = 12.0;

main()
/*
 * test class: extern variable address instance  : linear tree structure, in conditional expression, pointer to function
 * returning an Float
 */
{
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	arg_a = dummy1(divide4, &i);
	arg_b = 3.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), *Float;
{
	float           ii;

	if ( !(TGEN_FLT_EQ((ii = (*func) (Float)), 3.0)) )
		statusFlag++;
	return (ii);
}

float
divide4(Float)
	float          *Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2);
}

float
dummy2(func, Float)
	float           (*func) (), *Float;
{
	float           ii;

	if ( !(TGEN_FLT_EQ((ii = (*func) (Float)), 6.0)) )
		statusFlag++;
	return (ii);
}

float
divide2(Float)
	float          *Float;
{
	return (*Float / 2);
}
@def_
@def $macro8()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, legal
 */
{
	extern float    i;

	i = 1.0;
	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 1.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro9()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii;
float           result;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, illegal
 */
{
	result = recursiveFunction(&i);
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ((ii = *variable), i)) )
		statusFlag++;
	if (--counter)
		result = recursiveFunction(&ii);
	return;
}
@def_
@def $macro10()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, Float function declaration
 */
{
	extern float    i;
	float           result = 0.0;
	float           recursiveFunction();

	result = recursiveFunction(&i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float          *variable;
{
	extern float    i;
	float           result = 0.0;
	float           recursiveFunction();

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (i + 1);
}
@def_
@def $macro11()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, pointer to function returning an Float
 */
{
	float           result = 0, increment(), dummy();

	result = dummy(increment, &i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), *variable;
{
	float           result, dummy();

	if (--counter) {
		result = dummy(function, variable);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (function(*variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro12()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, Float function
 * declaration
 */
{
	float           recursiveFunction();
	extern float    i;
	float           arg_a, arg_b;

	arg_a = recursiveFunction(&i) - i;
	arg_b = 1.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float          *variable;
{
	float           recursiveFunction();

	if (--counter)
		if ( !(TGEN_FLT_EQ(recursiveFunction(variable) - *variable, 1.0)) )
			statusFlag++;
	return ((*variable) + 1);
}
@def_
@def $macro13()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, pointer to function returning
 * an Float
 */
{
	float           increment(), dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, &i);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), *variable;
{
	float           dummy();
	float           arg_a, arg_b;

	if (--counter){
		arg_a = dummy(function, variable);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(*variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro14()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, no return value, legal
 */
{
	extern float    i;

	i = 1;
	castor(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float          *variable;
{
	extern float    ii;

	ii = *variable;
	if ( !(TGEN_FLT_EQ(*variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		ii++;
		pollux(&ii);
	}
}

pollux(variable)
	float          *variable;
{
	extern float    iii;

	iii = *variable;
	if ( !(TGEN_FLT_EQ(*variable, 2.0)) )
		statusFlag++;
	if (--counter) {
		--iii;
		castor(&iii);
	}
}
@def_
@def $macro15()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           zero = 0.0;	/* modified by m2 on Apr. 23, 1984 */
float          *i = &zero;	/* modified by m2 on Apr. 23, 1984 */
float           result;

main()
/*
 * test class: extern variable address instance  : gemini, no return value, illegal
 */
{
	result = castor(i);
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	if (--counter)
		result = pollux(variable);
}

pollux(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	if (--counter)
		result = castor(variable);
}
@def_
@def $macro16()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, legal, function declared to return an Float
 */
{
	float           result = 0, castor();

	result = castor(&i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float          *variable;
{
	float           result = 0.0, pollux();

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if ( !(TGEN_FLT_EQ(result, 5.0)) )
			statusFlag++;
	}
	return (*variable + 1);
}

float
pollux(variable)
	float          *variable;
{
	float           result = 0.0, castor();

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro17()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, pointer to function returning an Float
 */
{
	extern float    i;
	float           result = 0.0, castor(), increment();

	result = castor(increment, &i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), *variable;
{
	extern float    ii;
	float           result = 0.0, pollux();

	ii = *variable + 8;
	if (--counter) {
		result = pollux(function, &ii);
		if ( !(TGEN_FLT_EQ(result, 10.0)) )
			statusFlag++;
	}
	return (function(*variable));
}

float
pollux(function, variable)
	float           (*function) (), *variable;
{
	extern float    iii, castor();
	float           result = 0.0;

	iii = *variable - 8;
	if (--counter) {
		result = castor(function, &iii);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (function(*variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro18()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, function declared to return an Float
 */
{
	extern float    i;
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(&i);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float          *variable;
{
	float           pollux();
	float           arg_a, arg_b;

	ii = *variable + 3;
	if (--counter) {
		arg_a = pollux(&ii);
		arg_b = 5.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (*variable + 1);
}

float
pollux(variable)
	float          *variable;
{
	float           castor();
	float           arg_a, arg_b;

	iii = *variable - 3;
	if (--counter) {
		arg_a = castor(&iii);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro19()
$LICENSE()
$FHEAD()

short           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, pointer to function returning an Float
 */
{
	float           castor(), increment();
	float           arg_a, arg_b;

	arg_a = castor(increment, &i);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(function, variable)
	float           (*function) (), *variable;
{
	extern float    ii, pollux();
	float           arg_a, arg_b;

	ii = *variable + 10;
	if (--counter) {
		arg_a = pollux(function, &ii);
		arg_b = 12.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(*variable));
}

float
pollux(function, variable)
	float           (*function) (), *variable;
{
	extern float    iii, castor();
	float           arg_a, arg_b;

	iii = *variable - 10;
	if (--counter) {
		arg_a = castor(function, &iii);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(*variable));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro20()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, no return value and legal
 */
{
	extern float    i;

	i = 1.0;
	levelOneNodeOne(&i);
	if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 2.0;
	levelOneNodeTwo(&i);
	if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float          *variable;
{
	(*variable) = 3.0;
	levelTwoNodeOne(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 4.0;
	levelTwoNodeTwo(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelOneNodeTwo(variable)
	float          *variable;
{
	(*variable) = 5.0;
	levelTwoNodeThree(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 6.0;
	levelTwoNodeFour(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeOne(variable)
	float          *variable;
{
	(*variable) = 7.0;
	levelThreeLeafOne(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 8.0;
	levelThreeLeafTwo(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeTwo(variable)
	float          *variable;
{
	(*variable) = 9.0;
	levelThreeLeafThree(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 10.0;
	levelThreeLeafFour(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeThree(variable)
	float          *variable;
{
	(*variable) = 11.0;
	levelThreeLeafFive(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 12.0;
	levelThreeLeafSix(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeFour(variable)
	float          *variable;
{
	(*variable) = 13.0;
	levelThreeLeafSeven(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 14.0;
	levelThreeLeafEight(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelThreeLeafOne(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafTwo(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafThree(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafFour(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafFive(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafSix(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafSeven(variable)
	float          *variable;
{
	(*variable) = 0.0;
}

levelThreeLeafEight(variable)
	float          *variable;
{
	(*variable) = 0.0;
}
@def_
@def $macro21()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i;
float           result;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, no return value and illegal
 */
{
	i = 1.0;
	result = levelOneNodeOne(&i);
	if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(&i);
	if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 1.0)) )
		statusFlag++;
	*variable = 3.0;
	result = levelTwoNodeOne(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	*variable = 4.0;
	result = levelTwoNodeTwo(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelOneNodeTwo(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 2.0)) )
		statusFlag++;
	*variable = 5.0;
	result = levelTwoNodeThree(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	*variable = 6.0;
	result = levelTwoNodeFour(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeOne(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 3.0)) )
		statusFlag++;
	*variable = 7.0;
	result = levelThreeLeafOne(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	*variable = 8.0;
	result = levelThreeLeafTwo(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeTwo(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 4.0)) )
		statusFlag++;
	*variable = 9.0;
	result = levelThreeLeafThree(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	*variable = 10.0;
	result = levelThreeLeafFour(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeThree(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 5.0)) )
		statusFlag++;
	*variable = 11.0;
	result = levelThreeLeafFive(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	*variable = 12.0;
	result = levelThreeLeafSix(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelTwoNodeFour(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, 6.0)) )
		statusFlag++;
	*variable = 13.0;
	result = levelThreeLeafSeven(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	*variable = 14.0;
	result = levelThreeLeafEight(variable);
	if ( !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
}

levelThreeLeafOne(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafTwo(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafThree(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafFour(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafFive(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafSix(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafSeven(variable)
	float          *variable;
{
	*variable = 0.0;
}

levelThreeLeafEight(variable)
	float          *variable;
{
	*variable = 0.0;
}
@def_
@def $macro22()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, return value and legal,
 * Float function declaration
 */
{
	float           result = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	i = 1.0;
	result = levelOneNodeOne(&i);
	if ( !(TGEN_FLT_EQ(result, 1.0)) || !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(&i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) || !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float          *variable;
{
	float           storage = (*variable), result = 0.0;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

	(*variable) = 3.0;
	result = levelTwoNodeOne(variable);
	if ( !(TGEN_FLT_EQ(result, 3.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 4.0;
	result = levelTwoNodeTwo(variable);
	if ( !(TGEN_FLT_EQ(result, 4.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	return (storage);
}

float
levelOneNodeTwo(variable)
	float          *variable;
{
	float           storage = (*variable), result = 0.0;
	float           levelTwoNodeThree(), levelTwoNodeFour();

	(*variable) = 5.0;
	result = levelTwoNodeThree(variable);
	if ( !(TGEN_FLT_EQ(result, 5.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 6.0;
	result = levelTwoNodeFour(variable);
	if ( !(TGEN_FLT_EQ(result, 6.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeOne(variable)
	float          *variable;
{
	float           storage = (*variable), result = 0.0;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

	(*variable) = 7.0;
	result = levelThreeLeafOne(variable);
	if ( !(TGEN_FLT_EQ(result, 7.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 8.0;
	result = levelThreeLeafTwo(variable);
	if ( !(TGEN_FLT_EQ(result, 8.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeTwo(variable)
	float          *variable;
{
	float           storage = (*variable), result = 0.0;
	float           levelThreeLeafThree(), levelThreeLeafFour();

	(*variable) = 9.0;
	result = levelThreeLeafThree(variable);
	if ( !(TGEN_FLT_EQ(result, 9.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 10.0;
	result = levelThreeLeafFour(variable);
	if ( !(TGEN_FLT_EQ(result, 10.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeThree(variable)
	float          *variable;
{
	float           storage = (*variable), result = 0.0;
	float           levelThreeLeafFive(), levelThreeLeafSix();

	(*variable) = 11.0;
	result = levelThreeLeafFive(variable);
	if ( !(TGEN_FLT_EQ(result, 11.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 12.0;
	result = levelThreeLeafSix(variable);
	if ( !(TGEN_FLT_EQ(result, 12.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeFour(variable)
	float          *variable;
{
	float           storage = (*variable), result = 0.0;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

	(*variable) = 13.0;
	result = levelThreeLeafSeven(variable);
	if ( !(TGEN_FLT_EQ(result, 13.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	(*variable) = 14.0;
	result = levelThreeLeafEight(variable);
	if ( !(TGEN_FLT_EQ(result, 14.0)) || !(TGEN_FLT_EQ(*variable, 0.0)) )
		statusFlag++;
	return (storage);
}

float
levelThreeLeafOne(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafTwo(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafThree(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafFour(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafFive(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafSix(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafSeven(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}

float
levelThreeLeafEight(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (i);
}
@def_
@def $macro23()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i = 12.0;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, return value, legal pointer
 * to function returning an Float
 */
{
	extern float    i;
	float           result = 0.0, divide4(), dummy1();

	result = dummy1(divide4, &i);
	if ( !(TGEN_FLT_EQ(result, 3.0)) || !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), *Float;
{
	float           i;

	i = (*func) (Float);
	if ( !(TGEN_FLT_EQ(i, 3.0)) || !(TGEN_FLT_EQ(*Float, 0.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float          *Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), *Float;
{
	float           i;

	i = (*func) (Float);
	if ( !(TGEN_FLT_EQ(i, 6.0)) || !(TGEN_FLT_EQ(*Float, 0.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float          *Float;
{
	float           i = *Float;

	(*Float) = 0.0;
	return (i / 2.0);
}
@def_
@def $macro24()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i = 1.0;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, used in conditional
 * expression, Float function declaration
 */
{
	extern float    i;
	float           levelOneNodeOne();

	if ( TGEN_FLT_EQ(!levelOneNodeOne(&i), 32.0) || !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float          *variable;
{
	float           levelTwoNodeOne();

	(*variable) *= 2.0;
	return (2.0 * levelTwoNodeOne(variable));
}

float
levelTwoNodeOne(variable)
	float          *variable;
{
	float           levelThreeLeafOne();

	(*variable) *= 2.0;
	return (2.0 * levelThreeLeafOne(variable));
}

float
levelThreeLeafOne(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) = 0.0;
	return (2.0 * i);
}
@def_
@def $macro25()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i = 12.0;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, in conditional expression,
 * pointer to function returning an Float
 */
{
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	arg_a = dummy1(divide4, &i);
	arg_b = 3.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) || !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), *Float;
{
	float           ii;

	if ( !(TGEN_FLT_EQ((ii = (*func) (Float)), 3.0)) || !(TGEN_FLT_EQ(*Float, 0.0)) )
		statusFlag++;
	return (ii);
}

float
divide4(Float)
	float          *Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), *Float;
{
	float           ii;

	if ( !(TGEN_FLT_EQ((ii = (*func) (Float)), 6.0)) || !(TGEN_FLT_EQ(*Float, 0.0)) )
		statusFlag++;
	return (ii);
}

float
divide2(Float)
	float          *Float;
{
	float           i = *Float;

	(*Float) = 0.0;
	return (i / 2.0);
}
@def_
@def $macro26()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 10.0;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, no return value, legal
 */
{
	extern float    i;

	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float          *variable;
{
	if ( !(TGEN_FLT_EQ(*variable, counter)) )
		statusFlag++;
	(*variable) -= 1.0;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro27()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 10.0;
float           result;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, no return value, illegal
 */
{
	extern float    i;

	result = recursiveFunction(&i);
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float          *variable;
{
	if (--counter) {
		if ( !(TGEN_FLT_EQ(counter, --(*variable))) ){
			statusFlag++;
		}
		result = recursiveFunction(variable);
	}
	return;
}
@def_
@def $macro28()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, legal, Float function
 * declaration
 */
{
	extern float    i;
	float           result = 0.0;
	float           recursiveFunction();

	result = recursiveFunction(&i);
	if ( !(TGEN_FLT_EQ(result, i)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float          *variable;
{
	float           result = 0.0;
	float           recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if ( !(TGEN_FLT_EQ(result, *variable)) )
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro29()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, pointer to function
 * returning an Float
 */
{
	extern float    i;
	float           result = 0.0, increment(), dummy();

	result = dummy(increment, &i);
	if ( !(TGEN_FLT_EQ(result - i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), *variable;
{
	float           result, dummy();
	extern float    i;

	i = *variable;
	if (--counter) {
		result = dummy(function, &i);
		if ( !(TGEN_FLT_EQ(result - i, 2.0)) )
			statusFlag++;
	}
	return (function(((*variable) -= 1.0) + 1.0));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro30()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, function in conditional expression,
 * Float function declaration
 */
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	arg_a = recursiveFunction(&i) - i;
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float          *variable;
{
	extern float    i;
	float           arg_a, arg_b;

	i = *variable;
	if (--counter){
		arg_a = recursiveFunction(&i) - i;
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (((*variable) -= 1.0) + 2.0);
}
@def_
@def $macro31()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, in conditional expression, pointer
 * to function returning an Float
 */
{
	float           increment(), dummy();
	float           arg_a, arg_b;

	arg_a = dummy(increment, &i) - i;
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), *variable;
{
	float           dummy();
	float           arg_a, arg_b;

	i = *variable;
	if (--counter){
		arg_a = dummy(function, &i) - i;
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(((*variable) -= 1.0) + 1.0));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro32()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, no return value, legal
 */
{
	extern float    i;

	castor(&i);
	if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float          *variable;
{
	extern float    i;

	i = *variable;
	if ( !(TGEN_FLT_EQ(*variable, 1.0)) )
		statusFlag++;
	if (--counter) {
		i++;
		pollux(&i);
		if ( !(TGEN_FLT_EQ(i, 3.0)) )
			statusFlag++;
	}
	(*variable) = 0.0;
}

pollux(variable)
	float          *variable;
{
	extern float    i;

	i = *variable;
	if ( !(TGEN_FLT_EQ(*variable, 2.0)) )
		statusFlag++;
	if (--counter) {
		--i;
		castor(&i);
		if ( !(TGEN_FLT_EQ(i, 0.0)) )
			statusFlag++;
	}
	(*variable) = 3.0;
}
@def_
@def $macro33()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0;
float           result;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, no return value, illegal
 */
{
	result = castor(&i);
	if ( !(TGEN_FLT_EQ(i, 0.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float          *variable;
{
	i = *variable;
	if (--counter) {
		result = pollux(&i);
		if ( !(TGEN_FLT_EQ(i, 2.0)) )
			statusFlag++;
	}
	*variable = 0.0;
}

pollux(variable)
	float          *variable;
{
	i = *variable;
	if (--counter) {
		result = castor(&i);
		if ( !(TGEN_FLT_EQ(i, 0.0)) )
			statusFlag++;
	}
	*variable = 2.0;
}
@def_
@def $macro34()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, function declared to
 * return an Float
 */
{
	float           result = 0.0, castor();

	i = 1.0;
	result = castor(&i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) || !(TGEN_FLT_EQ(i, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float          *variable;
{
	float           result = 0.0, pollux();

	ii = *variable + 3.0;
	if (--counter) {
		result = pollux(&ii);
		if ( !(TGEN_FLT_EQ(result, ii + 2.0)) )
			statusFlag++;
	}
	return (++(*variable));
}

float
pollux(variable)
	float          *variable;
{
	float           result = 0.0;

	iii = *variable - 3.0;
	if (--counter) {
		result = castor(&iii);
		if ( !(TGEN_FLT_EQ(result, iii)) )
			statusFlag++;
	}
	return (--(*variable) + 2.0);
}
@def_
@def $macro35()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, pointer to function returning
 * an Float
 */
{
	float           result = 0.0, increment();

	result = castor(increment, &i);
	if ( !(TGEN_FLT_EQ(result, i + 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	float           (*function) (), *variable;
{
	float           result = 0.0;

	ii = *variable + 8.0;
	if (--counter) {
		result = pollux(function, &ii);
		if ( !(TGEN_FLT_EQ(result, ii + 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	float           (*function) (), *variable;
{
	float           result = 0.0;

	iii = *variable - 8.0;
	if (--counter) {
		result = castor(function, &iii);
		if ( !(TGEN_FLT_EQ(result, iii + 2.0)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float          *variable;
{
	float           i = *variable;

	(*variable) -= 1.0;
	return (++i);
}
@def_
@def $macro36()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, function declared
 * to return an Float
 */
{
	extern float    i;
	float           castor();
   float           arg_a, arg_b;

	i = 1.0;
	arg_a = castor(&i) - i;
	arg_b = 0.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float          *variable;
{
	extern float    ii;
	float           pollux();
   float           arg_a, arg_b;

	ii = *variable + 3.0;
	if (--counter) {
		arg_a = pollux(&ii) - ii;
		arg_b = 0.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++(*variable));
}

float
pollux(variable)
	float          *variable;
{
	extern float    iii;
	float           arg_a, arg_b;

	iii = *variable - 3.0;
	if (--counter) {
		arg_a = castor(&iii) - iii;
		arg_b = 0.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro37()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           i = 1.0, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, pointer to
 * function returning an Float
 */
{
	float           increment();
	float           arg_a, arg_b;

	arg_a = castor(increment, &i);
	arg_b = i + 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	float           (*function) (), *variable;
{
	float           arg_a, arg_b;

	ii = *variable + 10.0;
	if (--counter) {
		arg_a = pollux(function, &ii);
		arg_b = ii + 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	float           (*function) (), *variable;
{
	float           arg_a, arg_b;

	iii = *variable - 10.0;
	if (--counter) {
		arg_a = castor(function, &iii);
		arg_b = iii + 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(variable));
}

float
increment(variable)
	float          *variable;
{
	return (--(*variable) + 2.0);
}
@def_
@def $macro38()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, no return value and legal
 */
{
	i = 1.0;
	levelOneNodeOne(&i);
	i = 2.0;
	levelOneNodeTwo(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float          *variable;
{
	*variable = 3.0;
	levelTwoNodeOne(variable);
	*variable = 4.0;
	levelTwoNodeTwo(variable);
}

levelOneNodeTwo(variable)
	float          *variable;
{
	*variable = 5.0;
	levelTwoNodeThree(variable);
	*variable = 6.0;
	levelTwoNodeFour(variable);
}

levelTwoNodeOne(variable)
	float          *variable;
{
	*variable = 7.0;
	levelThreeLeafOne(variable);
	*variable = 8.0;
	levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(variable)
	float          *variable;
{
	*variable = 9.0;
	levelThreeLeafThree(variable);
	*variable = 10.0;
	levelThreeLeafFour(variable);
}

levelTwoNodeThree(variable)
	float          *variable;
{
	*variable = 11.0;
	levelThreeLeafFive(variable);
	*variable = 12.0;
	levelThreeLeafSix(variable);
}

levelTwoNodeFour(variable)
	float          *variable;
{
	*variable = 13.0;
	levelThreeLeafSeven(variable);
	*variable = 14.0;
	levelThreeLeafEight(variable);
}

levelThreeLeafOne(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;

}

levelThreeLeafTwo(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafThree(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafFour(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafFive(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafSix(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafEight(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}
@def_
@def $macro39()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           i;
float           result;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, no return value and illegal
 */
{
	i = 1.0;
	result = levelOneNodeOne(&i);
	i = 2.0;
	result = levelOneNodeTwo(&i);
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	float          *variable;
{
	*variable = 3.0;
	result = levelTwoNodeOne(variable);
	*variable = 4.0;
	result = levelTwoNodeTwo(variable);
}

levelOneNodeTwo(variable)
	float          *variable;
{
	*variable = 5.0;
	result = levelTwoNodeThree(variable);
	*variable = 6.0;
	result = levelTwoNodeFour(variable);
}

levelTwoNodeOne(variable)
	float          *variable;
{
	*variable = 7.0;
	result = levelThreeLeafOne(variable);
	*variable = 8.0;
	result = levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(variable)
	float          *variable;
{
	*variable = 9.0;
	result = levelThreeLeafThree(variable);
	*variable = 10.0;
	result = levelThreeLeafFour(variable);
}

levelTwoNodeThree(variable)
	float          *variable;
{
	*variable = 11.0;
	result = levelThreeLeafFive(variable);
	*variable = 12.0;
	result = levelThreeLeafSix(variable);
}

levelTwoNodeFour(variable)
	float          *variable;
{
	*variable = 13.0;
	result = levelThreeLeafSeven(variable);
	*variable = 14.0;
	result = levelThreeLeafEight(variable);
}

levelThreeLeafOne(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafThree(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafFour(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafFive(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafSix(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}

levelThreeLeafEight(variable)
	float          *variable;
{
	variable = 0;
	if (variable != 0)
		statusFlag++;
}
@def_
@def $macro40()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           globalInteger = 10.0;
float           i = 1.0;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, return value and legal, Float
 * function declaration
 */
{
	float           result = 0.0;
	float           levelOneNodeOne(), levelOneNodeTwo();

	result = levelOneNodeOne(&i);
	if ( !(TGEN_FLT_EQ(result, 1.0)) )
		statusFlag++;
	i = 2.0;
	result = levelOneNodeTwo(&i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float          *variable;
{
	float           storage = *variable, result = 0.0;
	float           levelTwoNodeOne(), levelTwoNodeTwo();

	*variable = 3.0;
	result = levelTwoNodeOne(variable);
	if ( !(TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	*variable = 4.0;
	result = levelTwoNodeTwo(variable);
	if ( !(TGEN_FLT_EQ(result, 4.0)) )
		statusFlag++;
	return (storage);
}

float
levelOneNodeTwo(variable)
	float          *variable;
{
	float           storage = *variable, result = 0.0;
	float           levelTwoNodeThree(), levelTwoNodeFour();

	*variable = 5.0;
	result = levelTwoNodeThree(variable);
	if ( !(TGEN_FLT_EQ(result, 5.0)) )
		statusFlag++;
	*variable = 6.0;
	result = levelTwoNodeFour(variable);
	if ( !(TGEN_FLT_EQ(result, 6.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeOne(variable)
	float          *variable;
{
	float           storage = *variable, result = 0.0;
	float           levelThreeLeafOne(), levelThreeLeafTwo();

	*variable = 7.0;
	result = levelThreeLeafOne(variable);
	if ( !(TGEN_FLT_EQ(result, 7.0)) )
		statusFlag++;
	*variable = 8.0;
	result = levelThreeLeafTwo(variable);
	if ( !(TGEN_FLT_EQ(result, 8.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeTwo(variable)
	float          *variable;
{
	float           storage = *variable, result = 0.0;
	float           levelThreeLeafThree(), levelThreeLeafFour();

	*variable = 9.0;
	result = levelThreeLeafThree(variable);
	if ( !(TGEN_FLT_EQ(result, 9.0)) )
		statusFlag++;
	*variable = 10.0;
	result = levelThreeLeafFour(variable);
	if ( !(TGEN_FLT_EQ(result, 10.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeThree(variable)
	float          *variable;
{
	float           storage = *variable, result = 0.0;
	float           levelThreeLeafFive(), levelThreeLeafSix();

	*variable = 11.0;
	result = levelThreeLeafFive(variable);
	if ( !(TGEN_FLT_EQ(result, 11.0)) )
		statusFlag++;
	*variable = 12.0;
	result = levelThreeLeafSix(variable);
	if ( !(TGEN_FLT_EQ(result, 12.0)) )
		statusFlag++;
	return (storage);
}

float
levelTwoNodeFour(variable)
	float          *variable;
{
	float           storage = *variable, result = 0.0;
	float           levelThreeLeafSeven(), levelThreeLeafEight();

	*variable = 13.0;
	result = levelThreeLeafSeven(variable);
	if ( !(TGEN_FLT_EQ(result, 13.0)) )
		statusFlag++;
	*variable = 14.0;
	result = levelThreeLeafEight(variable);
	if ( !(TGEN_FLT_EQ(result, 14.0)) )
		statusFlag++;
	return (storage);
}

float
levelThreeLeafOne(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafTwo(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafThree(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafFour(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafFive(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafSix(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafSeven(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}

float
levelThreeLeafEight(variable)
	float          *variable;
{
	float           i = *variable;

	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (i);
}
@def_
@def $macro41()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           globalInteger = 10.0;
float           i = 12.0;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, return value, legal pointer to
 * function returning an Float
 */
{
	float           result = 0.0, divide4(), dummy1();

	result = dummy1(divide4, &i);
	if ( !(TGEN_FLT_EQ(result, 3.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), *Float;
{
	float           i;

	i = (*func) (Float);
	if ( !(TGEN_FLT_EQ(i, 3.0)) )
		statusFlag++;
	Float = &globalInteger;
	if ( !(TGEN_FLT_EQ(*Float, 10.0)) )
		statusFlag++;
	return (i);
}

float
divide4(Float)
	float          *Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), *Float;
{
	float           i;

	i = (*func) (Float);
	if ( !(TGEN_FLT_EQ(i, 6.0)) )
		statusFlag++;
	Float = &globalInteger;
	if ( !(TGEN_FLT_EQ(*Float, 10.0)) )
		statusFlag++;
	return (i);
}

float
divide2(Float)
	float          *Float;
{
	float           i = *Float;

	(*Float) = 0.0;
	return (i / 2.0);
}
@def_
@def $macro42()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           globalInteger = 10.0;
float           i = 1.0;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, used in conditional expression,
 * Float function declaration
 */
{
	float           levelOneNodeOne();
	float           arg_a, arg_b;

	arg_a = levelOneNodeOne(&i);
	arg_b = 32.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
levelOneNodeOne(variable)
	float          *variable;
{
	float           levelTwoNodeOne();

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	i *= 2.0;
	return (2.0 * levelTwoNodeOne(&i));
}

float
levelTwoNodeOne(variable)
	float          *variable;
{
	float           levelThreeLeafOne();

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	i *= 2.0;
	return (2.0 * levelThreeLeafOne(&i));
}

float
levelThreeLeafOne(variable)
	float          *variable;
{
	static float    i;

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (2.0 * i);
}
@def_
@def $macro43()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
float           globalInteger = 10.0;
float           i = 12.0;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, in conditional expression, pointer
 * to function returning an Float
 */
{
	float           divide4(), dummy1();
	float           arg_a, arg_b;

	arg_a = dummy1(divide4, &i);
	arg_b = 3.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy1(func, Float)
	float           (*func) (), *Float;
{
	float           ii;

	if ( !(TGEN_FLT_EQ((ii = (*func) (Float)), 3.0)) )
		statusFlag++;
	return (ii);
}

float
divide4(Float)
	float          *Float;
{
	float           divide2(), dummy2();

	return (dummy2(divide2, Float) / 2.0);
}

float
dummy2(func, Float)
	float           (*func) (), *Float;
{
	float           ii;

	if ( !(TGEN_FLT_EQ((ii = (*func) (Float)), 6.0)) )
		statusFlag++;
	return (ii);
}

float
divide2(Float)
	float          *Float;
{
	float           i = *Float;

	Float = &globalInteger;
	if ( !(TGEN_FLT_EQ(*Float, 10.0)) )
		statusFlag++;
	return (i / 2.0);
}
@def_
@def $macro44()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 10.0;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, no return value, legal
 */
{
	extern float    i;

	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	float          *variable;
{
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro45()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, legal, Float function
 * declaration
 */
{
	extern float    i;
	float           result = 0.0;
	float           recursiveFunction();

	result = recursiveFunction(&i);
	if ( !(TGEN_FLT_EQ(result, 1.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float          *variable;
{
	float           result = 0.0;
	extern float    i;
	float           recursiveFunction();

	i = *variable;
	if (--counter) {
		variable = &globalInteger;
		if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
			statusFlag++;
		result = recursiveFunction(&i);
		if ( !(TGEN_FLT_EQ(result, 1.0)) )
			statusFlag++;
	}
	return (i);
}
@def_
@def $macro46()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, pointer to function returning
 * an Float
 */
{
	extern float    i;
	float           result = 0.0, increment(), dummy();

	result = dummy(increment, &i);
	if ( !(TGEN_FLT_EQ(result, 2.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), *variable;
{
	float           result, dummy();
	extern float    i;

	i = *variable;
	if (--counter) {
		variable = &globalInteger;
		if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
			statusFlag++;
		result = dummy(function, &i);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (function(i));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro47()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, function in conditional expression, Float
 * function declaration
 */
{
	float           recursiveFunction();
	float           arg_a, arg_b;

	arg_a = recursiveFunction(&i);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
recursiveFunction(variable)
	float          *variable;
{
	float           arg_a, arg_b;

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter){
		arg_a = recursiveFunction(&i);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (i + 1.0);
}
@def_
@def $macro48()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, in conditional expression, pointer to
 * function returning an Float
 */
{
	float           increment(), dummy();
	extern float    i;
	float           arg_a, arg_b;

	arg_a = dummy(increment, &i);
	arg_b = 2.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
dummy(function, variable)
	float           (*function) (), *variable;
{
	extern float    i, dummy();
	float           arg_a, arg_b;

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter){
		arg_a = dummy(function, &i);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (function(i));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro49()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, no return value, legal
 */
{
	castor(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float          *variable;
{
	i = *variable;
	if ( !(TGEN_FLT_EQ(*variable, 1.0)) )
		statusFlag++;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter) {
		i++;
		pollux(&i);
	}
}

pollux(variable)
	float          *variable;
{
	i = *variable;
	if ( !(TGEN_FLT_EQ(*variable, 2.0)) )
		statusFlag++;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter) {
		--i;
		castor(&i);
	}
}
@def_
@def $macro50()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0;
float           result;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, no return value, illegal
 */
{
	extern float    i;

	result = castor(&i);
	if ( TGEN_FLT_EQ(result, 0.0) )
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	float          *variable;
{
	extern float    i;

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter)
		result = pollux(&i);
}

pollux(variable)
	float          *variable;
{
	extern float    i;

	i = *variable;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter)
		result = castor(&i);
}
@def_
@def $macro51()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 2.0, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, function declared to
 * return an Float
 */
{
	extern float    i;
	float           result = 0.0, castor();

	result = castor(&i);
	if ( !(TGEN_FLT_EQ(result, 5.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float          *variable;
{
	extern float    ii;
	float           result = 0.0, pollux();

	ii = *variable + 3.0;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter) {
		result = pollux(&ii);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (ii);
}

float
pollux(variable)
	float          *variable;
{
	extern float    iii;
	float           result = 0.0;

	iii = *variable - 3.0;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter) {
		result = castor(&iii);
		if ( !(TGEN_FLT_EQ(result, 5.0)) )
			statusFlag++;
	}
	return (iii);
}
@def_
@def $macro52()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, return value, pointer to function returning an
 * Float
 */
{
	extern float    i;
	float           result = 0.0, increment();

	result = castor(increment, &i);
	if ( !(TGEN_FLT_EQ(result, 10.0)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	float           (*function) (), *variable;
{
	extern float    ii;
	float           result = 0.0;

	ii = *variable + 8.0;
	if (--counter) {
		variable = &globalInteger;
		if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
			statusFlag++;
		result = pollux(function, &ii);
		if ( !(TGEN_FLT_EQ(result, 2.0)) )
			statusFlag++;
	}
	return (function(ii));
}

pollux(function, variable)
	float           (*function) (), *variable;
{
	extern float    iii;
	float           result = 0.0;

	iii = *variable - 8.0;
	if (--counter) {
		variable = &globalInteger;
		if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
			statusFlag++;
		result = castor(function, &iii);
		if ( !(TGEN_FLT_EQ(result, 10.0)) )
			statusFlag++;
	}
	return (function(iii));
}

float
increment(variable)
	float           variable;
{

	return (++variable);
}
@def_
@def $macro53()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, function declared to
 * return an Float
 */
{
	extern float    i;
	float           castor();
	float           arg_a, arg_b;

	arg_a = castor(&i);
	arg_b = 5.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

float
castor(variable)
	float          *variable;
{
	extern float    ii;
	float           pollux();
	float           arg_a, arg_b;

	ii = *variable + 3.0;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter) {
		arg_a = pollux(&ii);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (ii + 1.0);
}

float
pollux(variable)
	float          *variable;
{
	extern float    iii;
 	float           arg_a, arg_b;

	iii = *variable - 3.0;
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	if (--counter) {
		arg_a = castor(&iii);
		arg_b = 5.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	return (iii + 1.0);
}
@def_
@def $macro54()
$LICENSE()
$FHEAD()

float           statusFlag = NoMistake;
short           counter = 10;
float           globalInteger = 10.0;
float           i = 1.0, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, pointer to function
 * returning an Float
 */
{
	extern float    i;
	float           increment();
	float           arg_a, arg_b;

	arg_a = castor(increment, &i);
	arg_b = 12.0;
	if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	float           (*function) (), *variable;
{
	extern float    ii;
	float           arg_a, arg_b;

	ii = *variable + 10.0;
	if (--counter) {
		arg_a = pollux(function, &ii);
		arg_b = 2.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (function(ii));
}

pollux(function, variable)
	float           (*function) (), *variable;
{
	extern float    iii;
	float           arg_a, arg_b;

	iii = *variable - 10.0;
	if (--counter) {
		arg_a = castor(function, &iii);
		arg_b = 12.0;
		if ( !(TGEN_FLT_EQ(arg_a, arg_b)) )
			statusFlag++;
	}
	variable = &globalInteger;
	if ( !(TGEN_FLT_EQ(*variable, 10.0)) )
		statusFlag++;
	return (function(iii));
}

float
increment(variable)
	float           variable;
{
	return (++variable);
}
@def_
@def $macro55()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i, i11, i12, i21, i22, i23, i24;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, no return value and legal
 */
{
	extern long     i;

	i = 1;
	levelOneNodeOne(&i);
	i = 2;
	levelOneNodeTwo(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	long           *argument;
{
	extern long     i11;

	if (*argument != 1L)
		statusFlag++;
	i11 = 3;
	levelTwoNodeOne(&i11);
	i11 = 4;
	levelTwoNodeTwo(&i11);
}

levelOneNodeTwo(argument)
	long           *argument;
{
	extern long     i12;

	if (*argument != 2L)
		statusFlag++;
	i12 = 5;
	levelTwoNodeThree(&i12);
	i12 = 6;
	levelTwoNodeFour(&i12);
}

levelTwoNodeOne(argument)
	long           *argument;
{
	extern long     i21;

	if (*argument != 3L)
		statusFlag++;
	i21 = 7;
	levelThreeLeafOne(&i21);
	i21 = 8;
	levelThreeLeafTwo(&i21);
}

levelTwoNodeTwo(argument)
	long           *argument;
{
	extern long     i22;

	if (*argument != 4L)
		statusFlag++;
	i22 = 9;
	levelThreeLeafThree(&i22);
	i22 = 10;
	levelThreeLeafFour(&i22);
}

levelTwoNodeThree(argument)
	long           *argument;
{
	extern long     i23;

	if (*argument != 5L)
		statusFlag++;
	i23 = 11;
	levelThreeLeafFive(&i23);
	i23 = 12;
	levelThreeLeafSix(&i23);
}

levelTwoNodeFour(argument)
	long           *argument;
{
	extern long     i24;

	if (*argument != 6L)
		statusFlag++;
	i24 = 13;
	levelThreeLeafSeven(&i24);
	i24 = 14;
	levelThreeLeafEight(&i24);
}

levelThreeLeafOne(argument)
	long           *argument;
{
	if (*argument != 7L)
		statusFlag++;
}

levelThreeLeafTwo(argument)
	long           *argument;
{
	if (*argument != 8L)
		statusFlag++;
}

levelThreeLeafThree(argument)
	long           *argument;
{
	if (*argument != 9L)
		statusFlag++;
}

levelThreeLeafFour(argument)
	long           *argument;
{
	if (*argument != 10L)
		statusFlag++;
}

levelThreeLeafFive(argument)
	long           *argument;
{
	if (*argument != 11L)
		statusFlag++;
}

levelThreeLeafSix(argument)
	long           *argument;
{
	if (*argument != 12L)
		statusFlag++;
}

levelThreeLeafSeven(argument)
	long           *argument;
{
	if (*argument != 13L)
		statusFlag++;
}

levelThreeLeafEight(argument)
	long           *argument;
{
	if (*argument != 14L)
		statusFlag++;
}
@def_
@def $macro56()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i, i11, i12, i21, i22, i23, i24;
long            result;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, no return value and illegal
 */
{
	extern long     i;

	i = 1;
	result = levelOneNodeOne(&i);
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	long           *argument;
{
	extern long     i11;

	if (*argument != 1L)
		statusFlag++;
	i11 = 3;
	result = levelTwoNodeOne(&i11);
	i11 = 4;
	result = levelTwoNodeTwo(&i11);
}

levelOneNodeTwo(argument)
	long           *argument;
{
	extern long     i12;

	if (*argument != 2L)
		statusFlag++;
	i12 = 5;
	result = levelTwoNodeThree(&i12);
	i12 = 6;
	result = levelTwoNodeFour(&i12);

}

levelTwoNodeOne(argument)
	long           *argument;
{
	extern long     i21;

	if (*argument != 3L)
		statusFlag++;
	i21 = 7;
	result = levelThreeLeafOne(&i21);
	i21 = 8;
	result = levelThreeLeafTwo(&i21);
}

levelTwoNodeTwo(argument)
	long           *argument;
{
	extern long     i22;

	if (*argument != 4L)
		statusFlag++;
	i22 = 9;
	result = levelThreeLeafThree(&i22);
	i22 = 10;
	result = levelThreeLeafFour(&i22);
}

levelTwoNodeThree(argument)
	long           *argument;
{
	extern long     i23;

	if (*argument != 5L)
		statusFlag++;
	i23 = 11;
	result = levelThreeLeafFive(&i23);
	i23 = 12;
	result = levelThreeLeafSix(&i23);
}

levelTwoNodeFour(argument)
	long           *argument;
{
	extern long     i24;

	if (*argument != 6L)
		statusFlag++;
	i24 = 13;
	result = levelThreeLeafSeven(&i24);
	i24 = 14;
	result = levelThreeLeafEight(&i24);
}

levelThreeLeafOne(argument)
	long           *argument;
{
	if (*argument != 7L)
		statusFlag++;
	return;
}

levelThreeLeafTwo(argument)
	long           *argument;
{
	if (*argument != 8L)
		statusFlag++;
	return;
}

levelThreeLeafThree(argument)
	long           *argument;
{
	if (*argument != 9L)
		statusFlag++;
	return;
}

levelThreeLeafFour(argument)
	long           *argument;
{
	if (*argument != 10L)
		statusFlag++;
	return;
}

levelThreeLeafFive(argument)
	long           *argument;
{
	if (*argument != 11L)
		statusFlag++;
	return;
}

levelThreeLeafSix(argument)
	long           *argument;
{
	if (*argument != 12L)
		statusFlag++;
	return;
}

levelThreeLeafSeven(argument)
	long           *argument;
{
	if (*argument != 13L)
		statusFlag++;
	return;
}

levelThreeLeafEight(argument)
	long           *argument;
{
	if (*argument != 14L)
		statusFlag++;
	return;
}
@def_
@def $macro57()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i, i11, i12, i21, i22, i23, i24;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, return value and legal, Long function declaration
 */
{
	extern long     i;
	long            result = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1L)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(argument)
	long           *argument;
{
	long            result = 0;
	extern long     i11;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	i11 = 3;
	result = levelTwoNodeOne(&i11);
	if (result != 3L)
		statusFlag++;
	i11 = 4;
	result = levelTwoNodeTwo(&i11);
	if (result != 4L)
		statusFlag++;
	return (*argument);
}

long
levelOneNodeTwo(argument)
	long           *argument;
{
	long            result = 0;
	extern long     i12;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	i12 = 5;
	result = levelTwoNodeThree(&i12);
	if (result != 5L)
		statusFlag++;
	i12 = 6;
	result = levelTwoNodeFour(&i12);
	if (result != 6L)
		statusFlag++;
	return (*argument);
}

long
levelTwoNodeOne(argument)
	long           *argument;
{
	long            result = 0;
	extern long     i21;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	i21 = 7;
	result = levelThreeLeafOne(&i21);
	if (result != 7L)
		statusFlag++;
	i21 = 8;
	result = levelThreeLeafTwo(&i21);
	if (result != 8L)
		statusFlag++;
	return (*argument);
}

long
levelTwoNodeTwo(argument)
	long           *argument;
{
	long            result = 0;
	extern long     i22;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	i22 = 9;
	result = levelThreeLeafThree(&i22);
	if (result != 9L)
		statusFlag++;
	i22 = 10;
	result = levelThreeLeafFour(&i22);
	if (result != 10L)
		statusFlag++;
	return (*argument);
}

long
levelTwoNodeThree(argument)
	long           *argument;
{
	long            result = 0;
	extern long     i23;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	i23 = 11;
	result = levelThreeLeafFive(&i23);
	if (result != 11L)
		statusFlag++;
	i23 = 12;
	result = levelThreeLeafSix(&i23);
	if (result != 12L)
		statusFlag++;
	return (*argument);
}

long
levelTwoNodeFour(argument)
	long           *argument;
{
	long            result = 0;
	extern long     i24;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	i24 = 13;
	result = levelThreeLeafSeven(&i24);
	if (result != 13L)
		statusFlag++;
	i24 = 14;
	result = levelThreeLeafEight(&i24);
	if (result != 14L)
		statusFlag++;
	return (*argument);
}

long
levelThreeLeafOne(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafTwo(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafThree(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafFour(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafFive(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafSix(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafSeven(argument)
	long           *argument;
{
	return (*argument);
}

long
levelThreeLeafEight(argument)
	long           *argument;
{
	return (*argument);
}
@def_
@def $macro58()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i = 12;

main()
/*
 * test class: extern variable address instance  : linear tree structure, return value, legal pointer to function returning
 * a long
 */
{
	extern long     i;
	long            result = 0, divide4(), dummy1();

	result = dummy1(divide4, &i);
	if (result != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), *Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long           *Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), *Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long           *Long;
{
	return (*Long / 2);
}
@def_
@def $macro59()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i = 1, ii, iii;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, used in conditional expression, Long function
 * declaration
 */
{
	extern long     i;
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(&i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long           *variable;
{
	extern long     ii;
	long            levelTwoNodeOne();

	ii = 2 * (*variable);
	return (2 * levelTwoNodeOne(&ii));
}

long
levelTwoNodeOne(variable)
	long           *variable;
{
	extern long     iii;
	long            levelThreeLeafOne();

	iii = 2 * (*variable);
	return (2 * levelThreeLeafOne(&iii));
}

long
levelThreeLeafOne(variable)
	long           *variable;
{
	return (2 * (*variable));
}
@def_
@def $macro60()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i = 12;

main()
/*
 * test class: extern variable address instance  : linear tree structure, in conditional expression, pointer to function
 * returning a long
 */
{
	long            divide4(), dummy1();

	if (dummy1(divide4, &i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), *Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 3L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	long           *Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), *Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 6L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	long           *Long;
{
	return (*Long / 2);
}
@def_
@def $macro61()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, legal
 */
{
	extern long     i;

	i = 1;
	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long           *variable;
{
	if (*variable != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro62()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii;
long            result;

main()
/*
 * test class: extern variable address instance  : recursive call, no return value, illegal
 */
{
	result = recursiveFunction(&i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long           *variable;
{
	if ((ii = *variable) != i)
		statusFlag++;
	if (--counter)
		result = recursiveFunction(&ii);
	return;
}
@def_
@def $macro63()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, Long function declaration
 */
{
	extern long     i;
	long            result = 0;
	long            recursiveFunction();

	result = recursiveFunction(&i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long           *variable;
{
	extern long     i;
	long            result = 0;
	long            recursiveFunction();

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (result != 2L)
			statusFlag++;
	}
	return (i + 1);
}
@def_
@def $macro64()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, pointer to function returning a long
 */
{
	long            result = 0, increment(), dummy();

	result = dummy(increment, &i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), *variable;
{
	long            result, dummy();

	if (--counter) {
		result = dummy(function, variable);
		if (result != 2L)
			statusFlag++;
	}
	return (function(*variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro65()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, Long function
 * declaration
 */
{
	long            recursiveFunction();
	extern long     i;

	if (!(recursiveFunction(&i) - i == 1L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long           *variable;
{
	long            recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(variable) - *variable == 1L))
			statusFlag++;
	return ((*variable) + 1);
}
@def_
@def $macro66()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, pointer to function returning
 * a long
 */
{
	long            increment(), dummy();

	if (!(dummy(increment, &i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), *variable;
{
	long            dummy();
	if (--counter)
		if (!(dummy(function, variable) == 2L))
			statusFlag++;
	return (function(*variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro67()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, no return value, legal
 */
{
	extern long     i;

	i = 1;
	castor(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long           *variable;
{
	extern long     ii;

	ii = *variable;
	if (*variable != 1L)
		statusFlag++;
	if (--counter) {
		ii++;
		pollux(&ii);
	}
}

pollux(variable)
	long           *variable;
{
	extern long     iii;

	iii = *variable;
	if (*variable != 2L)
		statusFlag++;
	if (--counter) {
		--iii;
		castor(&iii);
	}
}
@def_
@def $macro68()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            zero = 0;	/* modified by m2 on Apr. 23, 1984 */
long           *i = &zero;	/* modified by m2 on Apr. 23, 1984 */
long            result;

main()
/*
 * test class: extern variable address instance  : gemini, no return value, illegal
 */
{
	result = castor(i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long           *variable;
{
	if (*variable != 0L)
		statusFlag++;
	if (--counter)
		result = pollux(variable);
}

pollux(variable)
	long           *variable;
{
	if (*variable != 0L)
		statusFlag++;
	if (--counter)
		result = castor(variable);
}
@def_
@def $macro69()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, legal, function declared to return a long
 */
{
	long            result = 0, castor();

	result = castor(&i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long           *variable;
{
	long            result = 0, pollux();

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if (result != 5L)
			statusFlag++;
	}
	return (*variable + 1);
}

long
pollux(variable)
	long           *variable;
{
	long            result = 0, castor();

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if (result != 2L)
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro70()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, pointer to function returning a long
 */
{
	extern long     i;
	long            result = 0, increment(), castor();

	result = castor(increment, &i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), *variable;
{
	extern long     ii;
	long            result = 0, pollux();

	ii = *variable + 8;
	if (--counter) {
		result = pollux(function, &ii);
		if (result != 10L)
			statusFlag++;
	}
	return (function(*variable));
}

long
pollux(function, variable)
	long            (*function) (), *variable;
{
	extern long     iii;
	long            result = 0, castor();

	iii = *variable - 8;
	if (--counter) {
		result = castor(function, &iii);
		if (result != 2L)
			statusFlag++;
	}
	return (function(*variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro71()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, function declared to return a long
 */
{
	extern long     i;
	long            castor();

	if (!(castor(&i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long           *variable;
{
	long            pollux();

	ii = *variable + 3;
	if (--counter) {
		if (!(pollux(&ii) == 5L))
			statusFlag++;
	}
	return (*variable + 1);
}

long
pollux(variable)
	long           *variable;

{
	long            castor();

	iii = *variable - 3;
	if (--counter) {
		if (!(castor(&iii) == 2L))
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro72()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, pointer to function returning a long
 */
{
	long            increment(), castor();

	if (!(castor(increment, &i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), *variable;
{
	extern long     ii;
	long            pollux();

	ii = *variable + 10;
	if (--counter) {
		if (!(pollux(function, &ii) == 12L))
			statusFlag++;
	}
	return (function(*variable));
}

long
pollux(function, variable)
	long            (*function) (), *variable;
{
	extern long     iii;
	long            castor();

	iii = *variable - 10;
	if (--counter) {
		if (!(castor(function, &iii) == 2L))
			statusFlag++;
	}
	return (function(*variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro73()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, no return value and legal
 */
{
	extern long     i;

	i = 1;
	levelOneNodeOne(&i);
	if (i != 0L)
		statusFlag++;
	i = 2;
	levelOneNodeTwo(&i);
	if (i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long           *variable;
{
	(*variable) = 3;
	levelTwoNodeOne(variable);
	if (*variable != 0L)
		statusFlag++;
	(*variable) = 4;
	levelTwoNodeTwo(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelOneNodeTwo(variable)
	long           *variable;
{
	(*variable) = 5;
	levelTwoNodeThree(variable);
	if (*variable != 0L)
		statusFlag++;
	(*variable) = 6;
	levelTwoNodeFour(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeOne(variable)
	long           *variable;
{
	(*variable) = 7;
	levelThreeLeafOne(variable);
	if (*variable != 0L)
		statusFlag++;
	(*variable) = 8;
	levelThreeLeafTwo(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeTwo(variable)
	long           *variable;
{
	(*variable) = 9;
	levelThreeLeafThree(variable);
	if (*variable != 0L)
		statusFlag++;
	(*variable) = 10;
	levelThreeLeafFour(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeThree(variable)
	long           *variable;
{
	(*variable) = 11;
	levelThreeLeafFive(variable);
	if (*variable != 0L)
		statusFlag++;
	(*variable) = 12;
	levelThreeLeafSix(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeFour(variable)
	long           *variable;
{
	(*variable) = 13;
	levelThreeLeafSeven(variable);
	if (*variable != 0L)
		statusFlag++;
	(*variable) = 14;
	levelThreeLeafEight(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelThreeLeafOne(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafTwo(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafThree(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafFour(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafFive(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafSix(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafSeven(variable)
	long           *variable;
{
	(*variable) = 0;
}

levelThreeLeafEight(variable)
	long           *variable;
{
	(*variable) = 0;
}
@def_
@def $macro74()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i;
long            result;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, no return value and illegal
 */
{
	i = 1;
	result = levelOneNodeOne(&i);
	if (i != 0L)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (i != 0L)
		statusFlag++;
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long           *variable;
{
	if (*variable != 1L)
		statusFlag++;
	*variable = 3;
	result = levelTwoNodeOne(variable);
	if (*variable != 0L)
		statusFlag++;
	*variable = 4;
	result = levelTwoNodeTwo(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelOneNodeTwo(variable)
	long           *variable;
{
	if (*variable != 2L)
		statusFlag++;
	*variable = 5;
	result = levelTwoNodeThree(variable);
	if (*variable != 0L)
		statusFlag++;
	*variable = 6;
	result = levelTwoNodeFour(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeOne(variable)
	long           *variable;
{
	if (*variable != 3L)
		statusFlag++;
	*variable = 7;
	result = levelThreeLeafOne(variable);
	if (*variable != 0L)
		statusFlag++;
	*variable = 8;
	result = levelThreeLeafTwo(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeTwo(variable)
	long           *variable;
{
	if (*variable != 4L)
		statusFlag++;
	*variable = 9;
	result = levelThreeLeafThree(variable);
	if (*variable != 0L)
		statusFlag++;
	*variable = 10;
	result = levelThreeLeafFour(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeThree(variable)
	long           *variable;
{
	if (*variable != 5L)
		statusFlag++;
	*variable = 11;
	result = levelThreeLeafFive(variable);
	if (*variable != 0L)
		statusFlag++;
	*variable = 12;
	result = levelThreeLeafSix(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelTwoNodeFour(variable)
	long           *variable;
{
	if (*variable != 6L)
		statusFlag++;
	*variable = 13;
	result = levelThreeLeafSeven(variable);
	if (*variable != 0L)
		statusFlag++;
	*variable = 14;
	result = levelThreeLeafEight(variable);
	if (*variable != 0L)
		statusFlag++;
}

levelThreeLeafOne(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafTwo(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafThree(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafFour(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafFive(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafSix(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafSeven(variable)
	long           *variable;
{
	*variable = 0;
}

levelThreeLeafEight(variable)
	long           *variable;
{
	*variable = 0;
}
@def_
@def $macro75()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, return value and legal, Long
 * function declaration
 */
{
	long            result = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1L || i != 0L)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2L || i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long           *variable;
{
	long            storage = (*variable), result = 0;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	(*variable) = 3;
	result = levelTwoNodeOne(variable);
	if (result != 3L || *variable != 0L)
		statusFlag++;
	(*variable) = 4;
	result = levelTwoNodeTwo(variable);
	if (result != 4L || *variable != 0L)
		statusFlag++;
	return (storage);
}

long
levelOneNodeTwo(variable)
	long           *variable;
{
	long            storage = (*variable), result = 0;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	(*variable) = 5;
	result = levelTwoNodeThree(variable);
	if (result != 5L || *variable != 0L)
		statusFlag++;
	(*variable) = 6;
	result = levelTwoNodeFour(variable);
	if (result != 6L || *variable != 0L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeOne(variable)
	long           *variable;
{
	long            storage = (*variable), result = 0;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	(*variable) = 7;
	result = levelThreeLeafOne(variable);
	if (result != 7L || *variable != 0L)
		statusFlag++;
	(*variable) = 8;
	result = levelThreeLeafTwo(variable);
	if (result != 8L || *variable != 0L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeTwo(variable)
	long           *variable;
{
	long            storage = (*variable), result = 0;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	(*variable) = 9;
	result = levelThreeLeafThree(variable);
	if (result != 9L || *variable != 0L)
		statusFlag++;
	(*variable) = 10;
	result = levelThreeLeafFour(variable);
	if (result != 10L || *variable != 0L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeThree(variable)
	long           *variable;
{
	long            storage = (*variable), result = 0;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	(*variable) = 11;
	result = levelThreeLeafFive(variable);
	if (result != 11L || *variable != 0L)
		statusFlag++;
	(*variable) = 12;
	result = levelThreeLeafSix(variable);
	if (result != 12L || *variable != 0L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeFour(variable)
	long           *variable;
{
	long            storage = (*variable), result = 0;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	(*variable) = 13;
	result = levelThreeLeafSeven(variable);
	if (result != 13L || *variable != 0L)
		statusFlag++;
	(*variable) = 14;
	result = levelThreeLeafEight(variable);
	if (result != 14L || *variable != 0L)
		statusFlag++;
	return (storage);
}

long
levelThreeLeafOne(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafTwo(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafThree(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafFour(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafFive(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafSix(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafSeven(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}

long
levelThreeLeafEight(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (i);
}
@def_
@def $macro76()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i = 12;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, return value, legal pointer
 * to function returning a long
 */
{
	extern long     i;
	long            result = 0, divide4(), dummy1();

	result = dummy1(divide4, &i);
	if (result != 3L || i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), *Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L || *Long != 0L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long           *Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), *Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L || *Long != 0L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long           *Long;
{
	long            i = *Long;

	(*Long) = 0;
	return (i / 2);
}
@def_
@def $macro77()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i = 1;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, used in conditional
 * expression, Long function declaration
 */
{
	extern long     i;
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(&i) == 32L) || i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long           *variable;
{
	long            levelTwoNodeOne();

	(*variable) *= 2;
	return (2 * levelTwoNodeOne(variable));
}

long
levelTwoNodeOne(variable)
	long           *variable;
{
	long            levelThreeLeafOne();

	(*variable) *= 2;
	return (2 * levelThreeLeafOne(variable));
}

long
levelThreeLeafOne(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable) = 0;
	return (2 * i);
}
@def_
@def $macro78()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i = 12;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, in conditional expression,
 * pointer to function returning a long
 */
{
	long            divide4(), dummy1();

	if (dummy1(divide4, &i) != 3L || i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), *Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 3L || *Long != 0L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	long           *Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), *Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 6L || *Long != 0L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	long           *Long;
{
	long            i = *Long;

	(*Long) = 0;
	return (i / 2);
}
@def_
@def $macro79()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 10;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, no return value, legal
 */
{
	extern long     i;

	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long           *variable;
{
	if (*variable != counter)
		statusFlag++;
	(*variable)--;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro80()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 10;
long            result;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, no return value, illegal
 */
{
	extern long     i;

	result = recursiveFunction(&i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long           *variable;
{
	if (--counter) {
		if (counter != --(*variable))
			statusFlag++;
		result = recursiveFunction(variable);
	}
	return;
}
@def_
@def $macro81()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, legal, Long function
 * declaration
 */
{
	extern long     i;
	long            result = 0;
	long            recursiveFunction();

	result = recursiveFunction(&i);
	if (result != i)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long           *variable;
{
	long            result = 0;
	long            recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != *variable)
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro82()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, pointer to function
 * returning a long
 */
{
	extern long     i;
	long            result = 0, increment(), dummy();

	result = dummy(increment, &i);
	if (result - i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), *variable;
{
	long            result, dummy();
	extern long     i;

	i = *variable;
	if (--counter) {
		result = dummy(function, &i);
		if (result - i != 2L)
			statusFlag++;
	}
	return (function((*variable)--));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro83()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, function in conditional expression,
 * Long function declaration
 */
{
	long            recursiveFunction();

	if (recursiveFunction(&i) - i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long           *variable;
{
	extern long     i;

	i = *variable;
	if (--counter)
		if (recursiveFunction(&i) - i != 2L)
			statusFlag++;
	return ((*variable)-- + 1);
}
@def_
@def $macro84()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, in conditional expression, pointer
 * to function returning a long
 */
{
	long            increment(), dummy();

	if (dummy(increment, &i) - i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), *variable;
{
	long            dummy();
	i = *variable;
	if (--counter)
		if (dummy(function, &i) - i != 2L)
			statusFlag++;
	return (function((*variable)--));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro85()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, no return value, legal
 */
{
	extern long     i;

	castor(&i);
	if (i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long           *variable;
{
	extern long     i;

	i = *variable;
	if (*variable != 1L)
		statusFlag++;
	if (--counter) {
		i++;
		pollux(&i);
		if (i != 3L)
			statusFlag++;
	}
	(*variable) = 0;
}

pollux(variable)
	long           *variable;
{
	extern long     i;

	i = *variable;
	if (*variable != 2L)
		statusFlag++;
	if (--counter) {
		--i;
		castor(&i);
		if (i != 0L)
			statusFlag++;
	}
	(*variable) = 3;
}
@def_
@def $macro86()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1;
long            result;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, no return value, illegal
 */
{
	result = castor(&i);
	if (i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long           *variable;
{
	i = *variable;
	if (--counter) {
		result = pollux(&i);
		if (i != 2L)
			statusFlag++;
	}
	*variable = 0;
}

pollux(variable)
	long           *variable;
{
	i = *variable;
	if (--counter) {
		result = castor(&i);
		if (i != 0L)
			statusFlag++;
	}
	*variable = 2;
}
@def_
@def $macro87()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, function declared to
 * return a long
 */
{
	long            result = 0, castor();

	i = 1;
	result = castor(&i);
	if (result != 2L || i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long           *variable;
{
	long            result = 0, pollux();

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if (result != ii + 2L)
			statusFlag++;
	}
	return (++(*variable));
}

long
pollux(variable)
	long           *variable;
{
	long            result = 0, castor();

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if (result != iii)
			statusFlag++;
	}
	return (--(*variable) + 2);
}
@def_
@def $macro88()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, pointer to function returning
 * a long
 */
{
	long            result = 0, increment(), castor();

	result = castor(increment, &i);
	if (result != i + 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), *variable;
{
	long            result = 0, pollux();

	ii = *variable + 8;
	if (--counter) {
		result = pollux(function, &ii);
		if (result != ii + 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), *variable;
{
	long            result = 0, castor();

	iii = *variable - 8;
	if (--counter) {
		result = castor(function, &iii);
		if (result != iii + 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long           *variable;
{
	long            i = *variable;

	(*variable)--;
	return (++i);
}
@def_
@def $macro89()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, function declared
 * to return a long
 */
{
	extern long     i;
	long            castor();

	i = 1;
	if (castor(&i) - i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long           *variable;
{
	extern long     ii;
	long            pollux();

	ii = *variable + 3;
	if (--counter) {
		if (pollux(&ii) - ii != 0L)
			statusFlag++;
	}
	return (++(*variable));
}

long
pollux(variable)
	long           *variable;
{
	extern long     iii;
	long            castor();

	iii = *variable - 3;
	if (--counter) {
		if (castor(&iii) - iii != 0L)
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro90()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, pointer to
 * function returning a long
 */
{
	long            increment(), castor();

	if (castor(increment, &i) != i + 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), *variable;
{

	long            pollux();

	ii = *variable + 10;
	if (--counter) {
		if (pollux(function, &ii) != ii + 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), *variable;
{

	long            castor();

	iii = *variable - 10;
	if (--counter) {
		if (castor(function, &iii) != iii + 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long           *variable;
{
	return (--(*variable) + 2);
}
@def_
@def $macro91()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, no return value and legal
 */
{
	i = 1;
	levelOneNodeOne(&i);
	i = 2;
	levelOneNodeTwo(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long           *variable;
{
	*variable = 3;
	levelTwoNodeOne(variable);
	*variable = 4;
	levelTwoNodeTwo(variable);
}

levelOneNodeTwo(variable)
	long           *variable;
{
	*variable = 5;
	levelTwoNodeThree(variable);
	*variable = 6;
	levelTwoNodeFour(variable);
}

levelTwoNodeOne(variable)
	long           *variable;
{
	*variable = 7;
	levelThreeLeafOne(variable);
	*variable = 8;
	levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(variable)
	long           *variable;
{
	*variable = 9;
	levelThreeLeafThree(variable);
	*variable = 10;
	levelThreeLeafFour(variable);
}

levelTwoNodeThree(variable)
	long           *variable;
{
	*variable = 11;
	levelThreeLeafFive(variable);
	*variable = 12;
	levelThreeLeafSix(variable);
}

levelTwoNodeFour(variable)
	long           *variable;
{
	*variable = 13;
	levelThreeLeafSeven(variable);
	*variable = 14;
	levelThreeLeafEight(variable);
}

levelThreeLeafOne(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;

}

levelThreeLeafTwo(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}
@def_
@def $macro92()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            i;
long            result;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, no return value and illegal
 */
{
	i = 1;
	result = levelOneNodeOne(&i);
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long           *variable;
{
	*variable = 3;
	result = levelTwoNodeOne(variable);
	*variable = 4;
	result = levelTwoNodeTwo(variable);
}

levelOneNodeTwo(variable)
	long           *variable;
{
	*variable = 5;
	result = levelTwoNodeThree(variable);
	*variable = 6;
	result = levelTwoNodeFour(variable);
}

levelTwoNodeOne(variable)
	long           *variable;
{
	*variable = 7;
	result = levelThreeLeafOne(variable);
	*variable = 8;
	result = levelThreeLeafTwo(variable);
}

levelTwoNodeTwo(variable)
	long           *variable;
{
	*variable = 9;
	result = levelThreeLeafThree(variable);
	*variable = 10;
	result = levelThreeLeafFour(variable);
}

levelTwoNodeThree(variable)
	long           *variable;
{
	*variable = 11;
	result = levelThreeLeafFive(variable);
	*variable = 12;
	result = levelThreeLeafSix(variable);
}

levelTwoNodeFour(variable)
	long           *variable;
{
	*variable = 13;
	result = levelThreeLeafSeven(variable);
	*variable = 14;
	result = levelThreeLeafEight(variable);
}

levelThreeLeafOne(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long           *variable;
{
	variable = 0;
	if (variable != 0L)
		statusFlag++;
}
@def_
@def $macro93()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            globalLong = 10;
long            i = 1;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, return value and legal, Long
 * function declaration
 */
{
	long            result = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	result = levelOneNodeOne(&i);
	if (result != 1L)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long           *variable;
{
	long            storage = *variable, result = 0;
	long            levelTwoNodeOne(), levelTwoNodeTwo();

	*variable = 3;
	result = levelTwoNodeOne(variable);
	if (result != 3L)
		statusFlag++;
	*variable = 4;
	result = levelTwoNodeTwo(variable);
	if (result != 4L)
		statusFlag++;
	return (storage);
}

long
levelOneNodeTwo(variable)
	long           *variable;
{
	long            storage = *variable, result = 0;
	long            levelTwoNodeThree(), levelTwoNodeFour();

	*variable = 5;
	result = levelTwoNodeThree(variable);
	if (result != 5L)
		statusFlag++;
	*variable = 6;
	result = levelTwoNodeFour(variable);
	if (result != 6L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeOne(variable)
	long           *variable;
{
	long            storage = *variable, result = 0;
	long            levelThreeLeafOne(), levelThreeLeafTwo();

	*variable = 7;
	result = levelThreeLeafOne(variable);
	if (result != 7L)
		statusFlag++;
	*variable = 8;
	result = levelThreeLeafTwo(variable);
	if (result != 8L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeTwo(variable)
	long           *variable;
{
	long            storage = *variable, result = 0;
	long            levelThreeLeafThree(), levelThreeLeafFour();

	*variable = 9;
	result = levelThreeLeafThree(variable);
	if (result != 9L)
		statusFlag++;
	*variable = 10;
	result = levelThreeLeafFour(variable);
	if (result != 10L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeThree(variable)
	long           *variable;
{
	long            storage = *variable, result = 0;
	long            levelThreeLeafFive(), levelThreeLeafSix();

	*variable = 11;
	result = levelThreeLeafFive(variable);
	if (result != 11L)
		statusFlag++;
	*variable = 12;
	result = levelThreeLeafSix(variable);
	if (result != 12L)
		statusFlag++;
	return (storage);
}

long
levelTwoNodeFour(variable)
	long           *variable;
{
	long            storage = *variable, result = 0;
	long            levelThreeLeafSeven(), levelThreeLeafEight();

	*variable = 13;
	result = levelThreeLeafSeven(variable);
	if (result != 13L)
		statusFlag++;
	*variable = 14;
	result = levelThreeLeafEight(variable);
	if (result != 14L)
		statusFlag++;
	return (storage);
}

long
levelThreeLeafOne(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafTwo(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafThree(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafFour(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafFive(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafSix(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafSeven(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}

long
levelThreeLeafEight(variable)
	long           *variable;
{
	long            i = *variable;

	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (i);
}
@def_
@def $macro94()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            globalLong = 10;
long            i = 12;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, return value, legal pointer to
 * function returning a long
 */
{
	long            result = 0, divide4(), dummy1();

	result = dummy1(divide4, &i);
	if (result != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), *Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	Long = &globalLong;
	if (*Long != 10L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long           *Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), *Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	Long = &globalLong;
	if (*Long != 10L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long           *Long;
{
	long            i = *Long;

	(*Long) = 0;
	return (i / 2);
}
@def_
@def $macro95()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            globalLong = 10;
long            i = 1;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, used in conditional expression,
 * Long function declaration
 */
{
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(&i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long           *variable;
{
	long            levelTwoNodeOne();

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	i *= 2;
	return (2 * levelTwoNodeOne(&i));
}

long
levelTwoNodeOne(variable)
	long           *variable;
{
	long            levelThreeLeafOne();

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	i *= 2;
	return (2 * levelThreeLeafOne(&i));
}

long
levelThreeLeafOne(variable)
	long           *variable;
{
	static long     i;

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (2 * i);
}
@def_
@def $macro96()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            globalLong = 10;
long            i = 12;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, in conditional expression, pointer
 * to function returning a long
 */
{
	long            divide4(), dummy1();

	if (dummy1(divide4, &i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), *Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 3L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	long           *Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), *Long;
{
	long            ii;

	if ((ii = (*func) (Long)) != 6L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	long           *Long;
{
	long            i = *Long;

	Long = &globalLong;
	if (*Long != 10L)
		statusFlag++;
	return (i / 2);
}
@def_
@def $macro97()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 10;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, no return value, legal
 */
{
	extern long     i;

	recursiveFunction(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long           *variable;
{
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter)
		recursiveFunction(variable);
}
@def_
@def $macro98()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, legal, Long function
 * declaration
 */
{
	extern long     i;
	long            result = 0;
	long            recursiveFunction();

	result = recursiveFunction(&i);
	if (result != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long           *variable;
{
	long            result = 0;
	extern long     i;
	long            recursiveFunction();

	i = *variable;
	if (--counter) {
		variable = &globalLong;
		if (*variable != 10L)
			statusFlag++;
		result = recursiveFunction(&i);
		if (result != 1L)
			statusFlag++;
	}
	return (i);
}
@def_
@def $macro99()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, pointer to function returning
 * a long
 */
{
	extern long     i;
	long            result = 0, increment(), dummy();

	result = dummy(increment, &i);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), *variable;
{
	long            result, dummy();
	extern long     i;

	i = *variable;
	if (--counter) {
		variable = &globalLong;
		if (*variable != 10L)
			statusFlag++;
		result = dummy(function, &i);
		if (result != 2L)
			statusFlag++;
	}
	return (function(i));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro100()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, function in conditional expression, Long
 * function declaration
 */
{
	long            recursiveFunction();

	if (recursiveFunction(&i) != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long           *variable;
{

	long            recursiveFunction();

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter)
		if (recursiveFunction(&i) != 2L)
			statusFlag++;
	return (i + 1);
}
@def_
@def $macro101()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, in conditional expression, pointer to
 * function returning a long
 */
{
	long            increment(), dummy();
	extern long     i;

	if (dummy(increment, &i) != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), *variable;
{
	extern long     i, dummy();

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter)
		if (dummy(function, &i) != 2L)
			statusFlag++;
	return (function(i));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro102()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, no return value, legal
 */
{
	castor(&i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long           *variable;
{
	i = *variable;
	if (*variable != 1L)
		statusFlag++;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter) {
		i++;
		pollux(&i);
	}
}

pollux(variable)
	long           *variable;
{
	i = *variable;
	if (*variable != 2L)
		statusFlag++;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter) {
		--i;
		castor(&i);
	}
}
@def_
@def $macro103()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1;
long            result;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, no return value, illegal
 */
{
	extern long     i;

	result = castor(&i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long           *variable;
{
	extern long     i;

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter)
		result = pollux(&i);
}

pollux(variable)
	long           *variable;
{
	extern long     i;

	i = *variable;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter)
		result = castor(&i);
}
@def_
@def $macro104()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 2, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, function declared to
 * return a long
 */
{
	extern long     i;
	long            result = 0, castor();

	result = castor(&i);
	if (result != 5L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long           *variable;
{
	extern long     ii;
	long            result = 0, pollux();

	ii = *variable + 3;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter) {
		result = pollux(&ii);
		if (result != 2L)
			statusFlag++;
	}
	return (ii);
}

long
pollux(variable)
	long           *variable;
{
	extern long     iii;
	long            result = 0, castor();

	iii = *variable - 3;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter) {
		result = castor(&iii);
		if (result != 5L)
			statusFlag++;
	}
	return (iii);
}
@def_
@def $macro105()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, return value, pointer to function returning a long
 */
{
	extern long     i;
	long            result = 0, increment();
	long            castor();

	result = castor(increment, &i);
	if (result != 10L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), *variable;
{
	extern long     ii;
	long            result = 0, pollux();

	ii = *variable + 8;
	if (--counter) {
		variable = &globalLong;
		if (*variable != 10L)
			statusFlag++;
		result = pollux(function, &ii);
		if (result != 2L)
			statusFlag++;
	}
	return (function(ii));
}

long
pollux(function, variable)
	long            (*function) (), *variable;
{
	extern long     iii;
	long            result = 0, castor();

	iii = *variable - 8;
	if (--counter) {
		variable = &globalLong;
		if (*variable != 10L)
			statusFlag++;
		result = castor(function, &iii);
		if (result != 10L)
			statusFlag++;
	}
	return (function(iii));
}

long
increment(variable)
	long            variable;
{

	return (++variable);
}
@def_
@def $macro106()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, function declared to
 * return a long
 */
{
	extern long     i;
	long            castor();

	if (castor(&i) != 5L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long           *variable;
{
	extern long     ii;
	long            pollux();

	ii = *variable + 3;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter) {
		if (pollux(&ii) != 2L)
			statusFlag++;
	}
	return (ii + 1);
}

long
pollux(variable)
	long           *variable;
{
	extern long     iii;
	long            castor();

	iii = *variable - 3;
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	if (--counter) {
		if (castor(&iii) != 5L)
			statusFlag++;
	}
	return (iii + 1);
}
@def_
@def $macro107()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            globalLong = 10;
long            i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, pointer to function
 * returning a long
 */
{
	extern long     i;
	long            increment(), castor();

	if (!(castor(increment, &i) == 12L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), *variable;
{
	extern long     ii;
	long            pollux();

	ii = *variable + 10;
	if (--counter) {
		if (!(pollux(function, &ii) == 2L))
			statusFlag++;
	}
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (function(ii));
}

long
pollux(function, variable)
	long            (*function) (), *variable;
{
	extern long     iii;
	long            castor();

	iii = *variable - 10;
	if (--counter) {
		if (!(castor(function, &iii) == 12L))
			statusFlag++;
	}
	variable = &globalLong;
	if (*variable != 10L)
		statusFlag++;
	return (function(iii));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro108()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, no return value and legal
 */
{
	long            i = 0;

	levelOneNodeOne(++i);
	levelOneNodeTwo(++i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	levelTwoNodeOne(variable += 2);
	levelTwoNodeTwo(++variable);
}

levelOneNodeTwo(variable)
	long            variable;
{
	if (variable != 2L)
		statusFlag++;
	levelTwoNodeThree(variable += 3);
	levelTwoNodeFour(++variable);
}

levelTwoNodeOne(variable)
	long            variable;
{
	if (variable != 3L)
		statusFlag++;
	levelThreeLeafOne(variable += 4);
	levelThreeLeafTwo(++variable);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	if (variable != 4L)
		statusFlag++;
	levelThreeLeafThree(variable += 5);
	levelThreeLeafFour(++variable);
}

levelTwoNodeThree(variable)
	long            variable;
{
	if (variable != 5L)
		statusFlag++;
	levelThreeLeafFive(variable += 6);
	levelThreeLeafSix(++variable);
}

levelTwoNodeFour(variable)
	long            variable;
{
	if (variable != 6L)
		statusFlag++;
	levelThreeLeafSeven(variable += 7);
	levelThreeLeafEight(++variable);
}

levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
}
@def_
@def $macro109()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            result;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, no return value and illegal
 */
{
	long            i = 0;

	result = levelOneNodeOne(++i);
	result = levelOneNodeTwo(++i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	result = levelTwoNodeOne(variable += 2);
	result = levelTwoNodeTwo(++variable);
}

levelOneNodeTwo(variable)
	long            variable;
{
	if (variable != 2L)
		statusFlag++;
	result = levelTwoNodeThree(variable += 3);
	result = levelTwoNodeFour(++variable);
}

levelTwoNodeOne(variable)
	long            variable;
{
	if (variable != 3L)
		statusFlag++;
	result = levelThreeLeafOne(variable += 4);
	result = levelThreeLeafTwo(++variable);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	if (variable != 4L)
		statusFlag++;
	result = levelThreeLeafThree(variable += 5);
	result = levelThreeLeafFour(++variable);
}

levelTwoNodeThree(variable)
	long            variable;
{
	if (variable != 5L)
		statusFlag++;
	result = levelThreeLeafFive(variable += 6);
	result = levelThreeLeafSix(++variable);
}

levelTwoNodeFour(variable)
	long            variable;
{
	if (variable != 6L)
		statusFlag++;
	result = levelThreeLeafSeven(variable += 7);
	result = levelThreeLeafEight(++variable);
}

levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
	return;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
	return;
}

levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
	return;
}

levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
	return;
}

levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
	return;
}

levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
	return;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
	return;
}

levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
	return;
}
@def_
@def $macro110()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : linear tree structure, return value, legal pointer to
 * function returning a long
 */
{
	long            i = 3, divide4(), dummy1();

	i = dummy1(divide4, i *= 4);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i;

	i = (*func) (Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro111()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, used in conditional expression,
 * Long function declaration
 */
{
	long            i = 0, levelOneNodeOne();

	if (!(levelOneNodeOne(++i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            levelTwoNodeOne();

	return (2 * levelTwoNodeOne(2 * variable));
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            levelThreeLeafOne();

	return (2 * levelThreeLeafOne(2 * variable));
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable);
}
@def_
@def $macro112()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : linear tree structure, in conditional expression, pointer
 * to function returning a long
 */
{
	long            i = 3, divide4(), dummy1();

	if (dummy1(divide4, 4 * i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            ii;

	if ((ii = (*func) (Long * 2 / 2)) != 3L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            ii;

	if ((ii = (*func) (Long * 2 / 2)) != 6L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro113()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, no return value, legal
 */
{
	long            i = 0;

	recursiveFunction(++i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		recursiveFunction(variable * 3 / 3);
}
@def_
@def $macro114()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            result;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, no return value, illegal
 */
{
	long            i = 1;

	result = recursiveFunction(i % 10);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		result = recursiveFunction(variable % 100);
	return;
}
@def_
@def $macro115()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, return value, legal, Long function
 * declaration
 */
{
	long            i = 0;
	long            recursiveFunction();

	i = recursiveFunction(i + 1);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{
	long            result;
	long            recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable * 2 / 2);
		if (result != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro116()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, return value, pointer to function returning
 * a long
 */
{
	long            i = 0, increment(), dummy();

	i = dummy(increment, ++i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            result, dummy();

	if (--counter) {
		result = dummy(function, 1 * variable);
		if (result != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro117()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, function in conditional expression, Long
 * function declaration
 */
{
	long            recursiveFunction();
	long            i = 0;

	if (recursiveFunction(i + 1) - i != 0L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	long            variable;
{

	long            recursiveFunction();

	if (--counter)
		if (recursiveFunction(variable + 1) - variable != 0L)
			statusFlag++;
	return (--variable);
}
@def_
@def $macro118()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, in conditional expression, pointer to
 * function returning a long
 */
{
	long            increment();
	long            i = 1, dummy();

	if (!(dummy(increment, 2 * i / 2) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            dummy();
	if (--counter)
		if (!(dummy(function, 2 * variable / 2) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro119()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, no return value, legal
 */
{
	long            i = 1;

	castor(++i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	if (variable != 2L)
		statusFlag++;
	if (--counter) {
		pollux(--variable);
	}
}

pollux(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		castor(++variable);
	}
}
@def_
@def $macro120()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, no return value, illegal
 */
{
	long            i = 0;

	i = castor(++i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	long            variable;
{
	long            ii;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		ii = pollux(--variable);
		if (ii == 0L)
			ii++;
	}
}

pollux(variable)
	long            variable;
{
	long            iii;

	if (variable != 0L)
		statusFlag++;
	if (--counter) {
		iii = castor(++variable);
		if (iii == 0L)
			iii++;
	}
}
@def_
@def $macro121()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, return value, legal, function declared to return a
 * long
 */
{
	long            i = 0, castor();

	i = castor(++i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            ii = 0, pollux();

	if (--counter) {
		ii = pollux(variable + 3);
		if (ii != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            iii = 0, castor();

	if (--counter) {
		iii = castor(variable - 3);
		if (iii != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro122()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, return value, pointer to function returning a long
 */
{
	long            i = 0, increment(), castor();

	i = castor(increment, ++i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = 0, pollux();
	if (--counter) {
		ii = pollux(function, variable + 8);
		if (ii != 10L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = 0, castor();
	if (--counter) {
		iii = castor(function, variable - 8);
		if (iii != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro123()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, in conditional expression, function declared to
 * return a long
 */
{
	long            i = 0, castor();

	if (!(castor(++i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            pollux();

	if (--counter) {
		if (!(pollux(variable + 3) == 5L))
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	if (--counter) {
		if (!(castor(variable - 3) == 2L))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro124()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, in conditional expression, pointer to function
 * returning a long
 */
{
	long            i = 100, increment(), castor();

	if (!(castor(increment, i - 99) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{

	long            pollux();

	if (--counter) {
		if (!(pollux(function, variable + 10) == 12L))
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{

	long            castor();

	if (--counter) {
		if (!(castor(function, variable - 10) == 2L))
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro125()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            result;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, no return value and illegal
 */
{
	unsigned        i = 0;

	result = levelOneNodeOne(++i);
	result = levelOneNodeTwo(++i);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	unsigned        variable;
{
	if (variable != 1L)
		statusFlag++;
	result = levelTwoNodeOne(variable += 2);
	result = levelTwoNodeTwo(++variable);
}

levelOneNodeTwo(variable)
	unsigned        variable;
{
	if (variable != 2L)
		statusFlag++;
	result = levelTwoNodeThree(variable += 3);
	result = levelTwoNodeFour(++variable);
}

levelTwoNodeOne(variable)
	unsigned        variable;
{
	if (variable != 3L)
		statusFlag++;
	result = levelThreeLeafOne(variable += 4);
	result = levelThreeLeafTwo(++variable);
}

levelTwoNodeTwo(variable)
	unsigned        variable;
{
	if (variable != 4L)
		statusFlag++;
	result = levelThreeLeafThree(variable += 5);
	result = levelThreeLeafFour(++variable);
}

levelTwoNodeThree(variable)
	unsigned        variable;
{
	if (variable != 5L)
		statusFlag++;
	result = levelThreeLeafFive(variable += 6);
	result = levelThreeLeafSix(++variable);
}

levelTwoNodeFour(variable)
	unsigned        variable;
{
	if (variable != 6L)
		statusFlag++;
	result = levelThreeLeafSeven(variable += 7);
	result = levelThreeLeafEight(++variable);
}

levelThreeLeafOne(variable)
	unsigned        variable;
{
	if (variable != 7L)
		statusFlag++;
	return;
}

levelThreeLeafTwo(variable)
	unsigned        variable;
{
	if (variable != 8L)
		statusFlag++;
	return;
}

levelThreeLeafThree(variable)
	unsigned        variable;
{
	if (variable != 9L)
		statusFlag++;
	return;
}

levelThreeLeafFour(variable)
	unsigned        variable;
{
	if (variable != 10L)
		statusFlag++;
	return;
}

levelThreeLeafFive(variable)
	unsigned        variable;
{
	if (variable != 11L)
		statusFlag++;
	return;
}

levelThreeLeafSix(variable)
	unsigned        variable;
{
	if (variable != 12L)
		statusFlag++;
	return;
}

levelThreeLeafSeven(variable)
	unsigned        variable;
{
	if (variable != 13L)
		statusFlag++;
	return;
}

levelThreeLeafEight(variable)
	unsigned        variable;
{
	if (variable != 14L)
		statusFlag++;
	return;
}
@def_
@def $macro126()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, return value, legal pointer to
 * function returning a long
 */
{
	unsigned        i = 3, divide4();
	long            dummy1();

	i = dummy1(divide4, i *= 4);
	if (i != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	unsigned        (*func) ();
unsigned        Long;
{
	long            i = (long) Long;

	i = (*func) (i % 100);
	if (i != 3L)
		statusFlag++;
	return (i);
}

unsigned
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, (unsigned) Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) ();
unsigned        Long;
{
	long            i;

	i = (*func) ((long) Long);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro127()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, used in conditional expression,
 * Long function declaration
 */
{
	unsigned        i = 0;
	long            levelOneNodeOne();

	if (!(levelOneNodeOne(++i) == 32L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	unsigned        variable;
{
	long            levelTwoNodeOne();

	return (2 * levelTwoNodeOne(2 * variable));
}

long
levelTwoNodeOne(variable)
	unsigned        variable;
{
	long            levelThreeLeafOne();

	return (2 * levelThreeLeafOne(2 * variable));
}

long
levelThreeLeafOne(variable)
	unsigned        variable;
{
	return (2 * variable);
}
@def_
@def $macro128()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, in conditional expression, pointer
 * to function returning a long
 */
{
	unsigned        i = 3;
	long            divide4(), dummy1();

	if (dummy1(divide4, 4 * i) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) ();
unsigned        Long;
{
	long            ii;

	if ((ii = (*func) (Long * 2 / 2)) != 3L)
		statusFlag++;
	return (ii);
}

long
divide4(Long)
	unsigned        Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) ();
unsigned        Long;
{
	long            ii;

	if ((ii = (*func) (Long * 2 / 2)) != 6L)
		statusFlag++;
	return (ii);
}

long
divide2(Long)
	unsigned        Long;
{
	return (Long / 2);
}
@def_
@def $macro129()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
long            result;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, no return value, illegal
 */
{
	unsigned        i = 1;

	result = recursiveFunction(i % 10);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	unsigned        variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter)
		result = recursiveFunction(variable % 100);
	return;
}
@def_
@def $macro130()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, return value, legal, Long function
 * declaration
 */
{
	unsigned        i = 0;
	long            recursiveFunction();

	i = recursiveFunction(i + 1);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	unsigned        variable;
{
	long            result;
	long            recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable * 2 / 2);
		if (result != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro131()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, return value, pointer to function
 * returning a long
 */
{
	unsigned        i = 0, increment();
	long            dummy();

	i = dummy(increment, ++i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	unsigned        (*function) (), variable;
{
	long            result, dummy();

	if (--counter) {
		result = dummy(function, 1 * variable);
		if (result != 2L)
			statusFlag++;
	}
	return (function(variable));
}

unsigned
increment(variable)
	unsigned        variable;
{
	return (++variable);
}
@def_
@def $macro132()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, function in conditional expression, Long
 * function declaration
 */
{
	long            recursiveFunction();
	unsigned        i = 0;

	if (recursiveFunction(i + 1) - i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable)
	unsigned        variable;
{
	if (--counter)
		if (recursiveFunction(variable + 1) - variable != 2L)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro133()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, in conditional expression, pointer to
 * function returning a long
 */
{
	long            increment(), dummy();
	char            i = 1;

	if (!(dummy(increment, 2 * i / 2) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) ();
char            variable;
{
	long            dummy();
	if (--counter)
		if (!(dummy(function, 2 * variable / 2) == 2L))
			statusFlag++;
	return (function(variable));
}

long
increment(variable)
	char            variable;
{
	return (++variable);
}
@def_
@def $macro134()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, no return value, legal
 */
{
	unsigned        i = 1;

	castor(++i);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	unsigned        variable;
{
	if (variable != 2L)
		statusFlag++;
	if (--counter) {
		pollux(--variable);
	}
}

pollux(variable)
	unsigned        variable;
{
	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		castor(++variable);
	}
}
@def_
@def $macro135()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, no return value, illegal
 */
{
	unsigned        i = 0;

	i = castor(++i);
	if (i == 0L)
		i++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	unsigned        variable;
{
	long            ii;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		ii = pollux(--variable);
		if (ii == 0L)
			ii++;
	}
}

pollux(variable)
	unsigned        variable;
{
	long            iii;

	if (variable != 0L)
		statusFlag++;
	if (--counter) {
		iii = castor(++variable);
		if (iii == 0L)
			iii++;
	}
}
@def_
@def $macro136()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, return value, legal, function declared to return
 * a long
 */
{
	long            i = 0, castor();

	i = castor((unsigned) ++i);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	unsigned        variable;
{
	long            ii = 0, pollux();

	if (--counter) {
		ii = pollux(variable + 3);
		if (ii != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	unsigned        variable;
{
	long            iii = 0, castor();

	if (--counter) {
		iii = castor(variable - 3);
		if (iii != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro137()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, in conditional expression, function declared to
 * return a long
 */
{
	long            i = 0;
	long            castor();

	if (!(castor(++i) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            pollux();

	if (--counter) {
		if (!(pollux(variable + 3) == 5L))
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	long            castor();

	if (--counter) {
		if (!(castor(variable - 3) == 2L))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro138()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, in conditional expression, pointer to function
 * returning a long
 */
{
	unsigned        i = 100, increment();
	long            castor();

	if (!(castor(increment, i - 99) == 2L))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	unsigned        (*function) (), variable;
{
	long            pollux();
	if (--counter) {
		if (!(pollux(function, variable + 10) == 12L))
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	unsigned        (*function) (), variable;
{
	long            castor();
	if (--counter) {
		if (!(castor(function, variable - 10) == 2L))
			statusFlag++;
	}
	return (function(variable));
}

unsigned
increment(variable)
	unsigned        variable;
{
	return (++variable);
}
@def_
@def $macro139()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, no return value and
 * legal
 */
{
	long            i = 0, j = -1, k = 1;

	levelOneNodeOne(i - 2 * j + (-k));
	levelOneNodeTwo((i + j) * j + k);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	levelTwoNodeOne((variable == variable) * 2 + variable);
	levelTwoNodeTwo((variable != 2 * variable) * 3 + variable);
}

levelOneNodeTwo(variable)
	long            variable;
{
	long            i = variable + 2;
	if (variable != 2L)
		statusFlag++;
	levelTwoNodeThree((i + variable) / 2 + (!i != i) * 2);
	levelTwoNodeFour((i + variable + 2) / 2 - variable + i);
}

levelTwoNodeOne(variable)
	long            variable;
{
	long            i = variable * 2;
	if (variable != 3L)
		statusFlag++;
	levelThreeLeafOne((i += 8) / 2);
	levelThreeLeafTwo(variable + (i - 8) / variable + 3);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	long            i = variable;
	if (variable != 4L)
		statusFlag++;
	levelThreeLeafThree((i++ + 2 * variable) / variable + 2 * (variable + 2) / 2);
	levelThreeLeafFour(2 * (variable + 3) - i + 1);
}

levelTwoNodeThree(variable)
	long            variable;
{
	long            i = variable--;
	if (variable != 4L)
		statusFlag++;
	levelThreeLeafFive((i + variable-- + 3) / 2 + 5);
	levelThreeLeafSix((i - variable) * 3 + 2 * i - variable - 1);
}

levelTwoNodeFour(variable)
	long            variable;
{
	long            i = variable / 2 - 1;
	if (variable != 6L)
		statusFlag++;
	levelThreeLeafSeven(variable + i * (variable - i) - 1);
	levelThreeLeafEight(i * (2 * variable - i) - variable);
}

levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
}

levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
}

levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
}

levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
}

levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
}

levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
}
@def_
@def $macro140()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
long            result;

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, no return value and
 * illegal
 */
{
	long            i = 0, j = -1, k = 1;

	result = levelOneNodeOne(i - 2 * j + (-k));
	result = levelOneNodeTwo((i + j) * j + k);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	long            variable;
{
	if (variable != 1L)
		statusFlag++;
	result = levelTwoNodeOne((variable == variable) * 2 + variable);
	result = levelTwoNodeTwo((variable != 2 * variable) * 3 + variable);
}

levelOneNodeTwo(variable)
	long            variable;
{
	long            i = variable + 2;

	if (variable != 2L)
		statusFlag++;
	result = levelTwoNodeThree((i + variable) / 2 + (!i != i) * 2);
	result = levelTwoNodeFour((i + variable + 2) / 2 - variable + i);
}

levelTwoNodeOne(variable)
	long            variable;
{
	long            i = variable * 2;

	if (variable != 3L)
		statusFlag++;
	result = levelThreeLeafOne((i += 8) / 2);
	result = levelThreeLeafTwo(variable + (i - 8) / variable + 3);
}

levelTwoNodeTwo(variable)
	long            variable;
{
	long            i = variable;

	if (variable != 4L)
		statusFlag++;
	result = levelThreeLeafThree((i++ + 2 * variable) / variable + 2 * (variable + 2) / 2);
	result = levelThreeLeafFour(2 * (variable + 3) - i + 1);
}

levelTwoNodeThree(variable)
	long            variable;
{
	long            i = variable--;

	if (variable != 4L)
		statusFlag++;
	result = levelThreeLeafFive((i + variable-- + 3) / 2 + 5);
	result = levelThreeLeafSix((i - variable) * 3 + 2 * i - variable - 1);
}

levelTwoNodeFour(variable)
	long            variable;
{
	long            i = variable / 2 - 1;

	if (variable != 6L)
		statusFlag++;
	result = levelThreeLeafSeven(variable + i * (variable - i) - 1);
	result = levelThreeLeafEight(i * (2 * variable - i) - variable);
}

levelThreeLeafOne(variable)
	long            variable;
{
	if (variable != 7L)
		statusFlag++;
	return;
}

levelThreeLeafTwo(variable)
	long            variable;
{
	if (variable != 8L)
		statusFlag++;
	return;
}

levelThreeLeafThree(variable)
	long            variable;
{
	if (variable != 9L)
		statusFlag++;
	return;
}

levelThreeLeafFour(variable)
	long            variable;
{
	if (variable != 10L)
		statusFlag++;
	return;
}

levelThreeLeafFive(variable)
	long            variable;
{
	if (variable != 11L)
		statusFlag++;
	return;
}

levelThreeLeafSix(variable)
	long            variable;
{
	if (variable != 12L)
		statusFlag++;
	return;
}

levelThreeLeafSeven(variable)
	long            variable;
{
	if (variable != 13L)
		statusFlag++;
	return;
}

levelThreeLeafEight(variable)
	long            variable;
{
	if (variable != 14L)
		statusFlag++;
	return;
}
@def_
@def $macro141()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, return value and
 * legal, Long function declaration
 */
{
	long            i = 0, j = -1, k = 1;
	long            result = 0;
	long            levelOneNodeOne(), levelOneNodeTwo();

	result = levelOneNodeOne(i - 2 * j + (-k));
	if (result != 1L)
		statusFlag++;
	result = levelOneNodeTwo((i + j) * j + k);
	if (result != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            result = 0;
	long            levelTwoNodeOne(), levelTwoNodeTwo();
	result = levelTwoNodeOne((variable == variable) * 2 + variable);
	if (result != 3L)
		statusFlag++;
	result = levelTwoNodeTwo((variable != 2 * variable) * 3 + variable);
	if (result != 4L)
		statusFlag++;
	return (variable);
}

long
levelOneNodeTwo(variable)
	long            variable;
{
	long            i = variable + 2;
	long            result = 0;
	long            levelTwoNodeThree(), levelTwoNodeFour();
	result = levelTwoNodeThree((i + variable) / 2 + (!i != i) * 2);
	if (result != 5L)
		statusFlag++;
	result = levelTwoNodeFour((i + variable + 2) / 2 - variable + i);
	if (result != 6L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            i = variable * 2;
	long            result = 0;
	long            levelThreeLeafOne(), levelThreeLeafTwo();
	result = levelThreeLeafOne((i += 8) / 2);
	if (result != 7L)
		statusFlag++;
	result = levelThreeLeafTwo(variable + (i - 8) / variable + 3);
	if (result != 8L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeTwo(variable)
	long            variable;
{
	long            i = variable;
	long            result = 0;
	long            levelThreeLeafThree(), levelThreeLeafFour();
	result = levelThreeLeafThree((i++ + 2 * variable) / variable + 2 * (variable + 2) / 2);
	if (result != 9L)
		statusFlag++;
	result = levelThreeLeafFour(2 * (variable + 3) - i + 1);
	if (result != 10L)
		statusFlag++;
	return (variable);
}

long
levelTwoNodeThree(variable)
	long            variable;
{
	long            i = variable--;
	long            result = 0;
	long            levelThreeLeafFive(), levelThreeLeafSix();
	result = levelThreeLeafFive((i + variable-- + 3) / 2 + 5);
	if (result != 11L)
		statusFlag++;
	result = levelThreeLeafSix((i - variable) * 3 + 2 * i - variable - 1);
	if (result != 12L)
		statusFlag++;
	return (i);
}

long
levelTwoNodeFour(variable)
	long            variable;
{
	long            i = variable / 2 - 1;
	long            result = 0;
	long            levelThreeLeafSeven(), levelThreeLeafEight();
	result = levelThreeLeafSeven(variable + i * (variable - i) - 1);
	if (result != 13L)
		statusFlag++;
	result = levelThreeLeafEight(i * (2 * variable - i) - variable);
	if (result != 14L)
		statusFlag++;
	return (variable);
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafTwo(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafThree(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafFour(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafFive(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafSix(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafSeven(variable)
	long            variable;
{
	return (variable);
}

long
levelThreeLeafEight(variable)
	long            variable;
{
	return (variable);
}
@def_
@def $macro142()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, return value, legal
 * pointer to function returning a long
 */
{
	long            i = 3;
	long            divide4(), result = 0, dummy1();

	result = dummy1(divide4, ((i == 3) * i - 1) * i * (i - 1));
	if (result != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i = Long--;

	i = (*func) ((-1 + ++i + ++Long) / 2);
	if (i != 3L)
		statusFlag++;
	return (i);
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i = Long++;

	i = (*func) ((-1 - --i - --Long) / -2);
	if (i != 6L)
		statusFlag++;
	return (i);
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro143()
$LICENSE()
$HEAD()

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, used in conditional
 * expression, Long function declaration
 */
{
	long            i = 1, levelOneNodeOne();
	short           counter = 0;

	while (levelOneNodeOne(i * (i + 1) * (i + 2) * (i + 3) - (i + 4) * (i + 3) - (i + 2)) != 32L)
		counter++;
	if (!counter)
		printok();
	else
		printno();
	return (0);
}

long
levelOneNodeOne(variable)
	long            variable;
{
	long            levelTwoNodeOne();

	return (2 * levelTwoNodeOne(2 * variable));
}

long
levelTwoNodeOne(variable)
	long            variable;
{
	long            levelThreeLeafOne();

	return (2 * levelThreeLeafOne(2 * variable));
}

long
levelThreeLeafOne(variable)
	long            variable;
{
	return (2 * variable);
}
@def_
@def $macro144()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, in conditional
 * expression, pointer to function returning a long
 */
{
	long            i = 2, divide4(), dummy1();

	if (dummy1(divide4, (i - 1 << 3) + (i << 1)) != 3L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy1(func, Long)
	long            (*func) (), Long;
{
	long            i = Long % 3;

	return ((*func) ((Long + i) * (2 + i) / (2 - i)));
}

long
divide4(Long)
	long            Long;
{
	long            divide2(), dummy2();

	return (dummy2(divide2, Long) / 2);
}

long
dummy2(func, Long)
	long            (*func) (), Long;
{
	long            i = Long + 1;

	return ((*func) ((i + ++Long) / 2 - 1));
}

long
divide2(Long)
	long            Long;
{
	return (Long / 2);
}
@def_
@def $macro145()
$LICENSE()
$HEAD()

#ifndef TimeLimit
#define TimeLimit 10
#endif

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, no return value, legal
 */
{
	long            i = 0;
	long            counter = TimeLimit;

	recursiveFunction(i + 1 & i + 1, counter == TimeLimit ? counter : TimeLimit);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable, counter)
	long            variable, counter;
{
	if (variable + counter != 11L)
		statusFlag++;
	if (counter)
		recursiveFunction(variable > TimeLimit * 2 ? --variable : ++variable,
				  counter ? --counter : ++counter);
}
@def_
@def $macro146()
$LICENSE()
$HEAD()

#ifndef TimeLimit
#define TimeLimit 10
#endif

short           statusFlag = NoMistake;
long            result;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, no return value, illegal
 */
{
	long            i = 0;
	long            counter = TimeLimit;

	result = recursiveFunction(i + 1 & i + 1, counter == TimeLimit ? counter : TimeLimit);
	if (result == 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable, counter)
	long            variable, counter;
{
	if (variable + counter != 11L)
		statusFlag++;
	if (counter)
		result = recursiveFunction(variable > TimeLimit * 2 ? --variable : ++variable,
					   counter ? --counter : ++counter);
}
@def_
@def $macro147()
$LICENSE()
$HEAD()

#ifndef TimeLimit
#define TimeLimit 10
#endif

short           statusFlag = NoMistake;
long            recursiveFunction();

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, return value, Long function
 * declaration
 */
{
	long            i = 0, result = 0;
	long            counter = TimeLimit;
	long            recursiveFunction();

	result = recursiveFunction(i + 1 & i + 1, counter == TimeLimit ? counter : TimeLimit);
	if (result != 12L - counter)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable, counter)
	long            variable, counter;
{
	long            result = 0;
	long            storage = variable + 1;
	long            recursiveFunction();

	if (counter) {
		result = recursiveFunction(variable > TimeLimit * 2 ? --variable : ++variable,
					   counter ? --counter : ++counter);
		if (result != 12L - counter)
			statusFlag++;
	}
	return (storage);
}
@def_
@def $macro148()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, return value, pointer to
 * function returning a long
 */
{
	long            i = 0, increment(), dummy();
	long            counter = TimeLimit;

	i = dummy(increment, i == 0 ? 3 % (i + 2) : 5 % i, counter);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable, counter)
	long            (*function) (), variable, counter;
{
	long            result = 0;
	long            storage = variable, dummy();

	if (--counter) {
		result = dummy(function, (storage + ++variable + 1) / 2 - 1, counter);
		if (result != 2L)
			statusFlag++;
	}
	return (function(storage));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro149()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, function in conditional
 * expression, Long function declaration
 */
{
	long            recursiveFunction();
	long            i = -1;
	long            counter = TimeLimit;

	if (recursiveFunction((1 - i) / 2, counter) + i != 1L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
recursiveFunction(variable, counter)
	long            variable, counter;
{
	long            storage = variable;

	if (--counter)
		if (recursiveFunction((storage + --variable - 3) / 2 + 2, counter)
		    - storage != 1L)
			statusFlag++;
	return (++storage);
}
@def_
@def $macro150()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, in conditional expression,
 * pointer to function returning a long
 */
{
	long            increment();
	long            i = 2, j = 1, dummy();

	if (dummy(increment, (long) (j + i * j >= 10 || i - j > 0)) != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
dummy(function, variable)
	long            (*function) (), variable;
{
	long            storage = variable, dummy();

	if (--counter)
		if (dummy(function, (long) ((++variable - 1 == 0) + 1)) != 2L)
			statusFlag++;
	return (function(storage));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro151()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, no return value, legal
 */
{
	long            i = 1, j = 2;
	long            counter = TimeLimit;

	castor((i & i == i | i) + (j != i), counter);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable, counter)
	long            variable, counter;
{
	long            i = 1, j = 2;

	if (variable != 2L)
		statusFlag++;
	if (--counter) {
		pollux((i & i == i) + (j == i), counter);
	}
}

pollux(variable, counter)
	long            variable, counter;
{
	long            i = 1, j = 2;

	if (variable != 1L)
		statusFlag++;
	if (--counter) {
		castor((i & i == i & i) + (j != i), counter);
	}
}
@def_
@def $macro152()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif
long            result;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, no return value, illegal
 */
{
	long            i = 1, j = 2;
	long            counter = TimeLimit;

	result = castor((i & i == i | i) + (j != i), counter);
	if (result != 0L)
		result++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable, counter)
	long            variable, counter;
{
	long            i = 1, j = 2;

	if (variable != 2L)
		statusFlag++;
	if (--counter)
		result = pollux((i & i == i) + (j == i), counter);
}

pollux(variable, counter)
	long            variable, counter;
{
	long            i = 1, j = 2;

	if (variable != 1L)
		statusFlag++;
	if (--counter)
		result = castor((i & i == i & i) + (j != i), counter);
}
@def_
@def $macro153()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, return value, pointer to function
 * returning a long
 */
{
	long            i = 0, increment(), castor();

	i = castor(increment, i == 1 ? i : 1);
	if (i != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            ii = 0, pollux();

	if (--counter) {
		ii = pollux(function, variable + 2 * (ii + 2) * (variable + 1));
		if (ii != 10L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            iii = 0, castor();

	if (--counter) {
		iii = castor(function, variable - 2 * (iii + 2) * (11 - variable));
		if (iii != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro154()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, in conditional expression, function
 * declared to return a long
 */
{
	long            i = 0;
	long            castor();

	if (castor(++i && ++i ? --i : i + 2) != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(variable)
	long            variable;
{
	long            pollux();
	if (--counter) {
		if (pollux(2 * variable + 2 / variable) != 5L)
			statusFlag++;
	}
	return (++variable);
}

long
pollux(variable)
	long            variable;
{
	if (--counter) {
		if (castor(2 * variable - 7) != 2L)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro155()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, in conditional expression, pointer to
 * function returning a long
 */
{
	long            i = 1, increment(), castor();

	if (castor(increment, (long) ((i << 1 | i) == i + 2)) != 2L)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

long
castor(function, variable)
	long            (*function) (), variable;
{
	long            pollux();
	if (--counter) {
		if (pollux(function, (long) ((variable + 2) * 3 + variable * 2)) != 12L)
			statusFlag++;
	}
	return (function(variable));
}

long
pollux(function, variable)
	long            (*function) (), variable;
{
	long            castor();
	if (--counter) {
		if (castor(function, (long) ((variable - 1) / 5 >> 1)) != 2L)
			statusFlag++;
	}
	return (function(variable));
}

long
increment(variable)
	long            variable;
{
	return (++variable);
}
@def_
@def $macro156()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i, i11, i12, i21, i22, i23, i24;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, return value and legal, no function declaration
 */
{
	extern short    i;
	short           result = 0;

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i11;

	i11 = 3;
	result = levelTwoNodeOne(&i11);
	if (result != 3)
		statusFlag++;
	i11 = 4;
	result = levelTwoNodeTwo(&i11);
	if (result != 4)
		statusFlag++;
	return (*argument);
}

levelOneNodeTwo(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i12;

	i12 = 5;
	result = levelTwoNodeThree(&i12);
	if (result != 5)
		statusFlag++;
	i12 = 6;
	result = levelTwoNodeFour(&i12);
	if (result != 6)
		statusFlag++;
	return (*argument);
}

levelTwoNodeOne(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i21;

	i21 = 7;
	result = levelThreeLeafOne(&i21);
	if (result != 7)
		statusFlag++;
	i21 = 8;
	result = levelThreeLeafTwo(&i21);
	if (result != 8)
		statusFlag++;
	return (*argument);
}

levelTwoNodeTwo(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i22;

	i22 = 9;
	result = levelThreeLeafThree(&i22);
	if (result != 9)
		statusFlag++;
	i22 = 10;
	result = levelThreeLeafFour(&i22);
	if (result != 10)
		statusFlag++;
	return (*argument);
}

levelTwoNodeThree(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i23;

	i23 = 11;
	result = levelThreeLeafFive(&i23);
	if (result != 11)
		statusFlag++;
	i23 = 12;
	result = levelThreeLeafSix(&i23);
	if (result != 12)
		statusFlag++;
	return (*argument);
}

levelTwoNodeFour(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i24;

	i24 = 13;
	result = levelThreeLeafSeven(&i24);
	if (result != 13)
		statusFlag++;
	i24 = 14;
	result = levelThreeLeafEight(&i24);
	if (result != 14)
		statusFlag++;
	return (*argument);
}

levelThreeLeafOne(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafTwo(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafThree(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafFour(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafFive(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafSix(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafSeven(argument)
	short          *argument;
{
	return (*argument);
}

levelThreeLeafEight(argument)
	short          *argument;
{
	return (*argument);
}
@def_
@def $macro157()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i, i11, i12, i21, i22, i23, i24;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, return value and legal, integer function
 * declaration
 */
{
	extern short    i;
	short           result = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i11;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	i11 = 3;
	result = levelTwoNodeOne(&i11);
	if (result != 3)
		statusFlag++;
	i11 = 4;
	result = levelTwoNodeTwo(&i11);
	if (result != 4)
		statusFlag++;
	return (*argument);
}

short
levelOneNodeTwo(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i12;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	i12 = 5;
	result = levelTwoNodeThree(&i12);
	if (result != 5)
		statusFlag++;
	i12 = 6;
	result = levelTwoNodeFour(&i12);
	if (result != 6)
		statusFlag++;
	return (*argument);
}

short
levelTwoNodeOne(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i21;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	i21 = 7;
	result = levelThreeLeafOne(&i21);
	if (result != 7)
		statusFlag++;
	i21 = 8;
	result = levelThreeLeafTwo(&i21);
	if (result != 8)
		statusFlag++;
	return (*argument);
}

short
levelTwoNodeTwo(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i22;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	i22 = 9;
	result = levelThreeLeafThree(&i22);
	if (result != 9)
		statusFlag++;
	i22 = 10;
	result = levelThreeLeafFour(&i22);
	if (result != 10)
		statusFlag++;
	return (*argument);
}

short
levelTwoNodeThree(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i23;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	i23 = 11;
	result = levelThreeLeafFive(&i23);
	if (result != 11)
		statusFlag++;
	i23 = 12;
	result = levelThreeLeafSix(&i23);
	if (result != 12)
		statusFlag++;
	return (*argument);
}

short
levelTwoNodeFour(argument)
	short          *argument;
{
	short           result = 0;
	extern short    i24;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	i24 = 13;
	result = levelThreeLeafSeven(&i24);
	if (result != 13)
		statusFlag++;
	i24 = 14;
	result = levelThreeLeafEight(&i24);
	if (result != 14)
		statusFlag++;
	return (*argument);
}

short
levelThreeLeafOne(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafTwo(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafThree(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafFour(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafFive(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafSix(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafSeven(argument)
	short          *argument;
{
	return (*argument);
}

short
levelThreeLeafEight(argument)
	short          *argument;
{
	return (*argument);
}
@def_
@def $macro158()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;
short           i;

main()
/*
 * test class: extern variable address instance  : linear tree structure, return value and legal, function declared to
 * return a pointer to character
 */
{
	char           *s, *levelOne();
	extern short    i;

	i = 1;
	s = levelOne(&i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short          *variable;
{
	char           *s1, *s2, *levelTwo();
	short           j;

	if (*variable != 1)
		statusFlag++;
	for (s1 = numbers, j = 0; j < *variable; j++, s1++);
	(*variable)++;
	s2 = levelTwo(variable);
	if (*s2 != '2')
		statusFlag++;
	return (s1);
}

char           *
levelTwo(variable)
	short          *variable;
{
	char           *s1, *s2, *levelThree();
	short           k;

	if (*variable != 2)
		statusFlag++;
	for (s1 = numbers, k = 0; k < *variable; k++, s1++);
	(*variable)++;
	s2 = levelThree(variable);
	if (*s2 != '3')
		statusFlag++;
	return (s1);
}

char           *
levelThree(variable)
	short          *variable;
{
	char           *s;
	short           l;

	if (*variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < *variable; l++, s++);
	return (s);
}
@def_
@def $macro159()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i = 12;

main()
/*
 * test class: extern variable address instance  : linear tree structure, return value, legal pointer to function returning
 * an integer
 */
{
	extern short    i;
	short           result = 0, divide4();

	result = dummy1(divide4, &i);
	if (result != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), *integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short          *integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), *integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short          *integer;
{
	return (*integer / 2);
}
@def_
@def $macro160()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i, j, ii, jj, iii, jjj, iiii, jjjj, iiiii, jjjjj, iiiiii, jjjjjj, iiiiiii, jjjjjjj;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, used in conditional expression, no function
 * declaration
 */
{
	extern short    i, j;

	i = 1;
	j = i++;
	if (!(levelOneNodeOne(&j) + levelOneNodeTwo(&i) == 44))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short          *variable;
{
	extern short    ii, jj;
	jj = (ii = (*variable) + 1) + 1;
	return (levelTwoNodeOne(&ii) + levelTwoNodeTwo(&jj));
}

levelOneNodeTwo(variable)
	short          *variable;
{
	extern short    iii, jjj;
	jjj = (iii = (*variable) + 1) + 1;
	return (levelTwoNodeThree(&iii) + levelTwoNodeFour(&jjj));
}

levelTwoNodeOne(variable)
	short          *variable;
{
	extern short    iiii, jjjj;
	jjjj = (iiii = (*variable) + 1) + 1;
	return (levelThreeLeafOne(&iiii) + levelThreeLeafTwo(&jjjj));
}

levelTwoNodeTwo(variable)
	short          *variable;
{
	extern short    iiiii, jjjjj;
	jjjjj = (iiiii = (*variable) + 1) + 1;
	return (levelThreeLeafThree(&iiiii) + levelThreeLeafFour(&jjjjj));
}

levelTwoNodeThree(variable)
	short          *variable;
{
	extern short    iiiiii, jjjjjj;
	jjjjjj = (iiiiii = (*variable) + 1) + 1;
	return (levelThreeLeafFive(&iiiiii) + levelThreeLeafSix(&jjjjjj));
}

levelTwoNodeFour(variable)
	short          *variable;
{
	extern short    iiiiiii, jjjjjjj;
	jjjjjjj = (iiiiiii = (*variable) + 1) + 1;
	return (levelThreeLeafSeven(&iiiiiii) + levelThreeLeafEight(&jjjjjjj));
}

levelThreeLeafOne(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafTwo(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafThree(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafFour(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafFive(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafSix(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafSeven(variable)
	short          *variable;
{
	return ((*variable) + 1);
}

levelThreeLeafEight(variable)
	short          *variable;
{
	return ((*variable) + 1);
}
@def_
@def $macro161()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i = 1, ii, iii;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, used in conditional expression, integer function
 * declaration
 */
{
	extern short    i;
	short           levelOneNodeOne();

	if (!(levelOneNodeOne(&i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short          *variable;
{
	extern short    ii;
	short           levelTwoNodeOne();

	ii = 2 * (*variable);
	return (2 * levelTwoNodeOne(&ii));
}

short
levelTwoNodeOne(variable)
	short          *variable;
{
	extern short    iii;
	short           levelThreeLeafOne();

	iii = 2 * (*variable);
	return (2 * levelThreeLeafOne(&iii));
}

short
levelThreeLeafOne(variable)
	short          *variable;
{
	return (2 * (*variable));
}
@def_
@def $macro162()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";
char            i = 4, j;

main()				/* alias root */
/*
 *  test class: extern variable address instance  : linear tree structure, used in conditional expression, function declared
 * to return a pointer to character
 */
{
	extern char     i, j;
	char           *skip();

	j = 2 * i;
	if (compare(skip(&i), "andra", 5) == compare(skip(&j), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	char           *skipper;
{
	short           ii;
	char           *pointer;

	for (ii = 0, pointer = protean; ii < *skipper; ii++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro163()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i = 12;

main()
/*
 * test class: extern variable address instance  : linear tree structure, in conditional expression, pointer to function
 * returning an integer
 */
{
	short           divide4();

	if (dummy1(divide4, &i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), *integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 3)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	short          *integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), *integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 6)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	short          *integer;
{
	return (*integer / 2);
}
@def_
@def $macro164()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, no function declaration
 */
{
	short           result;

	result = recursiveFunction(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short          *variable;
{
	short           result = 0;

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (result != 2)
			statusFlag++;
	}
	return (i + 1);
}
@def_
@def $macro165()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, legal, integer function declaration
 */
{
	extern short    i;
	short           result = 0;
	short           recursiveFunction();

	result = recursiveFunction(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short          *variable;
{
	extern short    i;
	short           result = 0;
	short           recursiveFunction();

	i = *variable;
	if (--counter) {
		result = recursiveFunction(&i);
		if (result != 2)
			statusFlag++;
	}
	return (i + 1);
}
@def_
@def $macro166()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           i = 2;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, function declared to return a pointer to
 * character
 */
{
	char           *s, *recursiveFunction();
	extern short    i;

	s = recursiveFunction(&i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short          *variable;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(variable);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + (*variable));
}
@def_
@def $macro167()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, return value, pointer to function returning an integer
 */
{
	short           result = 0, increment();

	result = dummy(increment, &i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), *variable;
{
	short           result;

	if (--counter) {
		result = dummy(function, variable);
		if (result != 2)
			statusFlag++;
	}
	return (function(*variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro168()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, no function
 * declaration
 */
{
	if (!(recursiveFunction(&i) - i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short          *variable;
{
	if (--counter)
		if (!(recursiveFunction(variable) - (*variable) == 1))
			statusFlag++;
	return ((*variable) + 1);
}
@def_
@def $macro169()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, function in conditional expression, integer function
 * declaration
 */
{
	short           recursiveFunction();
	extern short    i;

	if (!(recursiveFunction(&i) - i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short          *variable;
{
	short           recursiveFunction();

	if (--counter)
		if (!(recursiveFunction(variable) - *variable == 1))
			statusFlag++;
	return ((*variable) + 1);
}
@def_
@def $macro170()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           i = 2;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, function declared to return a
 * pointer to character
 */
{
	char           *recursiveFunction();
	extern short    i;

	if (!(*recursiveFunction(&i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short          *variable;
{
	if (--counter)
		if (!(*recursiveFunction(variable) == '2'))
			statusFlag++;
	return (numbers + *variable);
}
@def_
@def $macro171()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: extern variable address instance  : recursive call, in conditional expression, pointer to function returning
 * an integer
 */
{
	short           increment();

	if (!(dummy(increment, &i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), *variable;
{
	if (--counter)
		if (!(dummy(function, variable) == 2))
			statusFlag++;
	return (function(*variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro172()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, legal, no function declaration
 */
{
	extern short    i;
	short           result = 0;

	result = castor(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short          *variable;
{
	extern short    ii;
	short           result = 0;

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if (result != 5)
			statusFlag++;
	}
	return (*variable + 1);
}

pollux(variable)
	short          *variable;
{
	extern short    iii;
	short           result = 0;

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if (result != 2)
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro173()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, legal, function declared to return an integer
 */
{
	short           result = 0, castor();

	result = castor(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short          *variable;
{
	short           result = 0, pollux();

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if (result != 5)
			statusFlag++;
	}
	return (*variable + 1);
}

short
pollux(variable)
	short          *variable;
{
	short           result = 0;

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if (result != 2)
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro174()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           i = 2, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, function declared to return a pointer to character
 */
{
	char           *s, *castor();
	extern short    i;

	s = castor(&i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short          *variable;
{
	extern short    ii;
	char           *s, *pollux();

	ii = *variable + 4;
	if (--counter) {
		s = pollux(&ii);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + *variable);
}

char           *
pollux(variable)
	short          *variable;
{
	extern short    iii;
	char           *s;

	iii = *variable - 4;
	if (--counter) {
		s = castor(&iii);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + *variable);
}
@def_
@def $macro175()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, return value, pointer to function returning an integer
 */
{
	extern short    i;
	short           result = 0, increment();

	result = castor(increment, &i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), *variable;
{
	extern short    ii;
	short           result = 0;

	ii = *variable + 8;
	if (--counter) {
		result = pollux(function, &ii);
		if (result != 10)
			statusFlag++;
	}
	return (function(*variable));
}

pollux(function, variable)
	short           (*function) (), *variable;
{
	extern short    iii;
	short           result = 0;

	iii = *variable - 8;
	if (--counter) {
		result = castor(function, &iii);
		if (result != 2)
			statusFlag++;
	}
	return (function(*variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro176()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, no function declaration
 */
{
	i = 1;
	if (!(castor(&i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short          *variable;
{
	extern short    ii;

	ii = *variable + 3;
	if (--counter) {
		if (!(pollux(&ii) == 5))
			statusFlag++;
	}
	return (*variable + 1);
}

pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 3;
	if (--counter) {
		if (!(castor(&iii) == 2))
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro177()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, function declared to return an integer
 */
{
	extern short    i;
	short           castor();

	if (!(castor(&i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short          *variable;
{
	short           pollux();

	ii = *variable + 3;
	if (--counter) {
		if (!(pollux(&ii) == 5))
			statusFlag++;
	}
	return (*variable + 1);
}

short
pollux(variable)
	short          *variable;
{
	iii = *variable - 3;
	if (--counter) {
		if (!(castor(&iii) == 2))
			statusFlag++;
	}
	return (*variable + 1);
}
@def_
@def $macro178()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           i = 2, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, function declared to return a pointer
 * to character
 */
{
	char           *castor();
	extern short    i;

	if (!(*castor(&i) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short          *variable;
{
	char           *pollux();
	extern short    ii;

	ii = *variable + 4;
	if (--counter) {
		if (!(*pollux(&ii) == '6'))
			statusFlag++;
	}
	return (numbers + *variable);
}

char           *
pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 4;
	if (--counter) {
		if (!(*castor(&iii) == '2'))
			statusFlag++;
	}
	return (numbers + *variable);
}
@def_
@def $macro179()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: extern variable address instance  : gemini, in conditional expression, pointer to function returning an
 * integer
 */
{
	short           increment();

	if (!(castor(increment, &i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), *variable;
{
	extern short    ii;

	ii = *variable + 10;
	if (--counter) {
		if (!(pollux(function, &ii) == 12))
			statusFlag++;
	}
	return (function(*variable));
}

pollux(function, variable)
	short           (*function) (), *variable;
{
	extern short    iii;

	iii = *variable - 10;
	if (--counter) {
		if (!(castor(function, &iii) == 2))
			statusFlag++;
	}
	return (function(*variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro180()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, return value and legal, no
 * function declaration
 */
{
	extern short    i;
	short           result = 0;

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1 || i != 0)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2 || i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;

	(*variable) = 3;
	result = levelTwoNodeOne(variable);
	if (result != 3 || *variable != 0)
		statusFlag++;
	(*variable) = 4;
	result = levelTwoNodeTwo(variable);
	if (result != 4 || *variable != 0)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;

	(*variable) = 5;
	result = levelTwoNodeThree(variable);
	if (result != 5 || *variable != 0)
		statusFlag++;
	(*variable) = 6;
	result = levelTwoNodeFour(variable);
	if (result != 6 || *variable != 0)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;

	(*variable) = 7;
	result = levelThreeLeafOne(variable);
	if (result != 7 || *variable != 0)
		statusFlag++;
	(*variable) = 8;
	result = levelThreeLeafTwo(variable);
	if (result != 8 || *variable != 0)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;

	(*variable) = 9;
	result = levelThreeLeafThree(variable);
	if (result != 9 || *variable != 0)
		statusFlag++;
	(*variable) = 10;
	result = levelThreeLeafFour(variable);
	if (result != 10 || *variable != 0)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;

	(*variable) = 11;
	result = levelThreeLeafFive(variable);
	if (result != 11 || *variable != 0)
		statusFlag++;
	(*variable) = 12;
	result = levelThreeLeafSix(variable);
	if (result != 12 || *variable != 0)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;

	(*variable) = 13;
	result = levelThreeLeafSeven(variable);
	if (result != 13 || *variable != 0)
		statusFlag++;
	(*variable) = 14;
	result = levelThreeLeafEight(variable);
	if (result != 14 || *variable != 0)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafTwo(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafThree(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafFour(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafFive(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafSix(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafSeven(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

levelThreeLeafEight(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}
@def_
@def $macro181()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, return value and legal,
 * integer function declaration
 */
{
	short           result = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1 || i != 0)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2 || i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	(*variable) = 3;
	result = levelTwoNodeOne(variable);
	if (result != 3 || *variable != 0)
		statusFlag++;
	(*variable) = 4;
	result = levelTwoNodeTwo(variable);
	if (result != 4 || *variable != 0)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	(*variable) = 5;
	result = levelTwoNodeThree(variable);
	if (result != 5 || *variable != 0)
		statusFlag++;
	(*variable) = 6;
	result = levelTwoNodeFour(variable);
	if (result != 6 || *variable != 0)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	(*variable) = 7;
	result = levelThreeLeafOne(variable);
	if (result != 7 || *variable != 0)
		statusFlag++;
	(*variable) = 8;
	result = levelThreeLeafTwo(variable);
	if (result != 8 || *variable != 0)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	(*variable) = 9;
	result = levelThreeLeafThree(variable);
	if (result != 9 || *variable != 0)
		statusFlag++;
	(*variable) = 10;
	result = levelThreeLeafFour(variable);
	if (result != 10 || *variable != 0)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	(*variable) = 11;
	result = levelThreeLeafFive(variable);
	if (result != 11 || *variable != 0)
		statusFlag++;
	(*variable) = 12;
	result = levelThreeLeafSix(variable);
	if (result != 12 || *variable != 0)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short          *variable;
{
	short           storage = (*variable), result = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	(*variable) = 13;
	result = levelThreeLeafSeven(variable);
	if (result != 13 || *variable != 0)
		statusFlag++;
	(*variable) = 14;
	result = levelThreeLeafEight(variable);
	if (result != 14 || *variable != 0)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafTwo(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafThree(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafFour(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafFive(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafSix(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafSeven(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}

short
levelThreeLeafEight(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (i);
}
@def_
@def $macro182()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, return value and legal,
 * function declared to return a pointer to character
 */
{
	char           *s, *levelOne();
	extern short    i;

	i = 1;
	s = levelOne(&i);
	if (*s != '1' || i != 4)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short          *variable;
{
	char           *s1, *s2, *levelTwo();
	short           j;

	for (s1 = numbers, j = 0; j < *variable; j++, s1++);
	(*variable)++;
	s2 = levelTwo(variable);
	if (*s2 != '2' || *variable != 4)
		statusFlag++;
	return (s1);
}

char           *
levelTwo(variable)
	short          *variable;
{
	char           *s1, *s2, *levelThree();
	short           k;

	if (*variable != 2)
		statusFlag++;
	for (s1 = numbers, k = 0; k < *variable; k++, s1++);
	(*variable)++;
	s2 = levelThree(variable);
	if (*s2 != '3' || *variable != 4)
		statusFlag++;
	return (s1);
}

char           *
levelThree(variable)
	short          *variable;
{
	char           *s;
	short           l;

	if (*variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < *variable; l++, s++);
	(*variable)++;
	return (s);
}
@def_
@def $macro183()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i = 12;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, return value, legal pointer
 * to function returning an integer
 */
{
	extern short    i;
	short           result = 0, divide4();

	result = dummy1(divide4, &i);
	if (result != 3 || i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), *integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3 || *integer != 0)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short          *integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), *integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6 || *integer != 0)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short          *integer;
{
	short           i = *integer;

	(*integer) = 0;
	return (i / 2);
}
@def_
@def $macro184()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i, j, ii, jj, iii, jjj, iiii, jjjj, iiiii, jjjjj, iiiiii, jjjjjj, iiiiiii, jjjjjjj;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, used in conditional
 * expression, no function declaration
 */
{
	extern short    i, j;

	i = 1;
	j = i++;
	if (!(levelOneNodeOne(&j) + levelOneNodeTwo(&i) == 44))
		statusFlag++;
	if (i != 3 || j != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short          *variable;
{
	extern short    ii, jj;
	short           storage;
	jj = (ii = ++(*variable)) + 1;
	storage = levelTwoNodeOne(&ii) + levelTwoNodeTwo(&jj);
	if (ii != 3 || jj != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short          *variable;
{
	extern short    iii, jjj;
	short           storage;
	jjj = (iii = ++(*variable)) + 1;
	storage = levelTwoNodeThree(&iii) + levelTwoNodeFour(&jjj);
	if (iii != 4 || jjj != 5)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short          *variable;
{
	extern short    iiii, jjjj;
	short           storage;
	jjjj = (iiii = ++(*variable)) + 1;
	storage = levelThreeLeafOne(&iiii) + levelThreeLeafTwo(&jjjj);
	if (iiii != 4 || jjjj != 5)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short          *variable;
{
	extern short    iiiii, jjjjj;
	short           storage;
	jjjjj = (iiiii = ++(*variable)) + 1;
	storage = levelThreeLeafThree(&iiiii) + levelThreeLeafFour(&jjjjj);
	if (iiiii != 5 || jjjjj != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short          *variable;
{
	extern short    iiiiii, jjjjjj;
	short           storage;
	jjjjjj = (iiiiii = ++(*variable)) + 1;
	storage = levelThreeLeafFive(&iiiiii) + levelThreeLeafSix(&jjjjjj);
	if (iiiiii != 5 || jjjjjj != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short          *variable;
{
	extern short    iiiiiii, jjjjjjj;
	short           storage;
	jjjjjjj = (iiiiiii = ++(*variable)) + 1;
	storage = levelThreeLeafSeven(&iiiiiii) + levelThreeLeafEight(&jjjjjjj);
	if (iiiiiii != 6 || jjjjjjj != 7)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafTwo(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafThree(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafFour(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafFive(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafSix(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafSeven(variable)
	short          *variable;
{
	return (++(*variable));
}

levelThreeLeafEight(variable)
	short          *variable;
{
	return (++(*variable));
}
@def_
@def $macro185()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i = 1;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, used in conditional
 * expression, integer function declaration
 */
{
	extern short    i;
	short           levelOneNodeOne();

	if (!(levelOneNodeOne(&i) == 32) || i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short          *variable;
{
	short           levelTwoNodeOne();

	(*variable) *= 2;
	return (2 * levelTwoNodeOne(variable));
}

short
levelTwoNodeOne(variable)
	short          *variable;
{
	short           levelThreeLeafOne();

	(*variable) *= 2;
	return (2 * levelThreeLeafOne(variable));
}

short
levelThreeLeafOne(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable) = 0;
	return (2 * i);
}
@def_
@def $macro186()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";
char            i, j;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, used in conditional
 * expression, function declared to return a pointer to character
 */
{
	short           statusFlag = NoMistake;
	char           *skip();

	i = 4;
	j = 2 * i;
	if (compare(skip(&i), "andra", 5) != compare(skip(&j), "across", 6))
		statusFlag++;
	if (i != 0 || j != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	char           *skipper;
{
	char           *pointer;

	for (pointer = protean; *skipper > 0; (*skipper)--)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro187()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           i = 12;

main()
/*
 * test class: external variable address, changed to effect instance  : linear tree structure, in conditional expression,
 * pointer to function returning an integer
 */
{
	short           divide4();

	if (dummy1(divide4, &i) != 3 || i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), *integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 3 || *integer != 0)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	short          *integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), *integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 6 || *integer != 0)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	short          *integer;
{
	short           i = *integer;

	(*integer) = 0;
	return (i / 2);
}
@def_
@def $macro188()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, legal, no function
 * declaration
 */
{
	short           result;

	result = recursiveFunction(&i);
	if (result != i)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short          *variable;
{
	short           result = 0;

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != (*variable))
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro189()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, legal, integer
 * function declaration
 */
{
	extern short    i;
	short           result = 0;
	short           recursiveFunction();

	result = recursiveFunction(&i);
	if (result != i)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short          *variable;
{
	short           result = 0;
	short           recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable);
		if (result != *variable)
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro190()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "01234567890";
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, function declared to
 * return a pointer to character
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction(&i);
	if (*s != '0' + (i - 1) % 10)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short          *variable;
{
	char           *s;

	i = *variable;
	if (--counter) {
		s = recursiveFunction(&i);
		if (*s != '0' + (i - 1) % 10)
			statusFlag++;
	}
	return (numbers + (*variable)++);
}
@def_
@def $macro191()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, return value, pointer to function
 * returning an integer
 */
{
	extern short    i;
	short           result = 0, increment();

	result = dummy(increment, &i);
	if (result - i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), *variable;
{
	short           result;
	extern short    i;

	i = *variable;
	if (--counter) {
		result = dummy(function, &i);
		if (result - i != 2)
			statusFlag++;
	}
	return (function((*variable)--));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro192()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, function in conditional expression,
 * no function declaration
 */
{
	extern short    i;

	if (!(recursiveFunction(&i) - i == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short          *variable;
{
	extern short    i;

	i = *variable;
	if (--counter)
		if (!(recursiveFunction(&i) - i == 2))
			statusFlag++;
	return ((*variable)-- + 1);
}
@def_
@def $macro193()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, function in conditional expression,
 * integer function declaration
 */
{
	short           recursiveFunction();

	if (recursiveFunction(&i) - i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short          *variable;
{
	extern short    i;

	i = *variable;
	if (--counter)
		if (recursiveFunction(&i) - i != 2)
			statusFlag++;
	return ((*variable)-- + 1);
}
@def_
@def $macro194()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "012345678901234";
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	extern short    i;
	char            c;

	c = *recursiveFunction(&i);
	if (c != '0' + (i - 1) % 10)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short          *variable;
{
	extern short    i;
	char            c;

	i = *variable;
	if (--counter) {
		c = *recursiveFunction(&i);
		if (c != '0' + (i - 1) % 10)
			statusFlag++;
	}
	return (numbers + (*variable)++);
}
@def_
@def $macro195()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1;

main()
/*
 * test class: external variable address, changed to effect instance  : recursive call, in conditional expression, pointer
 * to function returning an integer
 */
{
	short           increment();

	if (dummy(increment, &i) - i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), *variable;
{
	i = *variable;
	if (--counter)
		if (dummy(function, &i) - i != 2)
			statusFlag++;
	return (function((*variable)--));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro196()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, no function declaration
 */
{
	extern short    i;
	short           result = 0;

	result = castor(&i);
	if (result != 2 || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short          *variable;
{
	extern short    ii;
	short           result = 0;

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if (result != ii + 2)
			statusFlag++;
	}
	return (++(*variable));
}

pollux(variable)
	short          *variable;
{
	extern short    iii;
	short           result = 0;

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if (result != iii)
			statusFlag++;
	}
	return (--(*variable) + 2);
}
@def_
@def $macro197()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, function declared to
 * return an integer
 */
{
	short           result = 0, castor();

	i = 1;
	result = castor(&i);
	if (result != 2 || i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short          *variable;
{
	short           result = 0, pollux();

	ii = *variable + 3;
	if (--counter) {
		result = pollux(&ii);
		if (result != ii + 2)
			statusFlag++;
	}
	return (++(*variable));
}

short
pollux(variable)
	short          *variable;
{
	short           result = 0;

	iii = *variable - 3;
	if (--counter) {
		result = castor(&iii);
		if (result != iii)
			statusFlag++;
	}
	return (--(*variable) + 2);
}
@def_
@def $macro198()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "01234567890123456";
short           i = 2, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, function declared to return a
 * pointer to character
 */
{
	char           *s, *castor();
	extern short    i;

	s = castor(&i);
	if (*s != '0' + i - 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short          *variable;
{
	extern short    ii;
	char           *s, *pollux();

	ii = *variable + 4;
	if (--counter) {
		s = pollux(&ii);
		if (*s != '0' + (ii - 1) % 10)
			statusFlag++;
	}
	return (numbers + (*variable)++);
}

char           *
pollux(variable)
	short          *variable;
{
	extern short    iii;
	char           *s;

	iii = *variable - 4;
	if (--counter) {
		s = castor(&iii);
		if (*s != '0' + (iii - 1) % 10)
			statusFlag++;
	}
	return (numbers + (*variable)++);
}
@def_
@def $macro199()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, pointer to function returning
 * an integer
 */
{
	short           result = 0, increment();

	result = castor(increment, &i);
	if (result != i + 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), *variable;
{
	short           result = 0;

	ii = *variable + 8;
	if (--counter) {
		result = pollux(function, &ii);
		if (result != ii + 2)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), *variable;
{
	short           result = 0;

	iii = *variable - 8;
	if (--counter) {
		result = castor(function, &iii);
		if (result != iii + 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short          *variable;
{
	short           i = *variable;

	(*variable)--;
	return (++i);
}
@def_
@def $macro200()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, no function
 * declaration
 */
{
	extern short    i;

	if (castor(&i) - i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short          *variable;
{
	extern short    ii;

	ii = *variable + 3;
	if (--counter) {
		if (pollux(&ii) - ii != 0)
			statusFlag++;
	}
	return (++(*variable));
}

pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 3;
	if (--counter) {
		if (castor(&iii) - iii != 0)
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro201()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, function declared
 * to return an integer
 */
{
	extern short    i;
	short           castor();

	i = 1;
	if (castor(&i) - i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short          *variable;
{
	extern short    ii;
	short           pollux();

	ii = *variable + 3;
	if (--counter) {
		if (pollux(&ii) - ii != 0)
			statusFlag++;
	}
	return (++(*variable));
}

short
pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 3;
	if (--counter) {
		if (castor(&iii) - iii != 0)
			statusFlag++;
	}
	return (++(*variable));
}
@def_
@def $macro202()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "01234567890123456789012345";
short           i = 13, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, function declared
 * to return a pointer to character
 */
{
	char           *castor();
	char            c;

	c = *castor(&i);
	if (c != '0' + (i - 1) % 10)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short          *variable;
{
	char           *pollux();
	char            c;

	ii = *variable + 2;
	if (--counter) {
		c = *pollux(&ii);
		if (c != '0' + (ii - 1) % 10)
			statusFlag++;
	}
	return (numbers + (*variable)++);
}

char           *
pollux(variable)
	short          *variable;
{
	char            c;

	iii = *variable - 2;
	if (--counter) {
		c = *castor(&iii);
		if (c != '0' + (iii - 1) % 10)
			statusFlag++;
	}
	return (numbers + (*variable)++);
}
@def_
@def $macro203()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, in conditional expression, pointer to
 * function returning an integer
 */
{
	short           increment();

	if (castor(increment, &i) != i + 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), *variable;
{

	ii = *variable + 10;
	if (--counter) {
		if (pollux(function, &ii) != ii + 2)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), *variable;
{
	iii = *variable - 10;
	if (--counter) {
		if (castor(function, &iii) != iii + 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short          *variable;
{
	return (--(*variable) + 2);
}
@def_
@def $macro204()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, return value and legal, no function
 * declaration
 */
{
	extern short    i;
	short           result = 0;

	i = 1;
	result = levelOneNodeOne(&i);
	if (result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;

	*variable = 3;
	result = levelTwoNodeOne(variable);
	if (result != 3)
		statusFlag++;
	*variable = 4;
	result = levelTwoNodeTwo(variable);
	if (result != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;

	*variable = 5;
	result = levelTwoNodeThree(variable);
	if (result != 5)
		statusFlag++;
	*variable = 6;
	result = levelTwoNodeFour(variable);
	if (result != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;

	*variable = 7;
	result = levelThreeLeafOne(variable);
	if (result != 7)
		statusFlag++;
	*variable = 8;
	result = levelThreeLeafTwo(variable);
	if (result != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;

	*variable = 9;
	result = levelThreeLeafThree(variable);
	if (result != 9)
		statusFlag++;
	*variable = 10;
	result = levelThreeLeafFour(variable);
	if (result != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;

	*variable = 11;
	result = levelThreeLeafFive(variable);
	if (result != 11)
		statusFlag++;
	*variable = 12;
	result = levelThreeLeafSix(variable);
	if (result != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;

	*variable = 13;
	result = levelThreeLeafSeven(variable);
	if (result != 13)
		statusFlag++;
	*variable = 14;
	result = levelThreeLeafEight(variable);
	if (result != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafTwo(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafThree(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafFour(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafFive(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafSix(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafSeven(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

levelThreeLeafEight(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}
@def_
@def $macro205()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i = 1;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, return value and legal, integer
 * function declaration
 */
{
	short           result = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	result = levelOneNodeOne(&i);
	if (result != 1)
		statusFlag++;
	i = 2;
	result = levelOneNodeTwo(&i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	*variable = 3;
	result = levelTwoNodeOne(variable);
	if (result != 3)
		statusFlag++;
	*variable = 4;
	result = levelTwoNodeTwo(variable);
	if (result != 4)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	*variable = 5;
	result = levelTwoNodeThree(variable);
	if (result != 5)
		statusFlag++;
	*variable = 6;
	result = levelTwoNodeFour(variable);
	if (result != 6)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	*variable = 7;
	result = levelThreeLeafOne(variable);
	if (result != 7)
		statusFlag++;
	*variable = 8;
	result = levelThreeLeafTwo(variable);
	if (result != 8)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	*variable = 9;
	result = levelThreeLeafThree(variable);
	if (result != 9)
		statusFlag++;
	*variable = 10;
	result = levelThreeLeafFour(variable);
	if (result != 10)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	*variable = 11;
	result = levelThreeLeafFive(variable);
	if (result != 11)
		statusFlag++;
	*variable = 12;
	result = levelThreeLeafSix(variable);
	if (result != 12)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short          *variable;
{
	short           storage = *variable, result = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	*variable = 13;
	result = levelThreeLeafSeven(variable);
	if (result != 13)
		statusFlag++;
	*variable = 14;
	result = levelThreeLeafEight(variable);
	if (result != 14)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafTwo(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafThree(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafFour(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafFive(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafSix(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafSeven(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}

short
levelThreeLeafEight(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (i);
}
@def_
@def $macro206()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, return value and legal, function
 * declared to return a pointer to character
 */
{
	char           *s, *levelOne();

	i = 1;
	s = levelOne(&i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short          *variable;
{
	char           *s1, *s2, *levelTwo();
	short           j;

	for (s1 = numbers, j = 0; j < *variable; j++, s1++);
	(*variable)++;
	s2 = levelTwo(variable);
	if (*s2 != '2')
		statusFlag++;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (s1);
}

char           *
levelTwo(variable)
	short          *variable;
{
	char           *s1, *s2, *levelThree();
	short           k;

	if (*variable != 2)
		statusFlag++;
	for (s1 = numbers, k = 0; k < *variable; k++, s1++);
	(*variable)++;
	s2 = levelThree(variable);
	if (*s2 != '3')
		statusFlag++;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (s1);
}

char           *
levelThree(variable)
	short          *variable;
{
	char           *s;
	short           l;

	if (*variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < *variable; l++, s++);
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (s);
}
@def_
@def $macro207()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i = 12;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, return value, legal pointer to
 * function returning an integer
 */
{
	short           result = 0, divide4();

	result = dummy1(divide4, &i);
	if (result != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), *integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	integer = &globalInteger;
	if (*integer != 10)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short          *integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), *integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	integer = &globalInteger;
	if (*integer != 10)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short          *integer;
{
	short           i = *integer;

	(*integer) = 0;
	return (i / 2);
}
@def_
@def $macro208()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i, j, ii, jj, iii, jjj, iiii, jjjj, iiiii, jjjjj, iiiiii, jjjjjj, iiiiiii, jjjjjjj;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, used in conditional expression, no
 * function declaration
 */
{
	i = 1;
	j = i++;
	if (!(levelOneNodeOne(&j) + levelOneNodeTwo(&i) == 44))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short          *variable;
{
	extern short    ii, jj;
	short           storage;
	jj = (ii = ++(*variable)) + 1;
	storage = levelTwoNodeOne(&ii) + levelTwoNodeTwo(&jj);
	return (storage);
}

levelOneNodeTwo(variable)
	short          *variable;
{
	extern short    iii, jjj;
	short           storage;
	jjj = (iii = ++(*variable)) + 1;
	storage = levelTwoNodeThree(&iii) + levelTwoNodeFour(&jjj);
	return (storage);
}

levelTwoNodeOne(variable)
	short          *variable;
{
	extern short    iiii, jjjj;
	short           storage;
	jjjj = (iiii = ++(*variable)) + 1;
	storage = levelThreeLeafOne(&iiii) + levelThreeLeafTwo(&jjjj);
	return (storage);
}

levelTwoNodeTwo(variable)
	short          *variable;
{
	extern short    iiiii, jjjjj;
	short           storage;
	jjjjj = (iiiii = ++(*variable)) + 1;
	storage = levelThreeLeafThree(&iiiii) + levelThreeLeafFour(&jjjjj);
	return (storage);
}

levelTwoNodeThree(variable)
	short          *variable;
{
	extern short    iiiiii, jjjjjj;
	short           storage;
	jjjjjj = (iiiiii = ++(*variable)) + 1;
	storage = levelThreeLeafFive(&iiiiii) + levelThreeLeafSix(&jjjjjj);
	return (storage);
}

levelTwoNodeFour(variable)
	short          *variable;
{
	extern short    iiiiiii, jjjjjjj;
	short           storage;
	jjjjjjj = (iiiiiii = ++(*variable)) + 1;
	storage = levelThreeLeafSeven(&iiiiiii) + levelThreeLeafEight(&jjjjjjj);
	return (storage);
}

levelThreeLeafOne(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafTwo(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafThree(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafFour(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafFive(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafSix(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafSeven(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}

levelThreeLeafEight(variable)
	short          *variable;
{
	short           i = *variable;

	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (++i);
}
@def_
@def $macro209()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i = 1;

main()				/* alias root */
/*
 *  test class: external variable address, maltreated instance  : linear tree structure, used in conditional expression,
 * integer function declaration
 */
{
	short           levelOneNodeOne();

	if (!(levelOneNodeOne(&i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short          *variable;
{
	short           levelTwoNodeOne();

	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	i *= 2;
	return (2 * levelTwoNodeOne(&i));
}

short
levelTwoNodeOne(variable)
	short          *variable;
{
	short           levelThreeLeafOne();

	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	i *= 2;
	return (2 * levelThreeLeafOne(&i));
}

short
levelThreeLeafOne(variable)
	short          *variable;
{
	static short    i;

	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (2 * i);
}
@def_
@def $macro210()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";
char            globalCharacter = 10;
short           statusFlag = NoMistake;
char            i, j;

main()				/* alias root */
/*
 *  test class: external variable address, changed to effect instance  : linear tree structure, used in conditional
 * expression, function declared to return a pointer to character
 */
{
	extern char     i, j;
	char           *skip();

	i = 4;
	j = 2 * i;
	if (compare(skip(&i), "andra", 5) != compare(skip(&j), "across", 6))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	char           *skipper;
{
	char           *pointer;

	for (pointer = protean; *skipper > 0; (*skipper)--)
		pointer++;
	skipper = &globalCharacter;
	if (*skipper != 10)
		statusFlag++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro211()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           globalInteger = 10;
short           i = 12;

main()
/*
 * test class: external variable address, maltreated instance  : linear tree structure, in conditional expression, pointer
 * to function returning an integer
 */
{
	short           divide4();

	if (dummy1(divide4, &i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), *integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 3)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	short          *integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), *integer;
{
	short           ii;

	if ((ii = (*func) (integer)) != 6)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	short          *integer;
{
	short           i = *integer;

	integer = &globalInteger;
	if (*integer != 10)
		statusFlag++;
	return (i / 2);
}
@def_
@def $macro212()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, legal, no function
 * declaration
 */
{
	extern short    i;
	short           result;

	result = recursiveFunction(&i);
	if (result != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short          *variable;
{
	short           result = 0;
	extern short    i;

	i = *variable;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		result = recursiveFunction(&i);
		if (result != 1)
			statusFlag++;
	}
	return (i);
}
@def_
@def $macro213()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, legal, integer function
 * declaration
 */
{
	extern short    i;
	short           result = 0;
	short           recursiveFunction();

	result = recursiveFunction(&i);
	if (result != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short          *variable;
{
	short           result = 0;
	extern short    i;
	short           recursiveFunction();

	i = *variable;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		result = recursiveFunction(&i);
		if (result != 1)
			statusFlag++;
	}
	return (i);
}
@def_
@def $macro214()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           globalInteger = 10;
short           i = 2;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, function declared to return a
 * pointer to character
 */
{
	char           *s, *recursiveFunction();

	s = recursiveFunction(&i);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short          *variable;
{
	char           *s;

	i = *variable;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		s = recursiveFunction(&i);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + i);
}
@def_
@def $macro215()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, return value, pointer to function returning
 * an integer
 */
{
	extern short    i;
	short           result = 0, increment();

	result = dummy(increment, &i);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), *variable;
{
	short           result;
	extern short    i;

	i = *variable;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		result = dummy(function, &i);
		if (result != 2)
			statusFlag++;
	}
	return (function(i));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro216()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, function in conditional expression, no
 * function declaration
 */
{
	i = 1;
	if (recursiveFunction(&i) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short          *variable;
{
	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter)
		if (recursiveFunction(&i) != 2)
			statusFlag++;
	return (i + 1);
}
@def_
@def $macro217()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, function in conditional expression, integer
 * function declaration
 */
{
	short           recursiveFunction();

	if (recursiveFunction(&i) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short          *variable;
{
	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter)
		if (recursiveFunction(&i) != 2)
			statusFlag++;
	return (i + 1);
}
@def_
@def $macro218()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
char           *numbers = "0123456789";
short           i = 2;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	extern short    i;

	if (*recursiveFunction(&i) != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short          *variable;
{
	extern short    i;

	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter)
		if (!(*recursiveFunction(&i) == '2'))
			statusFlag++;
	return (numbers + i);
}
@def_
@def $macro219()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1;

main()
/*
 * test class: external variable address, maltreated instance  : recursive call, in conditional expression, pointer to
 * function returning an integer
 */
{
	short           increment();
	extern short    i;

	if (dummy(increment, &i) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), *variable;
{
	extern short    i;

	i = *variable;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter)
		if (dummy(function, &i) != 2)
			statusFlag++;
	return (function(i));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro220()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 2, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, no function declaration
 */
{
	short           result = 0;

	result = castor(&i);
	if (result != 5)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short          *variable;
{
	extern short    ii;
	short           result = 0;

	ii = *variable + 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		result = pollux(&ii);
		if (result != 2)
			statusFlag++;
	}
	return (ii);
}

pollux(variable)
	short          *variable;
{
	extern short    iii;
	short           result = 0;

	iii = *variable - 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		result = castor(&iii);
		if (result != 5)
			statusFlag++;
	}
	return (iii);
}
@def_
@def $macro221()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 2, ii, iii;

main()
/*
 * test class: external variable address, changed to effect instance  : gemini, return value, legal, function declared to
 * return an integer
 */
{
	extern short    i;
	short           result = 0, castor();

	result = castor(&i);
	if (result != 5)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short          *variable;
{
	extern short    ii;
	short           result = 0, pollux();

	ii = *variable + 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		result = pollux(&ii);
		if (result != 2)
			statusFlag++;
	}
	return (ii);
}

short
pollux(variable)
	short          *variable;
{
	extern short    iii;
	short           result = 0;

	iii = *variable - 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		result = castor(&iii);
		if (result != 5)
			statusFlag++;
	}
	return (iii);
}
@def_
@def $macro222()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           globalInteger = 10;
short           i = 2, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, return value, function declared to return a pointer
 * to character
 */
{
	char           *s, *castor();
	extern short    i;

	s = castor(&i);
	if (*s != '6')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short          *variable;
{
	extern short    ii;
	char           *s, *pollux();

	ii = *variable + 4;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		s = pollux(&ii);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + ii);
}

char           *
pollux(variable)
	short          *variable;
{
	extern short    iii;
	char           *s;

	iii = *variable - 4;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		s = castor(&iii);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + iii);
}
@def_
@def $macro223()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, return value, pointer to function returning an
 * integer
 */
{
	extern short    i;
	short           result = 0, increment();

	result = castor(increment, &i);
	if (result != 10)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), *variable;
{
	extern short    ii;
	short           result = 0;

	ii = *variable + 8;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		result = pollux(function, &ii);
		if (result != 2)
			statusFlag++;
	}
	return (function(ii));
}

pollux(function, variable)
	short           (*function) (), *variable;
{
	extern short    iii;
	short           result = 0;

	iii = *variable - 8;
	if (--counter) {
		variable = &globalInteger;
		if (*variable != 10)
			statusFlag++;
		result = castor(function, &iii);
		if (result != 10)
			statusFlag++;
	}
	return (function(iii));
}

short
increment(variable)
	short           variable;
{

	return (++variable);
}
@def_
@def $macro224()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, no function declaration
 */
{
	extern short    i;

	if (castor(&i) != 5)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short          *variable;
{
	extern short    ii;

	ii = *variable + 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		if (pollux(&ii) != 2)
			statusFlag++;
	}
	return (ii + 1);
}

pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		if (castor(&iii) != 5)
			statusFlag++;
	}
	return (iii + 1);
}
@def_
@def $macro225()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, function declared to
 * return an integer
 */
{
	extern short    i;
	short           castor();

	if (castor(&i) != 5)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short          *variable;
{
	extern short    ii;
	short           pollux();

	ii = *variable + 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		if (pollux(&ii) != 2)
			statusFlag++;
	}
	return (ii + 1);
}

short
pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 3;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		if (castor(&iii) != 5)
			statusFlag++;
	}
	return (iii + 1);
}
@def_
@def $macro226()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";
short           globalInteger = 10;
short           i = 2, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, function declared to
 * return a pointer to character
 */
{
	char           *castor();
	extern short    i;

	if (!(*castor(&i) == '6'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short          *variable;
{
	char           *pollux();
	extern short    ii;

	ii = *variable + 4;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		if (!(*pollux(&ii) == '2'))
			statusFlag++;
	}
	return (numbers + ii);
}

char           *
pollux(variable)
	short          *variable;
{
	extern short    iii;

	iii = *variable - 4;
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	if (--counter) {
		if (!(*castor(&iii) == '6'))
			statusFlag++;
	}
	return (numbers + iii);
}
@def_
@def $macro227()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
short           globalInteger = 10;
short           i = 1, ii, iii;

main()
/*
 * test class: external variable address, maltreated instance  : gemini, in conditional expression, pointer to function
 * returning an integer
 */
{
	extern short    i;
	short           increment();

	if (!(castor(increment, &i) == 12))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), *variable;
{
	extern short    ii;

	ii = *variable + 10;
	if (--counter) {
		if (!(pollux(function, &ii) == 2))
			statusFlag++;
	}
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (function(ii));
}

pollux(function, variable)
	short           (*function) (), *variable;
{
	extern short    iii;

	iii = *variable - 10;
	if (--counter) {
		if (!(castor(function, &iii) == 12))
			statusFlag++;
	}
	variable = &globalInteger;
	if (*variable != 10)
		statusFlag++;
	return (function(iii));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro228()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, return value and legal, no function
 * declaration
 */
{
	short           i = 0;

	i = levelOneNodeOne(++i);
	if (i != 1)
		statusFlag++;
	i = levelOneNodeTwo(++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           storage = variable;

	variable = levelTwoNodeOne(variable += 2);
	if (variable != 3)
		statusFlag++;
	variable = levelTwoNodeTwo(++variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable = levelTwoNodeThree(variable += 3);
	if (variable != 5)
		statusFlag++;
	variable = levelTwoNodeFour(++variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           storage = variable;

	variable = levelThreeLeafOne(variable += 4);
	if (variable != 7)
		statusFlag++;
	variable = levelThreeLeafTwo(++variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           storage = variable;

	variable = levelThreeLeafThree(variable += 5);
	if (variable != 9)
		statusFlag++;
	variable = levelThreeLeafFour(++variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           storage = variable;

	variable = levelThreeLeafFive(variable += 6);
	if (variable != 11)
		statusFlag++;
	variable = levelThreeLeafSix(++variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           storage = variable;

	variable = levelThreeLeafSeven(variable += 7);
	if (variable != 13)
		statusFlag++;
	variable = levelThreeLeafEight(++variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro229()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, return value and legal, integer
 * function declaration
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne(++i);
	if (i != 1)
		statusFlag++;
	i = levelOneNodeTwo(++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           storage = variable;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	variable = levelTwoNodeOne(variable += 2);
	if (variable != 3)
		statusFlag++;
	variable = levelTwoNodeTwo(++variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	short           storage = variable;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	variable = levelTwoNodeThree(variable += 3);
	if (variable != 5)
		statusFlag++;
	variable = levelTwoNodeFour(++variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	variable = levelThreeLeafOne(variable += 4);
	if (variable != 7)
		statusFlag++;
	variable = levelThreeLeafTwo(++variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	variable = levelThreeLeafThree(variable += 5);
	if (variable != 9)
		statusFlag++;
	variable = levelThreeLeafFour(++variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	variable = levelThreeLeafFive(variable += 6);
	if (variable != 11)
		statusFlag++;
	variable = levelThreeLeafSix(++variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	short           storage = variable;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	variable = levelThreeLeafSeven(variable += 7);
	if (variable != 13)
		statusFlag++;
	variable = levelThreeLeafEight(++variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro230()
$LICENSE()
$HEAD()

static char    *numbers = "0123456789";
short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : linear tree structure, return value and legal, function
 * declared to return a pointer to character
 */
{
	char           *s, *levelOne();
	short           i = 0;

	s = levelOne(++i);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable)
	short           variable;
{
	char           *s, *levelTwo();
	short           j = variable;

	if (variable != 1)
		statusFlag++;
	s = levelTwo(++j);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	return (s);
}

char           *
levelTwo(variable)
	short           variable;
{
	char           *s, *levelThree();
	short           k = variable;

	if (variable != 2)
		statusFlag++;
	s = levelThree(++k);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	return (s);
}

char           *
levelThree(variable)
	short           variable;
{
	char           *s;
	short           l;

	if (variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < variable; l++, s++);
	return (s);
}
@def_
@def $macro231()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : linear tree structure, return value, legal pointer to
 * function returning an integer
 */
{
	short           i = 3, divide4();

	i = dummy1(divide4, i *= 4);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i;

	i = (*func) (integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro232()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, used in conditional expression, no
 * function declaration
 */
{
	short           i = 0, j = 0;

	if (levelOneNodeOne(i += 1) + levelOneNodeTwo(j += 2) != 44)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           i = 1, j = 2;
	return (levelTwoNodeOne(i += variable) + levelTwoNodeTwo(j += variable));
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           i = 1, j = 2;
	return (levelTwoNodeThree(i += variable) + levelTwoNodeFour(j += variable));
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           i = 1, j = 2;
	return (levelThreeLeafOne(i += variable) + levelThreeLeafTwo(j += variable));
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           i = 1, j = 2;
	return (levelThreeLeafThree(i += variable) + levelThreeLeafFour(j += variable));
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           i = 1, j = 2;
	return (levelThreeLeafFive(i += variable) + levelThreeLeafSix(j += variable));
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           i = 1, j = 2;
	return (levelThreeLeafSeven(i += variable) + levelThreeLeafEight(j += variable));
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (++variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro233()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, used in conditional expression,
 * integer function declaration
 */
{
	short           i = 0, levelOneNodeOne();

	if (!(levelOneNodeOne(++i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           levelTwoNodeOne();

	return (2 * levelTwoNodeOne(2 * variable));
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           levelThreeLeafOne();

	return (2 * levelThreeLeafOne(2 * variable));
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable);
}
@def_
@def $macro234()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: simple arithmatic expression (case 1) instance  : linear tree structure, used in conditional expression,
 * function declared to return a pointer to character
 */
{
	short           i = 2, j = i;
	char           *skip();

	if (compare(skip(2 * i), "andra", 5) == compare(skip(4 * j), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro235()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : linear tree structure, in conditional expression, pointer
 * to function returning an integer
 */
{
	short           i = 3, divide4();

	if (dummy1(divide4, 4 * i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           ii;

	if ((ii = (*func) (integer * 2 / 2)) != 3)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           ii;

	if ((ii = (*func) (integer * 2 / 2)) != 6)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro236()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, return value, legal, no function
 * declaration
 */
{
	short           i = 1;

	i = recursiveFunction(i + 0 - 0);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	short           result;

	if (--counter) {
		result = recursiveFunction(variable * 2 / 2);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro237()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, return value, legal, integer function
 * declaration
 */
{
	short           i = 0;
	short           recursiveFunction();

	i = recursiveFunction(i + 1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	short           result;
	short           recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable * 2 / 2);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro238()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, return value, function declared to return a
 * pointer to character
 */
{
	char           *s, *recursiveFunction();
	short           i = 4;

	s = recursiveFunction(i / 2);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(variable * 2 / 2);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro239()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, return value, pointer to function returning
 * an integer
 */
{
	short           i = 0, increment();

	i = dummy(increment, ++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           result;

	if (--counter) {
		result = dummy(function, 1 * variable);
		if (result != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro240()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, function in conditional expression, no
 * function declaration
 */
{
	short           i = -1;

	if (!(recursiveFunction(i + 2) + i == 1))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (!(recursiveFunction(1 + variable - 1) - variable == 1))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro241()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, function in conditional expression, integer
 * function declaration
 */
{
	short           recursiveFunction();
	short           i = 0;

	if (recursiveFunction(i + 1) - i != 0)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (recursiveFunction(variable + 1) - variable != 0)
			statusFlag++;
	return (--variable);
}
@def_
@def $macro242()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	short           i = 2;

	if (!(*recursiveFunction(i + 1) == '3'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	if (--counter)
		if (!(*recursiveFunction(variable - 1 + 1) == '3'))
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro243()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : recursive call, in conditional expression, pointer to
 * function returning an integer
 */
{
	short           increment();
	short           i = 1;

	if (!(dummy(increment, 2 * i / 2) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	if (--counter)
		if (!(dummy(function, 2 * variable / 2) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro244()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, return value, legal, no function declaration
 */
{
	short           i = 0;

	i = castor(++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = 0;

	if (--counter) {
		ii = pollux(variable + 3);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	short           iii = 0;

	if (--counter) {
		iii = castor(variable - 3);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro245()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, return value, legal, function declared to return an
 * integer
 */
{
	short           i = 0, castor();

	i = castor(++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           ii = 0, pollux();

	if (--counter) {
		ii = pollux(variable + 3);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	short           iii = 0;

	if (--counter) {
		iii = castor(variable - 3);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro246()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, return value, function declared to return a pointer
 * to character
 */
{
	char           *s, *castor();
	short           i = 200;

	s = castor(i % 3);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux(variable + 4);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	char           *s;

	if (--counter) {
		s = castor(variable - 4);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro247()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, return value, pointer to function returning an
 * integer
 */
{
	short           i = 0, increment();

	i = castor(increment, ++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = 0;
	if (--counter) {
		ii = pollux(function, variable + 8);
		if (ii != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = 0;
	if (--counter) {
		iii = castor(function, variable - 8);
		if (iii != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro248()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, in conditional expression, no function declaration
 */
{
	short           i = 0;

	if (!(castor(++i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	if (--counter) {
		if (!(pollux(variable + 3) == 5))
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	if (--counter) {
		if (!(castor(variable - 3) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro249()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, in conditional expression, function declared to
 * return an integer
 */
{
	short           i = 0, castor();

	if (!(castor(++i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           pollux();

	if (--counter) {
		if (!(pollux(variable + 3) == 5))
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	if (--counter) {
		if (!(castor(variable - 3) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro250()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, in conditional expression, function declared to
 * return a pointer to character
 */
{
	char           *castor();
	short           i = 0;

	if (!(*castor(i += 2) == '2'))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	if (--counter) {
		if (!(*pollux(variable + 4) == '6'))
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	if (--counter) {
		if (!(*castor(variable - 4) == '2'))
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro251()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression (case 1) instance  : gemini, in conditional expression, pointer to function
 * returning an integer
 */
{
	short           i = 100, increment();

	if (!(castor(increment, i - 99) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	if (--counter) {
		if (!(pollux(function, variable + 10) == 12))
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	if (--counter) {
		if (!(castor(function, variable - 10) == 2))
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro252()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, no return value and legal
 */
{
	char            i = 'a', j = 'b';

	levelOneNodeOne(++i);
	levelOneNodeTwo(++j);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	char            variable;
{
	if (variable != 'b')
		statusFlag++;
	levelTwoNodeOne(variable += 2);
	levelTwoNodeTwo(++variable);
}

levelOneNodeTwo(variable)
	char            variable;
{
	if (variable != 'c')
		statusFlag++;
	levelTwoNodeThree(variable += 3);
	levelTwoNodeFour(++variable);
}

levelTwoNodeOne(variable)
	char            variable;
{
	if (variable != 'd')
		statusFlag++;
	levelThreeLeafOne(variable += 4);
	levelThreeLeafTwo(++variable);
}

levelTwoNodeTwo(variable)
	char            variable;
{
	if (variable != 'e')
		statusFlag++;
	levelThreeLeafThree(variable += 5);
	levelThreeLeafFour(++variable);
}

levelTwoNodeThree(variable)
	char            variable;
{
	if (variable != 'f')
		statusFlag++;
	levelThreeLeafFive(variable += 6);
	levelThreeLeafSix(++variable);
}

levelTwoNodeFour(variable)
	char            variable;
{
	if (variable != 'g')
		statusFlag++;
	levelThreeLeafSeven(variable += 7);
	levelThreeLeafEight(++variable);
}

levelThreeLeafOne(variable)
	char            variable;
{
	if (variable != 'h')
		statusFlag++;
}

levelThreeLeafTwo(variable)
	char            variable;
{
	if (variable != 'i')
		statusFlag++;
}

levelThreeLeafThree(variable)
	char            variable;
{
	if (variable != 'j')
		statusFlag++;
}

levelThreeLeafFour(variable)
	char            variable;
{
	if (variable != 'k')
		statusFlag++;
}

levelThreeLeafFive(variable)
	char            variable;
{
	if (variable != 'l')
		statusFlag++;
}

levelThreeLeafSix(variable)
	char            variable;
{
	if (variable != 'm')
		statusFlag++;
}

levelThreeLeafSeven(variable)
	char            variable;
{
	if (variable != 'n')
		statusFlag++;
}

levelThreeLeafEight(variable)
	char            variable;
{
	if (variable != 'o')
		statusFlag++;
}
@def_
@def $macro253()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, return value and legal, no
 * function declaration
 */
{
	char            i = 0;

	i = levelOneNodeOne(++i);
	if (i != 1)
		statusFlag++;
	i = levelOneNodeTwo(++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	char            variable;
{
	char            storage = variable;

	variable = levelTwoNodeOne(variable += 2);
	if (variable != 3)
		statusFlag++;
	variable = levelTwoNodeTwo((unsigned) ++variable);
	if (variable != 4)
		statusFlag++;
	return ((short) storage);
}

levelOneNodeTwo(variable)
	char            variable;
{
	char            storage = variable;

	variable = levelTwoNodeThree(variable += 3);
	if (variable != 5)
		statusFlag++;
	variable = levelTwoNodeFour((unsigned) ++variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

levelTwoNodeOne(variable)
	char            variable;
{
	char            storage = variable;

	variable = levelThreeLeafOne(variable += 4);
	if (variable != 7)
		statusFlag++;
	variable = levelThreeLeafTwo(++variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

levelTwoNodeTwo(variable)
	unsigned        variable;
{
	unsigned        storage = variable;

	variable = levelThreeLeafThree((char) (variable += 5));
	if (variable != 9)
		statusFlag++;
	variable = levelThreeLeafFour(++variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

levelTwoNodeThree(variable)
	char            variable;
{
	char            storage = variable;

	variable = levelThreeLeafFive(variable += 6);
	if (variable != 11)
		statusFlag++;
	variable = levelThreeLeafSix(++variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

levelTwoNodeFour(variable)
	unsigned        variable;
{
	unsigned        storage = variable;

	variable = levelThreeLeafSeven((char) (variable += 7));
	if (variable != 13)
		statusFlag++;
	variable = levelThreeLeafEight(++variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

levelThreeLeafOne(variable)
	char            variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	char            variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	char            variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	unsigned        variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	char            variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	char            variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	char            variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	unsigned        variable;
{
	return (variable);
}
@def_
@def $macro254()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, return value and legal, integer
 * function declaration
 */
{
	short           i = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	i = levelOneNodeOne((char) ++i);
	if (i != 1)
		statusFlag++;
	i = levelOneNodeTwo((char) ++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	char            variable;
{
	short           storage = (short) variable;
	short           levelTwoNodeOne(), levelTwoNodeTwo();

	variable = levelTwoNodeOne(variable += 2);
	if (variable != 3)
		statusFlag++;
	variable = levelTwoNodeTwo(++variable);
	if (variable != 4)
		statusFlag++;
	return (storage);
}

short
levelOneNodeTwo(variable)
	char            variable;
{
	short           storage = (short) variable;
	short           levelTwoNodeThree(), levelTwoNodeFour();

	variable = levelTwoNodeThree(variable += 3);
	if (variable != 5)
		statusFlag++;
	variable = levelTwoNodeFour(++variable);
	if (variable != 6)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	char            storage = (char) variable;
	short           levelThreeLeafOne(), levelThreeLeafTwo();

	variable = levelThreeLeafOne(variable += 4);
	if (variable != 7)
		statusFlag++;
	variable = levelThreeLeafTwo(++variable);
	if (variable != 8)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	char            storage = (char) variable;
	short           levelThreeLeafThree(), levelThreeLeafFour();

	variable = levelThreeLeafThree(variable += 5);
	if (variable != 9)
		statusFlag++;
	variable = levelThreeLeafFour(++variable);
	if (variable != 10)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	char            storage = (char) variable;
	short           levelThreeLeafFive(), levelThreeLeafSix();

	variable = levelThreeLeafFive(variable += 6);
	if (variable != 11)
		statusFlag++;
	variable = levelThreeLeafSix(++variable);
	if (variable != 12)
		statusFlag++;
	return (storage);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	char            storage = (char) variable;
	short           levelThreeLeafSeven(), levelThreeLeafEight();

	variable = levelThreeLeafSeven(variable += 7);
	if (variable != 13)
		statusFlag++;
	variable = levelThreeLeafEight(++variable);
	if (variable != 14)
		statusFlag++;
	return (storage);
}

short
levelThreeLeafOne(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafTwo(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafThree(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafFour(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafFive(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafSix(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafSeven(variable)
	char            variable;
{
	return (variable);
}

short
levelThreeLeafEight(variable)
	char            variable;
{
	return (variable);
}
@def_
@def $macro255()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, return value and legal, function
 * declared to return a pointer to character
 */
{
	char           *s, *levelOne();
	static char    *numbers = "0123456789";
	char            i = 0;

	s = levelOne(++i, numbers);
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable, numbers)
	char            variable, *numbers;
{
	char           *s, *levelTwo();
	short           j = variable;

	if (variable != 1)
		statusFlag++;
	s = levelTwo(++j, numbers);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	return (s);
}

char           *
levelTwo(variable, numbers)
	char            variable, *numbers;
{
	char           *s, *levelThree();
	short           k = variable;

	if (variable != 2)
		statusFlag++;
	s = levelThree(++k, numbers);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	return (s);
}

char           *
levelThree(variable, numbers)
	char            variable, *numbers;
{
	char           *s;
	short           l;

	if (variable != 3)
		statusFlag++;
	for (s = numbers, l = 0; l < variable; l++, s++);
	return (s);
}
@def_
@def $macro256()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, return value, legal pointer to
 * function returning an integer
 */
{
	unsigned        i = 3, divide4();

	i = dummy1(divide4, i *= 4);
	if (i != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	unsigned        (*func) ();
unsigned        integer;
{
	short           i = (short) integer;

	i = (*func) (i % 100);
	if (i != 3)
		statusFlag++;
	return (i);
}

unsigned
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, (unsigned) integer) / 2);
}

dummy2(func, integer)
	short           (*func) ();
unsigned        integer;
{
	short           i;

	i = (*func) ((short) integer);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro257()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, used in conditional expression,
 * no function declaration
 */
{
	char            i = 0, j = 0;

	if (levelOneNodeOne(i += 1) + levelOneNodeTwo(j += 2) != 44)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	char            variable;
{
	short           i = 1, j = 2;
	return (levelTwoNodeOne(i += variable) + levelTwoNodeTwo(j += variable));
}

levelOneNodeTwo(variable)
	char            variable;
{
	short           i = 1, j = 2;
	return (levelTwoNodeThree(i += variable) + levelTwoNodeFour(j += variable));
}

levelTwoNodeOne(variable)
	short           variable;
{
	char            i = 1, j = 2;
	return (levelThreeLeafOne(i += variable) + levelThreeLeafTwo(j += variable));
}

levelTwoNodeTwo(variable)
	short           variable;
{
	char            i = 1, j = 2;
	return (levelThreeLeafThree(i += variable) + levelThreeLeafFour(j += variable));
}

levelTwoNodeThree(variable)
	short           variable;
{
	char            i = 1, j = 2;
	return (levelThreeLeafFive(i += variable) + levelThreeLeafSix(j += variable));
}

levelTwoNodeFour(variable)
	short           variable;
{
	char            i = 1, j = 2;
	return (levelThreeLeafSeven(i += variable) + levelThreeLeafEight(j += variable));
}

levelThreeLeafOne(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafTwo(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafThree(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafFour(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafFive(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafSix(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafSeven(variable)
	char            variable;
{
	return (++variable);
}

levelThreeLeafEight(variable)
	char            variable;
{
	return (++variable);
}
@def_
@def $macro258()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, used in conditional expression,
 * integer function declaration
 */
{
	unsigned        i = 0;
	short           levelOneNodeOne();

	if (!(levelOneNodeOne(++i) == 32))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	unsigned        variable;
{
	short           levelTwoNodeOne();

	return (2 * levelTwoNodeOne(2 * variable));
}

short
levelTwoNodeOne(variable)
	unsigned        variable;
{
	short           levelThreeLeafOne();

	return (2 * levelThreeLeafOne(2 * variable));
}

short
levelThreeLeafOne(variable)
	unsigned        variable;
{
	return (2 * variable);
}
@def_
@def $macro259()
$LICENSE()
$HEAD()

main()				/* alias root */
/*
 *  test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, used in conditional expression,
 * function declared to return a pointer to character
 */
{
	static char    *protean = "cassandracross";
	char            i = 2, j = i;
	char           *skip();

	if (compare(skip(2 * i, protean), "andra", 5)
	    == compare(skip(4 * j, protean), "across", 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper, protean)
	char            skipper, *protean;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro260()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : linear tree structure, in conditional expression, pointer
 * to function returning an integer
 */
{
	unsigned        i = 3;
	short           divide4();

	if (dummy1(divide4, 4 * i) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) ();
unsigned        integer;
{
	short           ii;

	if ((ii = (*func) (integer * 2 / 2)) != 3)
		statusFlag++;
	return (ii);
}

short
divide4(integer)
	unsigned        integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) ();
unsigned        integer;
{
	short           ii;

	if ((ii = (*func) (integer * 2 / 2)) != 6)
		statusFlag++;
	return (ii);
}

short
divide2(integer)
	unsigned        integer;
{
	return (integer / 2);
}
@def_
@def $macro261()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, no return value, legal
 */
{
	char            i = 'a';
	short           counter = 0;

	recursiveFunction(++i, counter += 10);
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable, counter)
	char            variable;
	short           counter;
{
	if (variable != 'l' - counter)
		statusFlag++;
	if (--counter)
		recursiveFunction(++variable * 3 / 3, counter);
}
@def_
@def $macro262()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, return value, legal, no function
 * declaration
 */
{
	char            i = 1;
	short           counter = 10;

	i = recursiveFunction(i + 0 - 0, counter);
	if (i != 12 - counter)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable, counter)
	char            variable;
	short           counter;
{
	short           result;

	if (--counter) {
		result = recursiveFunction(variable * 2 / 2 + 1, counter);
		if (result != 12 - counter)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro263()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, return value, legal, integer function
 * declaration
 */
{
	unsigned        i = 0;
	short           recursiveFunction();

	i = recursiveFunction(i + 1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	unsigned        variable;
{
	short           result;
	short           recursiveFunction();

	if (--counter) {
		result = recursiveFunction(variable * 2 / 2);
		if (result != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro264()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, return value, function declared to return
 * a pointer to character
 */
{
	char           *s, *recursiveFunction();
	static char    *numbers = "0123456789";
	short           counter = 10;
	char            i = 4;

	s = recursiveFunction(i - 4, numbers, counter);
	if (*s != '0')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable, numbers, counter)
	char            variable, *numbers;
	short           counter;
{
	char           *s;

	if (--counter) {
		s = recursiveFunction(variable * 2 / 2 + 1, numbers, counter);
		if (*s != '0' + 10 - counter)
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro265()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, function in conditional expression, no
 * function declaration
 */
{
	char            i = 1;

	if (recursiveFunction(i) - i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable)
	char            variable;
{
	if (--counter)
		if (!(recursiveFunction(1 + variable - 1) - variable == 1))
			statusFlag++;
	return (++variable);
}
@def_
@def $macro266()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, function in conditional expression,
 * integer function declaration
 */
{
	short           recursiveFunction();
	unsigned        i = 0;

	if (recursiveFunction(i + 1) - i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable)
	unsigned        variable;
{
	if (--counter)
		if (recursiveFunction(variable + 1) - variable != 2)
			statusFlag++;
	return (++variable);
}
@def_
@def $macro267()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
char           *numbers = "01234567890123456789";

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	short           counter = 10;
	char            i = 0;

	if (*recursiveFunction(i + 1, counter) != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable, counter)
	char            variable;
	short           counter;
{
	if (--counter)
		if (*recursiveFunction(2 * variable / 2, counter % 100) != '1')
			statusFlag++;
	return (numbers + variable);
}
@def_
@def $macro268()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : recursive call, in conditional expression, pointer to
 * function returning an integer
 */
{
	short           increment();
	char            i = 1;

	if (!(dummy(increment, 2 * i / 2) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) ();
char            variable;
{
	if (--counter)
		if (!(dummy(function, 2 * variable / 2) == 2))
			statusFlag++;
	return (function(variable));
}

short
increment(variable)
	char            variable;
{
	return (++variable);
}
@def_
@def $macro269()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, return value, legal, no function declaration
 */
{
	char            i = 0;

	i = castor(++i);
	if (i != 'B')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	short           ii = 0;

	if (--counter) {
		ii = pollux(variable + 3);
		if (ii != 'E')
			statusFlag++;
	}
	return ('A' + variable);
}

pollux(variable)
	short           variable;
{
	short           iii = 0;

	if (--counter) {
		iii = castor(variable - 3);
		if (iii != 'B')
			statusFlag++;
	}
	return ('A' + variable);
}
@def_
@def $macro270()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, return value, legal, function declared to return
 * an integer
 */
{
	short           i = 0, castor();

	i = castor((unsigned) ++i);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	unsigned        variable;
{
	short           ii = 0, pollux();

	if (--counter) {
		ii = pollux(variable + 3);
		if (ii != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	unsigned        variable;
{
	short           iii = 0;

	if (--counter) {
		iii = castor(variable - 3);
		if (iii != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro271()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, return value, function declared to return a
 * pointer to character
 */
{
	char           *s, *castor();
	unsigned        i = 200;

	s = castor(i % 3);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	unsigned        variable;
{
	char           *s, *pollux();

	if (--counter) {
		s = pollux(variable + 4);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	unsigned        variable;
{
	char           *s;

	if (--counter) {
		s = castor(variable - 4);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro272()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, return value, pointer to function returning an
 * integer
 */
{
	char            i = 0, increment();
	short           counter = 10;

	i = castor(increment, ++i, counter);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable, counter)
	char            (*function) (), variable;
	short           counter;
{
	short           ii = 0;
	if (--counter) {
		ii = pollux(function, variable + 8, counter);
		if (ii != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable, counter)
	char            (*function) (), variable;
	short           counter;
{
	short           iii = 0;
	if (--counter) {
		iii = castor(function, variable - 8, counter);
		if (iii != 2)
			statusFlag++;
	}
	return (function(variable));
}

char
increment(variable)
	char            variable;
{
	return (++variable);
}
@def_
@def $macro273()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, in conditional expression, no function
 * declaration
 */
{
	unsigned        i = 0;

	if (!!!(castor((short) ++i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	if (--counter) {
		if (!(pollux((unsigned) (variable + 3)) == 5))
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	unsigned        variable;
{
	if (--counter) {
		if (!(castor((short) (variable - 3)) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro274()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, in conditional expression, function declared to
 * return an integer
 */
{
	unsigned short  i = 0;
	short           castor();

	if (!(castor(++i) == 2))
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	unsigned        variable;
{
	short           pollux();

	if (--counter) {
		if (!(pollux(variable + 3) == 5))
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	unsigned        variable;
{
	if (--counter) {
		if (!(castor(variable - 3) == 2))
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro275()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: simple arithmatic expression ( case 2 ) instance  : gemini, in conditional expression, function declared to
 * return a pointer to character
 */
{
	char           *castor();
	static char    *numbers = "0123456789";
	char            i = '0';

	if (*castor(i += 2, numbers) - *numbers != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable, numbers)
	char            variable, *numbers;
{
	char           *pollux();
	short           i;
	char           *s = numbers;

	if (--counter) {
		if (*pollux(variable + 4, numbers) - *numbers != 6)
			statusFlag++;
	}
	for (i = 0; i < 10 && *s != variable; i++)
		s++;
	return (numbers + i);
}

char           *
pollux(variable, numbers)
	char            variable, *numbers;
{
	short           i;
	char           *s = numbers;

	if (--counter) {
		if (*castor(variable - 4, numbers) - *numbers != 2)
			statusFlag++;
	}
	for (i = 0; i < 10 && *s != variable; i++)
		s++;
	return (numbers + i);
}
@def_
@def $macro276()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, return value and
 * legal, no function declaration
 */
{
	short           i = 0, j = -1, k = 1;
	short           result = 0;

	result = levelOneNodeOne(i - 2 * j + (-k));
	if (result != 1)
		statusFlag++;
	result = levelOneNodeTwo((i + j) * j + k);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

levelOneNodeOne(variable)
	short           variable;
{
	short           result = 0;
	result = levelTwoNodeOne((variable == variable) * 2 + variable);
	if (result != 3)
		statusFlag++;
	result = levelTwoNodeTwo((variable != 2 * variable) * 3 + variable);
	if (result != 4)
		statusFlag++;
	return (variable);
}

levelOneNodeTwo(variable)
	short           variable;
{
	short           i = variable + 2;
	short           result = 0;
	result = levelTwoNodeThree((i + variable) / 2 + (!i != i) * 2);
	if (result != 5)
		statusFlag++;
	result = levelTwoNodeFour((i + variable + 2) / 2 - variable + i);
	if (result != 6)
		statusFlag++;
	return (variable);
}

levelTwoNodeOne(variable)
	short           variable;
{
	short           i = variable * 2;
	short           result = 0;
	result = levelThreeLeafOne((i += 8) / 2);
	if (result != 7)
		statusFlag++;
	result = levelThreeLeafTwo(variable + (i - 8) / variable + 3);
	if (result != 8)
		statusFlag++;
	return (variable);
}

levelTwoNodeTwo(variable)
	short           variable;
{
	short           i = variable;
	short           result = 0;
	result = levelThreeLeafThree((i++ + 2 * variable) / variable + 2 * (variable + 2) / 2);
	if (result != 9)
		statusFlag++;
	result = levelThreeLeafFour(2 * (variable + 3) - i + 1);
	if (result != 10)
		statusFlag++;
	return (variable);
}

levelTwoNodeThree(variable)
	short           variable;
{
	short           i = variable--;
	short           result = 0;
	result = levelThreeLeafFive((i + variable-- + 3) / 2 + 5);
	if (result != 11)
		statusFlag++;
	result = levelThreeLeafSix((i - variable) * 3 + 2 * i - variable - 1);
	if (result != 12)
		statusFlag++;
	return (i);
}

levelTwoNodeFour(variable)
	short           variable;
{
	short           i = variable / 2 - 1;
	short           result = 0;
	result = levelThreeLeafSeven(variable + i * (variable - i) - 1);
	if (result != 13)
		statusFlag++;
	result = levelThreeLeafEight(i * (2 * variable - i) - variable);
	if (result != 14)
		statusFlag++;
	return (variable);
}

levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro277()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, return value and
 * legal, integer function declaration
 */
{
	short           i = 0, j = -1, k = 1;
	short           result = 0;
	short           levelOneNodeOne(), levelOneNodeTwo();

	result = levelOneNodeOne(i - 2 * j + (-k));
	if (result != 1)
		statusFlag++;
	result = levelOneNodeTwo((i + j) * j + k);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           result = 0;
	short           levelTwoNodeOne(), levelTwoNodeTwo();
	result = levelTwoNodeOne((variable == variable) * 2 + variable);
	if (result != 3)
		statusFlag++;
	result = levelTwoNodeTwo((variable != 2 * variable) * 3 + variable);
	if (result != 4)
		statusFlag++;
	return (variable);
}

short
levelOneNodeTwo(variable)
	short           variable;
{
	short           i = variable + 2;
	short           result = 0;
	short           levelTwoNodeThree(), levelTwoNodeFour();
	result = levelTwoNodeThree((i + variable) / 2 + (!i != i) * 2);
	if (result != 5)
		statusFlag++;
	result = levelTwoNodeFour((i + variable + 2) / 2 - variable + i);
	if (result != 6)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           i = variable * 2;
	short           result = 0;
	short           levelThreeLeafOne(), levelThreeLeafTwo();
	result = levelThreeLeafOne((i += 8) / 2);
	if (result != 7)
		statusFlag++;
	result = levelThreeLeafTwo(variable + (i - 8) / variable + 3);
	if (result != 8)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeTwo(variable)
	short           variable;
{
	short           i = variable;
	short           result = 0;
	short           levelThreeLeafThree(), levelThreeLeafFour();
	result = levelThreeLeafThree((i++ + 2 * variable) / variable + 2 * (variable + 2) / 2);
	if (result != 9)
		statusFlag++;
	result = levelThreeLeafFour(2 * (variable + 3) - i + 1);
	if (result != 10)
		statusFlag++;
	return (variable);
}

short
levelTwoNodeThree(variable)
	short           variable;
{
	short           i = variable--;
	short           result = 0;
	short           levelThreeLeafFive(), levelThreeLeafSix();
	result = levelThreeLeafFive((i + variable-- + 3) / 2 + 5);
	if (result != 11)
		statusFlag++;
	result = levelThreeLeafSix((i - variable) * 3 + 2 * i - variable - 1);
	if (result != 12)
		statusFlag++;
	return (i);
}

short
levelTwoNodeFour(variable)
	short           variable;
{
	short           i = variable / 2 - 1;
	short           result = 0;
	short           levelThreeLeafSeven(), levelThreeLeafEight();
	result = levelThreeLeafSeven(variable + i * (variable - i) - 1);
	if (result != 13)
		statusFlag++;
	result = levelThreeLeafEight(i * (2 * variable - i) - variable);
	if (result != 14)
		statusFlag++;
	return (variable);
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafTwo(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafThree(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFour(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafFive(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSix(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafSeven(variable)
	short           variable;
{
	return (variable);
}

short
levelThreeLeafEight(variable)
	short           variable;
{
	return (variable);
}
@def_
@def $macro278()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, return value and legal,
 * function declared to return a pointer to character
 */
{
	char           *s, *levelOne();
	short           i = 0, j = 1;
	static char    *numbers = "01234567890123456789";

	s = levelOne(j, &(numbers[j * (i + 1) * (i + 2) * (i + 3) + 4 * j]));
	if (*s != '1')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
levelOne(variable, numbers)
	short           variable;
	char           *numbers;
{
	char           *s, *levelTwo();
	short           j = variable + 1;

	s = levelTwo(j, numbers - j * j * j - 2);
	if (*s != '2')
		statusFlag++;
	for (s = numbers, j = 0; j < variable; j++, s++);
	return (s);
}

char           *
levelTwo(variable, numbers)
	short           variable;
	char           *numbers;
{
	char           *s, *levelThree();
	short           k = variable + 1;

	s = levelThree(k, numbers + k * k + variable - 1);
	if (*s != '3')
		statusFlag++;
	for (s = numbers, k = 0; k < variable; k++, s++);
	return (s);
}

char           *
levelThree(variable, numbers)
	short           variable;
	char           *numbers;
{
	char           *s;
	short           l;

	for (s = numbers, l = 0; l < variable; l++, s++);
	return (s);
}
@def_
@def $macro279()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, return value, legal
 * pointer to function returning an integer
 */
{
	short           i = 3;
	short           divide4(), result = 0;

	result = dummy1(divide4, ((i == 3) * i - 1) * i * (i - 1));
	if (result != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i = integer--;

	i = (*func) ((-1 + ++i + ++integer) / 2);
	if (i != 3)
		statusFlag++;
	return (i);
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i = integer++;

	i = (*func) ((-1 - --i - --integer) / -2);
	if (i != 6)
		statusFlag++;
	return (i);
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro280()
$LICENSE()
$HEAD()

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, used in conditional
 * expression, integer function declaration
 */
{
	short           i = 1, levelOneNodeOne();
	short           counter = 0;

	while (levelOneNodeOne(i * (i + 1) * (i + 2) * (i + 3) - (i + 4) * (i + 3) - (i + 2)) != 32)
		counter++;
	if (!counter)
		printok();
	else
		printno();
	return (0);
}

short
levelOneNodeOne(variable)
	short           variable;
{
	short           levelTwoNodeOne();

	return (2 * levelTwoNodeOne(2 * variable));
}

short
levelTwoNodeOne(variable)
	short           variable;
{
	short           levelThreeLeafOne();

	return (2 * levelThreeLeafOne(2 * variable));
}

short
levelThreeLeafOne(variable)
	short           variable;
{
	return (2 * variable);
}
@def_
@def $macro281()
$LICENSE()
$HEAD()

char           *protean = "cassandracross";

main()				/* alias root */
/*
 *  test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, used in conditional
 * expression, function declared to return a pointer to character
 */
{
	short           i = 2, j = i;
	char           *skip();

	if (compare(skip(2 * i), &(protean[i * i]), 5)
	    == compare(skip(4 * j), &(protean[j * j * j]), 6))
		printok();
	else
		printno();
	return (0);
}

char           *
skip(skipper)
	short           skipper;
{
	short           i;
	char           *pointer;

	for (i = 0, pointer = protean; i < skipper; i++)
		pointer++;
	return (pointer);
}

compare(s1, s2, n)
	char           *s1, *s2;
	short           n;
{
	while (--n >= 0 && *s1 == *s2++)
		if (*s1++ == '\0')
			return (0);
	return (n < 0 ? 0 : *s1 - *--s2);
}
@def_
@def $macro282()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : linear tree structure, in conditional
 * expression, pointer to function returning an integer
 */
{
	short           i = 2, divide4();

	if (dummy1(divide4, (i - 1 << 3) + (i << 1)) != 3)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy1(func, integer)
	short           (*func) (), integer;
{
	short           i = integer % 3;

	return ((*func) ((integer + i) * (2 + i) / (2 - i)));
}

short
divide4(integer)
	short           integer;
{
	short           divide2();

	return (dummy2(divide2, integer) / 2);
}

dummy2(func, integer)
	short           (*func) (), integer;
{
	short           i = integer + 1;

	return ((*func) ((i + ++integer) / 2 - 1));
}

short
divide2(integer)
	short           integer;
{
	return (integer / 2);
}
@def_
@def $macro283()
$LICENSE()
$HEAD()

#ifndef TimeLimit
#define TimeLimit 10
#endif

short           statusFlag = NoMistake;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, return value, no function
 * declaration
 */
{
	short           i = 0, result = 0;
	short           counter = TimeLimit;

	result = recursiveFunction(i + 1 & i + 1, counter == TimeLimit ? counter : TimeLimit);
	if (result != 12 - counter)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable, counter)
	short           variable, counter;
{
	short           result = 0;
	short           storage = variable + 1;

	if (counter) {
		result = recursiveFunction(variable > TimeLimit * 2 ? --variable : ++variable,
					   counter ? --counter : ++counter);
		if (result != 12 - counter)
			statusFlag++;
	}
	return (storage);
}
@def_
@def $macro284()
$LICENSE()
$HEAD()

#ifndef TimeLimit
#define TimeLimit 10
#endif

short           statusFlag = NoMistake;
short           recursiveFunction();

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, return value, integer function
 * declaration
 */
{
	short           i = 0, result = 0;
	short           counter = TimeLimit;

	result = recursiveFunction(i + 1 & i + 1, counter == TimeLimit ? counter : TimeLimit);
	if (result != 12 - counter)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable, counter)
	short           variable, counter;
{
	short           result = 0;
	short           storage = variable + 1;

	if (counter) {
		result = recursiveFunction(variable > TimeLimit * 2 ? --variable : ++variable,
					   counter ? --counter : ++counter);
		if (result != 12 - counter)
			statusFlag++;
	}
	return (storage);
}
@def_
@def $macro285()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, return value, function
 * declared to return a pointer to character
 */
{
	char           *s, *recursiveFunction();
	short           i = 4;
	short           counter = TimeLimit;
	static char    *numbers = "01234567890123456789";

	s = recursiveFunction(i + i / i * i - 6, &(numbers[i * i - i - i / 2]), counter);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable, numbers, counter)
	short           variable;
	char           *numbers;
	short           counter;
{
	char           *s;
	short           storage = variable;

	if (--counter) {
		s = recursiveFunction((storage + ++variable + 1) / 2 - 1,
				      counter % 2 ? numbers - 10 : &(numbers[10]), counter);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + storage);
}
@def_
@def $macro286()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, return value, pointer to
 * function returning an integer
 */
{
	short           i = 0, increment();
	short           counter = TimeLimit;

	i = dummy(increment, i == 0 ? 3 % (i + 2) : 5 % i, counter);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable, counter)
	short           (*function) (), variable, counter;
{
	short           result = 0;
	short           storage = variable;

	if (--counter) {
		result = dummy(function, (storage + ++variable + 1) / 2 - 1, counter);
		if (result != 2)
			statusFlag++;
	}
	return (function(storage));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro287()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, function in conditional
 * expression, no function declaration
 */
{
	short           i = -1;
	short           counter = TimeLimit;

	if (recursiveFunction((1 - i) / 2, counter) + i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

recursiveFunction(variable, counter)
	short           variable, counter;
{
	short           storage = variable;

	if (--counter)
		if (recursiveFunction((storage + --variable - 3) / 2 + 2, counter)
		    - storage != 1)
			statusFlag++;
	return (++storage);
}
@def_
@def $macro288()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, function in conditional
 * expression, integer function declaration
 */
{
	short           recursiveFunction();
	short           i = -1;
	short           counter = TimeLimit;

	if (recursiveFunction((1 - i) / 2, counter) + i != 1)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
recursiveFunction(variable, counter)
	short           variable, counter;
{
	short           storage = variable;

	if (--counter)
		if (recursiveFunction((storage + --variable - 3) / 2 + 2, counter)
		    - storage != 1)
			statusFlag++;
	return (++storage);
}
@def_
@def $macro289()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, in conditional expression,
 * function declared to return a pointer to character
 */
{
	char           *recursiveFunction();
	short           i = 1, j = 3;

	if (*recursiveFunction((i == j + 1) * i + j) != '3')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
recursiveFunction(variable)
	short           variable;
{
	short           storage = variable;

	if (--counter)
		if (*recursiveFunction(++variable * 3 - storage * storage) != '3')
			statusFlag++;
	return (numbers + storage);
}
@def_
@def $macro290()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : recursive call, in conditional expression,
 * pointer to function returning an integer
 */
{
	short           increment();
	short           i = 2, j = 1;

	if (dummy(increment, j + i * j >= 10 || i - j > 0) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

dummy(function, variable)
	short           (*function) (), variable;
{
	short           storage = variable;

	if (--counter)
		if (dummy(function, (++variable - 1 == 0) + 1) != 2)
			statusFlag++;
	return (function(storage));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro291()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, return value, no function declaration
 */
{
	short           i = 1, j = 2;
	short           counter = TimeLimit;
	short           result = 0;

	result = castor((i & i == i | i) + (j != i), counter);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable, counter)
	short           variable, counter;
{
	short           i = 1, j = 2;
	short           result = 0;

	if (--counter) {
		result = pollux((i & i == i) + (j == i), counter);
		if (result != 1)
			statusFlag++;
	}
	return (variable);
}

pollux(variable, counter)
	short           variable, counter;
{
	short           i = 1, j = 2;
	short           result = 0;

	if (--counter) {
		result = castor((i & i == i & i) + (j != i), counter);
		if (result != 2)
			statusFlag++;
	}
	return (variable);
}
@def_
@def $macro292()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
#ifndef TimeLimit
#define TimeLimit 10
#endif

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, return value, no function declaration
 */
{
	short           i = 1, j = 2;
	short           counter = TimeLimit;
	short           result = 0, castor();

	result = castor((i & i == i | i) + (j != i), counter);
	if (result != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable, counter)
	short           variable, counter;
{
	short           i = 1, j = 2;
	short           result = 0, pollux();

	if (--counter) {
		result = pollux((i & i == i) + (j == i), counter);
		if (result != 1)
			statusFlag++;
	}
	return (variable);
}

short
pollux(variable, counter)
	short           variable, counter;
{
	short           i = 1, j = 2;
	short           result = 0;

	if (--counter) {
		result = castor((i & i == i & i) + (j != i), counter);
		if (result != 2)
			statusFlag++;
	}
	return (variable);
}
@def_
@def $macro293()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, return value, function declared to
 * return a pointer to character
 */
{
	char           *s, *castor();
	short           i = 1, j = 2, k = 3;

	s = castor((++i == j && ++j == k) * 2);
	if (*s != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *s, *pollux();
	short           i = 4;

	if (--counter) {
		s = pollux(i / variable + i);
		if (*s != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	char           *s;
	short           i = 4;

	if (--counter) {
		s = castor(i * 3 / variable);
		if (*s != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro294()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, return value, pointer to function
 * returning an integer
 */
{
	short           i = 0, increment();

	i = castor(increment, i == 1 ? i : 1);
	if (i != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	short           ii = 0;

	if (--counter) {
		ii = pollux(function, variable + 2 * (ii + 2) * (variable + 1));
		if (ii != 10)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	short           iii = 0;

	if (--counter) {
		iii = castor(function, variable - 2 * (iii + 2) * (11 - variable));
		if (iii != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_
@def $macro295()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, in conditional expression, no function
 * declaration
 */
{
	short           i = 0;

	if (castor(++i && ++i ? --i : i + 2) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(variable)
	short           variable;
{
	if (--counter) {
		if (pollux(2 * variable + 2 / variable) != 5)
			statusFlag++;
	}
	return (++variable);
}

pollux(variable)
	short           variable;
{
	if (--counter) {
		if (castor(2 * variable - 7) != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro296()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, in conditional expression, function
 * declared to return an integer
 */
{
	short           i = 0;
	short           castor();

	if (castor(++i && ++i ? --i : i + 2) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

short
castor(variable)
	short           variable;
{
	short           pollux();
	if (--counter) {
		if (pollux(2 * variable + 2 / variable) != 5)
			statusFlag++;
	}
	return (++variable);
}

short
pollux(variable)
	short           variable;
{
	if (--counter) {
		if (castor(2 * variable - 7) != 2)
			statusFlag++;
	}
	return (++variable);
}
@def_
@def $macro297()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;
char           *numbers = "0123456789";

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, in conditional expression, function
 * declared to return a pointer to character
 */
{
	char           *castor();
	short           i = 1, j = 2;

	if (*castor((i << 1 == j) * 2) != '2')
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

char           *
castor(variable)
	short           variable;
{
	char           *pollux();
	if (--counter) {
		if (*pollux(variable << 1 | variable) != '6')
			statusFlag++;
	}
	return (numbers + variable);
}

char           *
pollux(variable)
	short           variable;
{
	if (--counter) {
		if (*castor(variable >> 1 & variable) != '2')
			statusFlag++;
	}
	return (numbers + variable);
}
@def_
@def $macro298()
$LICENSE()
$HEAD()

short           statusFlag = NoMistake;
short           counter = 10;

main()
/*
 * test class: complex arithmatic and logical expression (case 1) instance  : gemini, in conditional expression, pointer to
 * function returning an integer
 */
{
	short           i = 1, increment();

	if (castor(increment, (i << 1 | i) == i + 2) != 2)
		statusFlag++;
	if (statusFlag == NoMistake)
		printok();
	else
		printno();
	return (0);
}

castor(function, variable)
	short           (*function) (), variable;
{
	if (--counter) {
		if (pollux(function, (variable + 2) * 3 + variable * 2) != 12)
			statusFlag++;
	}
	return (function(variable));
}

pollux(function, variable)
	short           (*function) (), variable;
{
	if (--counter) {
		if (castor(function, (variable - 1) / 5 >> 1) != 2)
			statusFlag++;
	}
	return (function(variable));
}

short
increment(variable)
	short           variable;
{
	return (++variable);
}
@def_

@include
testout.h.inc
@include_

@dir ckr.4-2-05
@file >>def.h $macro0() @file_
@file >>fdef.h $macro1() @file_
@file >>ft2501.c $macro2() @file_
@file >>ft2502.c $macro3() @file_
@file >>ft2504.c $macro4() @file_
@file >>ft2506.c $macro5() @file_
@file >>ft2508.c $macro6() @file_
@file >>ft2510.c $macro7() @file_
@file >>ft2511.c $macro8() @file_
@file >>ft2512.c $macro9() @file_
@file >>ft2514.c $macro10() @file_
@file >>ft2516.c $macro11() @file_
@file >>ft2518.c $macro12() @file_
@file >>ft2520.c $macro13() @file_
@file >>ft2521.c $macro14() @file_
@file >>ft2522.c $macro15() @file_
@file >>ft2524.c $macro16() @file_
@file >>ft2526.c $macro17() @file_
@file >>ft2528.c $macro18() @file_
@file >>ft2530.c $macro19() @file_
@file >>ft2601.c $macro20() @file_
@file >>ft2602.c $macro21() @file_
@file >>ft2604.c $macro22() @file_
@file >>ft2606.c $macro23() @file_
@file >>ft2608.c $macro24() @file_
@file >>ft2610.c $macro25() @file_
@file >>ft2611.c $macro26() @file_
@file >>ft2612.c $macro27() @file_
@file >>ft2614.c $macro28() @file_
@file >>ft2616.c $macro29() @file_
@file >>ft2618.c $macro30() @file_
@file >>ft2620.c $macro31() @file_
@file >>ft2621.c $macro32() @file_
@file >>ft2622.c $macro33() @file_
@file >>ft2624.c $macro34() @file_
@file >>ft2626.c $macro35() @file_
@file >>ft2628.c $macro36() @file_
@file >>ft2630.c $macro37() @file_
@file >>ft2701.c $macro38() @file_
@file >>ft2702.c $macro39() @file_
@file >>ft2704.c $macro40() @file_
@file >>ft2706.c $macro41() @file_
@file >>ft2708.c $macro42() @file_
@file >>ft2710.c $macro43() @file_
@file >>ft2711.c $macro44() @file_
@file >>ft2714.c $macro45() @file_
@file >>ft2716.c $macro46() @file_
@file >>ft2718.c $macro47() @file_
@file >>ft2720.c $macro48() @file_
@file >>ft2721.c $macro49() @file_
@file >>ft2722.c $macro50() @file_
@file >>ft2724.c $macro51() @file_
@file >>ft2726.c $macro52() @file_
@file >>ft2728.c $macro53() @file_
@file >>ft2730.c $macro54() @file_
@file >>lt2501.c $macro55() @file_
@file >>lt2502.c $macro56() @file_
@file >>lt2504.c $macro57() @file_
@file >>lt2506.c $macro58() @file_
@file >>lt2508.c $macro59() @file_
@file >>lt2510.c $macro60() @file_
@file >>lt2511.c $macro61() @file_
@file >>lt2512.c $macro62() @file_
@file >>lt2514.c $macro63() @file_
@file >>lt2516.c $macro64() @file_
@file >>lt2518.c $macro65() @file_
@file >>lt2520.c $macro66() @file_
@file >>lt2521.c $macro67() @file_
@file >>lt2522.c $macro68() @file_
@file >>lt2524.c $macro69() @file_
@file >>lt2526.c $macro70() @file_
@file >>lt2528.c $macro71() @file_
@file >>lt2530.c $macro72() @file_
@file >>lt2601.c $macro73() @file_
@file >>lt2602.c $macro74() @file_
@file >>lt2604.c $macro75() @file_
@file >>lt2606.c $macro76() @file_
@file >>lt2608.c $macro77() @file_
@file >>lt2610.c $macro78() @file_
@file >>lt2611.c $macro79() @file_
@file >>lt2612.c $macro80() @file_
@file >>lt2614.c $macro81() @file_
@file >>lt2616.c $macro82() @file_
@file >>lt2618.c $macro83() @file_
@file >>lt2620.c $macro84() @file_
@file >>lt2621.c $macro85() @file_
@file >>lt2622.c $macro86() @file_
@file >>lt2624.c $macro87() @file_
@file >>lt2626.c $macro88() @file_
@file >>lt2628.c $macro89() @file_
@file >>lt2630.c $macro90() @file_
@file >>lt2701.c $macro91() @file_
@file >>lt2702.c $macro92() @file_
@file >>lt2704.c $macro93() @file_
@file >>lt2706.c $macro94() @file_
@file >>lt2708.c $macro95() @file_
@file >>lt2710.c $macro96() @file_
@file >>lt2711.c $macro97() @file_
@file >>lt2714.c $macro98() @file_
@file >>lt2716.c $macro99() @file_
@file >>lt2718.c $macro100() @file_
@file >>lt2720.c $macro101() @file_
@file >>lt2721.c $macro102() @file_
@file >>lt2722.c $macro103() @file_
@file >>lt2724.c $macro104() @file_
@file >>lt2726.c $macro105() @file_
@file >>lt2728.c $macro106() @file_
@file >>lt2730.c $macro107() @file_
@file >>lt2801.c $macro108() @file_
@file >>lt2802.c $macro109() @file_
@file >>lt2806.c $macro110() @file_
@file >>lt2808.c $macro111() @file_
@file >>lt2810.c $macro112() @file_
@file >>lt2811.c $macro113() @file_
@file >>lt2812.c $macro114() @file_
@file >>lt2814.c $macro115() @file_
@file >>lt2816.c $macro116() @file_
@file >>lt2818.c $macro117() @file_
@file >>lt2820.c $macro118() @file_
@file >>lt2821.c $macro119() @file_
@file >>lt2822.c $macro120() @file_
@file >>lt2824.c $macro121() @file_
@file >>lt2826.c $macro122() @file_
@file >>lt2828.c $macro123() @file_
@file >>lt2830.c $macro124() @file_
@file >>lt2902.c $macro125() @file_
@file >>lt2906.c $macro126() @file_
@file >>lt2908.c $macro127() @file_
@file >>lt2910.c $macro128() @file_
@file >>lt2912.c $macro129() @file_
@file >>lt2914.c $macro130() @file_
@file >>lt2916.c $macro131() @file_
@file >>lt2918.c $macro132() @file_
@file >>lt2920.c $macro133() @file_
@file >>lt2921.c $macro134() @file_
@file >>lt2922.c $macro135() @file_
@file >>lt2924.c $macro136() @file_
@file >>lt2928.c $macro137() @file_
@file >>lt2930.c $macro138() @file_
@file >>lt3001.c $macro139() @file_
@file >>lt3002.c $macro140() @file_
@file >>lt3004.c $macro141() @file_
@file >>lt3006.c $macro142() @file_
@file >>lt3008.c $macro143() @file_
@file >>lt3010.c $macro144() @file_
@file >>lt3011.c $macro145() @file_
@file >>lt3012.c $macro146() @file_
@file >>lt3014.c $macro147() @file_
@file >>lt3016.c $macro148() @file_
@file >>lt3018.c $macro149() @file_
@file >>lt3020.c $macro150() @file_
@file >>lt3021.c $macro151() @file_
@file >>lt3022.c $macro152() @file_
@file >>lt3026.c $macro153() @file_
@file >>lt3028.c $macro154() @file_
@file >>lt3030.c $macro155() @file_
@file >>t2503.c $macro156() @file_
@file >>t2504.c $macro157() @file_
@file >>t2505.c $macro158() @file_
@file >>t2506.c $macro159() @file_
@file >>t2507.c $macro160() @file_
@file >>t2508.c $macro161() @file_
@file >>t2509.c $macro162() @file_
@file >>t2510.c $macro163() @file_
@file >>t2513.c $macro164() @file_
@file >>t2514.c $macro165() @file_
@file >>t2515.c $macro166() @file_
@file >>t2516.c $macro167() @file_
@file >>t2517.c $macro168() @file_
@file >>t2518.c $macro169() @file_
@file >>t2519.c $macro170() @file_
@file >>t2520.c $macro171() @file_
@file >>t2523.c $macro172() @file_
@file >>t2524.c $macro173() @file_
@file >>t2525.c $macro174() @file_
@file >>t2526.c $macro175() @file_
@file >>t2527.c $macro176() @file_
@file >>t2528.c $macro177() @file_
@file >>t2529.c $macro178() @file_
@file >>t2530.c $macro179() @file_
@file >>t2603.c $macro180() @file_
@file >>t2604.c $macro181() @file_
@file >>t2605.c $macro182() @file_
@file >>t2606.c $macro183() @file_
@file >>t2607.c $macro184() @file_
@file >>t2608.c $macro185() @file_
@file >>t2609.c $macro186() @file_
@file >>t2610.c $macro187() @file_
@file >>t2613.c $macro188() @file_
@file >>t2614.c $macro189() @file_
@file >>t2615.c $macro190() @file_
@file >>t2616.c $macro191() @file_
@file >>t2617.c $macro192() @file_
@file >>t2618.c $macro193() @file_
@file >>t2619.c $macro194() @file_
@file >>t2620.c $macro195() @file_
@file >>t2623.c $macro196() @file_
@file >>t2624.c $macro197() @file_
@file >>t2625.c $macro198() @file_
@file >>t2626.c $macro199() @file_
@file >>t2627.c $macro200() @file_
@file >>t2628.c $macro201() @file_
@file >>t2629.c $macro202() @file_
@file >>t2630.c $macro203() @file_
@file >>t2703.c $macro204() @file_
@file >>t2704.c $macro205() @file_
@file >>t2705.c $macro206() @file_
@file >>t2706.c $macro207() @file_
@file >>t2707.c $macro208() @file_
@file >>t2708.c $macro209() @file_
@file >>t2709.c $macro210() @file_
@file >>t2710.c $macro211() @file_
@file >>t2713.c $macro212() @file_
@file >>t2714.c $macro213() @file_
@file >>t2715.c $macro214() @file_
@file >>t2716.c $macro215() @file_
@file >>t2717.c $macro216() @file_
@file >>t2718.c $macro217() @file_
@file >>t2719.c $macro218() @file_
@file >>t2720.c $macro219() @file_
@file >>t2723.c $macro220() @file_
@file >>t2724.c $macro221() @file_
@file >>t2725.c $macro222() @file_
@file >>t2726.c $macro223() @file_
@file >>t2727.c $macro224() @file_
@file >>t2728.c $macro225() @file_
@file >>t2729.c $macro226() @file_
@file >>t2730.c $macro227() @file_
@file >>t2803.c $macro228() @file_
@file >>t2804.c $macro229() @file_
@file >>t2805.c $macro230() @file_
@file >>t2806.c $macro231() @file_
@file >>t2807.c $macro232() @file_
@file >>t2808.c $macro233() @file_
@file >>t2809.c $macro234() @file_
@file >>t2810.c $macro235() @file_
@file >>t2813.c $macro236() @file_
@file >>t2814.c $macro237() @file_
@file >>t2815.c $macro238() @file_
@file >>t2816.c $macro239() @file_
@file >>t2817.c $macro240() @file_
@file >>t2818.c $macro241() @file_
@file >>t2819.c $macro242() @file_
@file >>t2820.c $macro243() @file_
@file >>t2823.c $macro244() @file_
@file >>t2824.c $macro245() @file_
@file >>t2825.c $macro246() @file_
@file >>t2826.c $macro247() @file_
@file >>t2827.c $macro248() @file_
@file >>t2828.c $macro249() @file_
@file >>t2829.c $macro250() @file_
@file >>t2830.c $macro251() @file_
@file >>t2901.c $macro252() @file_
@file >>t2903.c $macro253() @file_
@file >>t2904.c $macro254() @file_
@file >>t2905.c $macro255() @file_
@file >>t2906.c $macro256() @file_
@file >>t2907.c $macro257() @file_
@file >>t2908.c $macro258() @file_
@file >>t2909.c $macro259() @file_
@file >>t2910.c $macro260() @file_
@file >>t2911.c $macro261() @file_
@file >>t2913.c $macro262() @file_
@file >>t2914.c $macro263() @file_
@file >>t2915.c $macro264() @file_
@file >>t2917.c $macro265() @file_
@file >>t2918.c $macro266() @file_
@file >>t2919.c $macro267() @file_
@file >>t2920.c $macro268() @file_
@file >>t2923.c $macro269() @file_
@file >>t2924.c $macro270() @file_
@file >>t2925.c $macro271() @file_
@file >>t2926.c $macro272() @file_
@file >>t2927.c $macro273() @file_
@file >>t2928.c $macro274() @file_
@file >>t2929.c $macro275() @file_
@file >>t3003.c $macro276() @file_
@file >>t3004.c $macro277() @file_
@file >>t3005.c $macro278() @file_
@file >>t3006.c $macro279() @file_
@file >>t3008.c $macro280() @file_
@file >>t3009.c $macro281() @file_
@file >>t3010.c $macro282() @file_
@file >>t3013.c $macro283() @file_
@file >>t3014.c $macro284() @file_
@file >>t3015.c $macro285() @file_
@file >>t3016.c $macro286() @file_
@file >>t3017.c $macro287() @file_
@file >>t3018.c $macro288() @file_
@file >>t3019.c $macro289() @file_
@file >>t3020.c $macro290() @file_
@file >>t3023.c $macro291() @file_
@file >>t3024.c $macro292() @file_
@file >>t3025.c $macro293() @file_
@file >>t3026.c $macro294() @file_
@file >>t3027.c $macro295() @file_
@file >>t3028.c $macro296() @file_
@file >>t3029.c $macro297() @file_
@file >>t3030.c $macro298() @file_
@file >>testout.h $testout() @file_
@dir_
