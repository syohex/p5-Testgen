@comment
  Copyright (C) 2005 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA

Please email any bugs, comments, and/or additions to this file to:
ishiura-gcc@ksc.kwansei.ac.jp

This file was written by Yuki Uchiyama. (ishiura-gcc@ksc.kwansei.ac.jp)
@comment_

@include
license.inc
@include_

@def $HEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "stnd2.8.h"
@def_

@def $FHEADER()
#ifdef SYSDEP_H
#include "sysdep.h"
#endif
#include "fstnd2.8.h"
@def_

@def $test1($VAR9)
	itest = NO;
	$VAR9 = OK;
	itest = (float) (char) $VAR9;

	if (itest == OK)
		printok();
	else
		printno();
@def_
@def $ctest1($VAR9)
	ctest = NCHAR;
	$VAR9 = YCHAR;
	ctest = (char) (float) $VAR9;

	if (ctest == YCHAR)
		printok();
	else
		printno();
@def_
@def $ftest1($VAR9)
	ftest = NO_f;
	$VAR9 = OK_f;
	ftest = (float) (char) $VAR9;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();
@def_

@def $macro0($VARIABLE)
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	float           Float2;
	$VARIABLE       Variable;

	ftest = NO_f;
	Float = INUM_f;
	Float2 = MNUM_f;
	Variable = MNUM;
	ftest = Float * Variable / Float2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_


@def $macro1()
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	short           Short;
	short           Short2;

	ftest = NO_f;
	Float = MNUM_f;
	Short = INUM;
	Short2 = MNUM;
	ftest = Short * Float / Short2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_
@def $macro2()
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	float           Float2;
	unsigned        Unsigned;

	ftest = NO_f;
	Float = INUM_f;
	Float2 = MNUM_f;
	Unsigned = MNUM;
	ftest = Unsigned * Float / Unsigned;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_
@def $macro3()
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	float           Float2;
	long            Long;

	ftest = NO_f;
	Float = INUM_f;
	Float2 = MNUM_f;
	Long = MNUM;
	ftest = Float * Long / Float2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_
@def $macro4()
$LICENSE()
$FHEADER()
main()
{
	float           Float;
	long            Long;
	long            Long2;

	ftest = NO_f;
	Float = MNUM_f;
	Long = INUM;
	Long2 = MNUM;
	ftest = Long * Float / Long2;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_

@def $macro5($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER float           Float;

	ftest = NO_f;
	Float = OK_f;
	ftest = Float * INUM_f / INUM_f;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	return (0);
}
@def_


@def $macro6($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		float           Float;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

	itest = NO;
	Struct.Int = OK;
	itest = Struct.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Long = OK;
	itest = Struct.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Struct.Float = OK_f;
	ftest = Struct.Float * INUM_f / INUM_f;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	itest = NO;
	Struct.Short = OK;
	itest = Struct.Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Unsigned = OK;
	itest = Struct.Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Struct.Char = YCHAR;
	ctest = Struct.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro7($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		long            Long;
		float           Float;
		char            Char;
	}               Union;

	itest = NO;
	Union.Int = OK;
	itest = Union.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Union.Long = OK;
	itest = Union.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Union.Float = OK_f;
	ftest = Union.Float * INUM_f / INUM_f;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	ctest = NCHAR;
	Union.Char = YCHAR;
	ctest = Union.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro8($MODIFIER)
$LICENSE()
$FHEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER LONGDEF         Longdef;
	$MODIFIER FLOATDEF        Floatdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

	itest = NO;
	Intdef = OK;
	itest = Intdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Longdef = OK;
	itest = Longdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Floatdef = OK_f;
	ftest = Floatdef * INUM_f / INUM_f;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	itest = NO;
	Shortdef = OK;
	itest = Shortdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unsigndef = OK;
	itest = Unsigndef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Chardef = YCHAR;
	ctest = Chardef / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Int = OK;
	itest = Strdef.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Long = OK;
	itest = Strdef.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Strdef.Float = OK_f;
	ftest = Strdef.Float * INUM_f / INUM_f;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	itest = NO;
	Strdef.Short = OK;
	itest = Strdef.Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Unsigned = OK;
	itest = Strdef.Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Strdef.Char = YCHAR;
	ctest = Strdef.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Int = OK;
	itest = Unidef.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Long = OK;
	itest = Unidef.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ftest = NO_f;
	Unidef.Float = OK_f;
	ftest = Unidef.Float * INUM_f / INUM_f;

 if ( (TGEN_FLT_EQ(ftest, OK_f)) )
		printok();
 if ( (TGEN_FLT_EQ(ftest, NO_f)) )
		printno();

	ctest = NCHAR;
	Unidef.Char = YCHAR;
	ctest = Unidef.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro9()
$LICENSE()
$HEADER()
main()
{
	long            Long;
	long            Long2;
	short           Short;

	itest = NO;
	Long = INUM;
	Long2 = MNUM;
	Short = MNUM;
	itest = Long * Short / Long2 % Short;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_
@def $macro10()
$LICENSE()
$HEADER()
main()
{
	long            Long;
	long            Long2;
	unsigned        Unsigned;

	itest = NO;
	Long = INUM;
	Long2 = MNUM;
	Unsigned = MNUM;
	itest = Long * Unsigned / Long2 % Unsigned;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_

@def $macro11()
$LICENSE()
$HEADER()
main()
{
	long            Long;
	short           Short;
	short           Short2;

	itest = NO;
	Long = MNUM;
	Short = INUM;
	Short2 = MNUM;
	itest = Short * Long / Short2 % Long;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_
@def $macro12()
$LICENSE()
$HEADER()
main()
{
	long            Long;
	long            Long2;
	unsigned        Unsigned;

	itest = NO;
	Long = INUM;
	Long2 = MNUM;
	Unsigned = MNUM;
	itest = Unsigned * Long / Unsigned % Long2;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_

@def $macro13($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER long            Long;

	itest = NO;
	Long = OK;
	itest = Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro14($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		long            Long;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

	itest = NO;
	Struct.Int = OK;
	itest = Struct.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Long = OK;
	itest = Struct.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Short = OK;
	itest = Struct.Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Unsigned = OK;
	itest = Struct.Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Struct.Char = YCHAR;
	ctest = Struct.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro15($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		long            Long;
		char            Char;
	}               Union;

	itest = NO;
	Union.Int = OK;
	itest = Union.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Union.Long = OK;
	itest = Union.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Union.Char = YCHAR;
	ctest = Union.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro16($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER LONGDEF         Longdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

	itest = NO;
	Intdef = OK;
	itest = Intdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Longdef = OK;
	itest = Longdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Shortdef = OK;
	itest = Shortdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unsigndef = OK;
	itest = Unsigndef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Chardef = YCHAR;
	ctest = Chardef / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Int = OK;
	itest = Strdef.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Long = OK;
	itest = Strdef.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Short = OK;
	itest = Strdef.Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Unsigned = OK;
	itest = Strdef.Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Strdef.Char = YCHAR;
	ctest = Strdef.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Int = OK;
	itest = Unidef.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Long = OK;
	itest = Unidef.Long * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Unidef.Char = YCHAR;
	ctest = Unidef.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro17()
$LICENSE()
#include "testout.h"
long            itest;
char            ctest;
#define INUM 1
#define MNUM 2
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;
union Union {
	int             Int;
	long            Long;
	char            Char;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	char            Char;
}               UNIDEF;
@def_

@def $macro18()
$LICENSE()
#include "testout.h"
float           ftest;
long            itest;
char            ctest;
#define INUM 1
#define MNUM 2
#define INUM_f 1.0
#define MNUM_f 2.0
#define OK_f 1.0
#define NO_f 0.0
#define OK 1
#define NO 0
#define YCHAR	'y'
#define NCHAR	'n'
int             Int;
long            Long;
float           Float;
short           Short;
unsigned        Unsigned;
char            Char;
struct Struct {
	int             Int;
	long            Long;
	float           Float;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               Struct;
union Union {
	int             Int;
	long            Long;
	float           Float;
	char            Char;
}               Union;
typedef int     INTDEF;
typedef long    LONGDEF;
typedef float   FLOATDEF;
typedef short   SHORTDEF;
typedef unsigned UNSIGNDEF;
typedef char    CHARDEF;
typedef struct {
	int             Int;
	long            Long;
	float           Float;
	short           Short;
	unsigned        Unsigned;
	char            Char;
}               STRDEF;
typedef union {
	int             Int;
	long            Long;
	float           Float;
	char            Char;
}               UNIDEF;
@def_

@def $macro19($MODIFIER,$VAR1,$TYPE1)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER $TYPE1 $VAR1;

	itest = NO;
	$VAR1 = OK;
	itest = $VAR1 * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro20()
$LICENSE()
$HEADER()
main()
{
	extern int Int;

	itest = NO;
	Int = OK;
	itest = Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_
@def $macro21()
$LICENSE()
$HEADER()
main()
{
	extern short Short;

	itest = NO;
	Short = OK;
	itest = Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_
@def $macro22()
$LICENSE()
$HEADER()
main()
{
	extern unsigned Unsigned;

	itest = NO;
	Unsigned = OK;
	itest = Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_
@def $macro23()
$LICENSE()
$HEADER()
main()
{
	extern char Char;

	itest = NO;
	Char = OK;
	itest = Char * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_
@def $macro24($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER struct Struct {
		int             Int;
		short           Short;
		unsigned        Unsigned;
		char            Char;
	}               Struct;

	itest = NO;
	Struct.Int = OK;
	itest = Struct.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Short = OK;
	itest = Struct.Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Struct.Unsigned = OK;
	itest = Struct.Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Struct.Char = YCHAR;
	ctest = Struct.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro25($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER union Union {
		int             Int;
		char            Char;
	}               Union;

	itest = NO;
	Union.Int = OK;
	itest = Union.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Union.Char = YCHAR;
	ctest = Union.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_


@def $macro26($MODIFIER)
$LICENSE()
$HEADER()
main()
{
	$MODIFIER INTDEF          Intdef;
	$MODIFIER SHORTDEF        Shortdef;
	$MODIFIER UNSIGNDEF       Unsigndef;
	$MODIFIER CHARDEF         Chardef;
	$MODIFIER STRDEF          Strdef;
	$MODIFIER UNIDEF          Unidef;

	itest = NO;
	Intdef = OK;
	itest = Intdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Shortdef = OK;
	itest = Shortdef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unsigndef = OK;
	itest = Unsigndef * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Chardef = YCHAR;
	ctest = Chardef / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Int = OK;
	itest = Strdef.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Short = OK;
	itest = Strdef.Short * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	itest = NO;
	Strdef.Unsigned = OK;
	itest = Strdef.Unsigned * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Strdef.Char = YCHAR;
	ctest = Strdef.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	itest = NO;
	Unidef.Int = OK;
	itest = Unidef.Int * INUM / INUM % MNUM;

	if (itest == OK)
		printok();
	else
		printno();


	ctest = NCHAR;
	Unidef.Char = YCHAR;
	ctest = Unidef.Char / YCHAR * NCHAR / NCHAR;

	if (ctest == OK)
		printok();
	else
		printno();


	return (0);
}
@def_

@def $testout()
#ifdef unix
#include<stdio.h>
#include<float.h>
#define printok() printf("@OK@\n")
#define printno() printf("@NG@\n")
#define ABS(a) ((a > 0)? (a) : (-(a)))
#define MAX(a, b) ((a > b)? (a) : (b))
#define TGEN_FLT_EQ(a, b) ( ((a)==(b)) || ABS(((a) - (b))) / MAX( ABS(a), ABS(b) ) <= FLT_EPSILON )
#endif
@def_

@dir ckr.2-1-08
@file >>fn???.c $macro0([short,unsigned]) @file_
@file >>fn002.c $macro1() @file_
@file >>fn003.c $macro2() @file_
@file >>fn004.c $macro3() @file_
@file >>fn005.c $macro4() @file_
@file >>ft???.c $macro5([,extern,static]) @file_
@file >>ft???.c $macro6([,static]) @file_
@file >>ft???.c $macro7([,static]) @file_
@file >>ft???.c $macro8([,static]) @file_
@file >>ln000.c $macro9() @file_
@file >>ln001.c $macro10() @file_
@file >>ln002.c $macro11() @file_
@file >>ln003.c $macro12() @file_
@file >>lt???.c $macro13([,extern,static]) @file_
@file >>lt???.c $macro14([,static]) @file_
@file >>lt???.c $macro15([,static]) @file_
@file >>lt???.c $macro16([,static]) @file_
@file >>stnd2.8.h $macro17() @file_
@file >>fstnd2.8.h $macro18() @file_
@file >>t???_.c $macro19([,static,register],Variable,[int,short,unsigned,char]) @file_
@file >>t???_extern_int.c $macro19(extern,Int,int) @file_
@file >>t???_extern_short.c $macro19(extern,Short,short) @file_
@file >>t???_extern_unsigned.c $macro19(extern,Unsigned,unsigned) @file_
@file >>t???_extern_char.c $macro19(extern,Char,char) @file_
@file >>t???.c $macro24([,static,register]) @file_
@file >>t???.c $macro25([,static,register]) @file_
@file >>t???.c $macro26([,static,register]) @file_
@file >>testout.h $testout() @file_
@dir_
