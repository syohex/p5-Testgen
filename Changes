Revision history for Testgen2

0.12 2012-09-19
  - Fix Getopt::Long configuration.
    Default configuration is too ambiguous

0.11 2012-05-24
  - Fixed returning invalid status problem.

0.10 2011-11-11
  - Fix document spell

0.09 2011-11-11
  - Add new feature to Testgen::TemplateFile::Macro
     'body' parameter accept CodeRef.
     This feature is for creating builtin function.

0.08 2011-11-09
  - Add authors tests
  - Fix spelling of document and violation of Perl::Critic

0.07 2011-11-02
  - Fix too many opened temp files problem.
  - Fix locale problem.

0.06 2011-10-15
  Fix run_with_ipc function.
  Using tempfile instead of pipe.

  See Also
    http://www.slideshare.net/kazuho/unix-programming-with-perl-2?from=ss_embed

0.05 2011-09-23
  More Compliancing C89.

0.04 2011-09-20
  All tests are passed in Windows platform.
  Add a configuration file of Visual C++ compiler.

0.03  2011-08-21
  Fix some bugs.
  Add syntax checking.
  Support Windows platform(Experimental).

0.02  2011-08-17
  Implement parsing @include section.
    - You can include other file in template file.

0.01  2011-07-31
  Code refactoring by Syohei YOSHIDA
  Original source codes are testgen2-20110128.zip.

  [Modification]
     General
       - Object Oriented programming
       - Modern Perl programming style as possible
       - CPAN style directory hierarchy
       - Add test programs under t/ directory
       - Remove use of external command, using standard module
         instead of them as possible

       More readable as possible !!

     Template file
       - Fix typo author's name 'Youki Uchiyama' => 'Yuki Uchiyama'
       - Default encoding euc-jp => utf8
       - Fix some bugs.
       - Fix definiton of NULL. Some preprocessors don't permit
         to redefine macro as default.
       - Fix TGEN_FLT_EQ. Because __FLT_EPSILON__ is GCC's predefined macro,
         other compiler does not defined it. In ANSI-C, FLT_EPSILON macro
         defines in float.h. So __FLT_EPSILON__ is changed FLT_EPSILON and
         add '#include <float.h>'.

       - Introduction of predefined macro (eg. $CHARMAX(), $UCHARMAX()...)
           Original template file depend on 32bit platform, so some tests
           are failed on 64bit platform. You can do away with number literals
           which depend on bit-width of target platform by using predefined
           macros.

           Predefined macros are auto generated from a configuration file.

     Configuration file
       - just a perl hash reference( parsing and analyzing easily!! )

     Run script
       - color log
       - fix log message
       - parallel testing(Experimental)
